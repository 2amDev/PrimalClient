#pragma once

#include <stdint.h>

namespace Offsets
{
	namespace Classes
	{
		// Inheritance: ACharacter > APawn > AActor > UObject
		namespace APrimalCharacter
		{
			constexpr auto OldLocation = 0x6c8; // FVector
			constexpr auto OldRotation = 0x6d4; // FRotator
			constexpr auto EffectorInterpSpeed = 0x6e0; // float
			constexpr auto HalfLegLength = 0x6e4; // float
			constexpr auto TwoLeggedVirtualPointDistFactor = 0x6e8; // float
			constexpr auto FullIKDistance = 0x6ec; // float
			constexpr auto IKAfterFallingTime = 0x6f0; // float
			constexpr auto SimpleIkRate = 0x6f4; // float
			constexpr auto GroundCheckExtent = 0x6f8; // FVector
			constexpr auto LastForceAimedCharactersTime = 0x708; // double
			constexpr auto JumpAnim = 0x710; // UAnimMontage*
			constexpr auto LandedAnim = 0x718; // UAnimMontage*
			constexpr auto HurtAnim = 0x720; // UAnimMontage*
			constexpr auto HurtAnim_Flying = 0x728; // UAnimMontage*
			constexpr auto PinnedAnim = 0x730; // UAnimMontage*
			constexpr auto HurtFX = 0x738; // UParticleSystem*
			constexpr auto HurtSound = 0x740; // USoundCue*
			constexpr auto RootBodyBoneName = 0x748; // FName
			constexpr auto HurtDecalData = 0x750; // FDecalData
			constexpr auto bDisableCameraShakeOnNotifyHit = 0x788; // char : 1
			constexpr auto bHasBuffPreSerializeForInstigator = 0x788; // char : 1
			constexpr auto bUseBPOverrideAccessInventoryInput = 0x788; // char : 1
			constexpr auto bUseBlueprintJumpInputEvents = 0x788; // char : 1
			constexpr auto TribeName = 0x790; // FString
			constexpr auto WaterSubmergedDepthThreshold = 0x7a0; // float
			constexpr auto ProneWaterSubmergedDepthThreshold = 0x7a4; // float
			constexpr auto SubmergedWaterMovementMode = 0x7a8; // EMovementMode
			constexpr auto UnSubmergedWaterMovementMode = 0x7a9; // EMovementMode
			constexpr auto DamageTypeAdjusters = 0x7b0; // TArray<FDamageTypeAdjuster>
			constexpr auto SnapshotScale = 0x7c0; // float
			constexpr auto SnapshotPoses = 0x7c8; // TArray<FPrimalSnapshotPose>
			constexpr auto PoopItemClass = 0x7d8; // UPrimalItem*
			constexpr auto TaxidermySkinClass = 0x7e0; // UPrimalItem*
			constexpr auto DragBoneName = 0x7e8; // FName
			constexpr auto DragSocketName = 0x7f0; // FName
			constexpr auto MaxDragDistance = 0x7f8; // float
			constexpr auto MaxDragDistanceTimeout = 0x7fc; // float
			constexpr auto BonesToIngoreWhileDragged = 0x800; // TArray<FName>
			constexpr auto PreviewCameraMaxZoomMultiplier = 0x810; // float
			constexpr auto PreviewCameraDefaultZoomMultiplier = 0x814; // float
			constexpr auto PreviewCameraDistanceScaleFactor = 0x818; // float
			constexpr auto StartDraggedSound = 0x820; // USoundBase*
			constexpr auto EndDraggedSound = 0x828; // USoundBase*
			constexpr auto DraggedCharacter = 0x830; // APrimalCharacter*
			constexpr auto DraggingCharacter = 0x838; // APrimalCharacter*
			constexpr auto StasisConsumerRangeMultiplier = 0x880; // float
			constexpr auto bIsSleeping = 0x884; // char : 1
			constexpr auto bActiveRunToggle = 0x884; // char : 1
			constexpr auto bIsBeingDragged = 0x884; // char : 1
			constexpr auto bDisableSpawnDefaultController = 0x884; // char : 1
			constexpr auto bIsDragging = 0x884; // char : 1
			constexpr auto bIsDraggingWithGrapHook = 0x884; // char : 1
			constexpr auto bDeathKeepCapsuleCollision = 0x884; // char : 1
			constexpr auto bWantsToRun = 0x884; // char : 1
			constexpr auto bCanBeTorpid = 0x885; // char : 1
			constexpr auto bDebugIK_ShowTraceNames = 0x885; // char : 1
			constexpr auto bDebugIK = 0x885; // char : 1
			constexpr auto bCanRun = 0x885; // char : 1
			constexpr auto bSleepedWaterRagdoll = 0x885; // char : 1
			constexpr auto bIsBlinking = 0x885; // char : 1
			constexpr auto bUseHealthDamageMaterialOverlay = 0x885; // char : 1
			constexpr auto bRemoteRunning = 0x885; // char : 1
			constexpr auto bDeathUseRagdoll = 0x886; // char : 1
			constexpr auto bDamageNotifyTeamAggroAI = 0x886; // char : 1
			constexpr auto bCanBeCarried = 0x886; // char : 1
			constexpr auto bUseBPCanNotifyTeamAggroAI = 0x886; // char : 1
			constexpr auto bIsBigDino = 0x886; // char : 1
			constexpr auto bUsePoopAnimationNotify = 0x886; // char : 1
			constexpr auto bRagdollIgnoresPawnCapsules = 0x886; // char : 1
			constexpr auto bForceAlwaysUpdateMesh = 0x886; // char : 1
			constexpr auto bUseBP_OverrideCameraTargetOriginLocation = 0x887; // char : 1
			constexpr auto bUseBPGetOverrideCameraInterpSpeed = 0x887; // char : 1
			constexpr auto bRecentlyUpdateIk = 0x887; // char : 1
			constexpr auto bIKEnabled = 0x887; // char : 1
			constexpr auto bIsCarried = 0x887; // char : 1
			constexpr auto bIsCarriedAsPassenger = 0x887; // char : 1
			constexpr auto bUseBPPreventFallDamage = 0x887; // char : 1
			constexpr auto bUseBPNotifyIsDamageCauserOfAddedBuff = 0x887; // char : 1
			constexpr auto bPreventProjectileAttachment = 0x888; // char : 1
			constexpr auto ImmobilizationActor = 0x890; // AActor*
			constexpr auto bForceIKOnDedicatedServer = 0x898; // char : 1
			constexpr auto bIgnoreAllImmobilizationTraps = 0x898; // char : 1
			constexpr auto bForceTriggerIgnoredTraps = 0x898; // char : 1
			constexpr auto bIsImmobilized = 0x898; // char : 1
			constexpr auto bCanIgnoreWater = 0x898; // char : 1
			constexpr auto bIsDead = 0x898; // char : 1
			constexpr auto ReplicateAllBones = 0x898; // char : 1
			constexpr auto AutoStopReplicationWhenSleeping = 0x898; // char : 1
			constexpr auto bPreventSimpleIK = 0x899; // char : 1
			constexpr auto bOrbitCamera = 0x899; // char : 1
			constexpr auto bOnlyAllowRunningWhileFlying = 0x899; // char : 1
			constexpr auto bForceNetDidLand = 0x899; // char : 1
			constexpr auto bCanDrag = 0x899; // char : 1
			constexpr auto bCanBeDragged = 0x899; // char : 1
			constexpr auto bUsesRunningAnimation = 0x899; // char : 1
			constexpr auto bDraggedFromExtremitiesOnly = 0x89a; // char : 1
			constexpr auto bEnableIK = 0x89b; // char : 1
			constexpr auto bOnlyPlayPoopAnimWhileWalking = 0x89b; // char : 1
			constexpr auto bUseBlueprintAnimNotifyCustomEvent = 0x89b; // char : 1
			constexpr auto bNoDamageImpulse = 0x89b; // char : 1
			constexpr auto bPreventImmobilization = 0x89b; // char : 1
			constexpr auto bHasDynamicBase = 0x8a0; // char : 1
			constexpr auto bDediForceUnregisterSKMesh = 0x8a0; // char : 1
			constexpr auto bSleepingUseRagdoll = 0x8a0; // char : 1
			constexpr auto bReadyToPoop = 0x8a0; // char : 1
			constexpr auto bDieIfLeftWater = 0x8a1; // char : 1
			constexpr auto bIsAmphibious = 0x8a1; // char : 1
			constexpr auto bUseAmphibiousTargeting = 0x8a1; // char : 1
			constexpr auto bIsWaterDino = 0x8a1; // char : 1
			constexpr auto bIsFlyerDino = 0x8a1; // char : 1
			constexpr auto bIgnoreTargetingCarnivores = 0x8a1; // char : 1
			constexpr auto bDontActuallyEmitPoop = 0x8a2; // char : 1
			constexpr auto bAllowRunningWhileSwimming = 0x8a2; // char : 1
			constexpr auto bBPHUDOverideBuffProgressBar = 0x8a2; // char : 1
			constexpr auto bTickStatusComponent = 0x8a2; // char : 1
			constexpr auto bIsPlayingLowHealthAnim = 0x8a2; // char : 1
			constexpr auto bAllowCharacterPainting = 0x8a2; // char : 1
			constexpr auto bUseBPNotifyBumpedByPawn = 0x8a3; // char : 1
			constexpr auto bUseBPNotifyBumpedPawn = 0x8a3; // char : 1
			constexpr auto bUseBPAdjustDamage = 0x8a3; // char : 1
			constexpr auto bUseBPTimerServer = 0x8a4; // char : 1
			constexpr auto bUseBPTimerNonDedicated = 0x8a4; // char : 1
			constexpr auto bTriggerBPStasis = 0x8a4; // char : 1
			constexpr auto bUseBPSetCharacterMeshseMaterialScalarParamValue = 0x8a4; // char : 1
			constexpr auto BPTimerServerMin = 0x8a8; // float
			constexpr auto BPTimerServerMax = 0x8ac; // float
			constexpr auto BPTimerNonDedicatedMin = 0x8b0; // float
			constexpr auto BPTimerNonDedicatedMax = 0x8b4; // float
			constexpr auto NextBPTimerServer = 0x8b8; // double
			constexpr auto NextBPTimerNonDedicated = 0x8c0; // double
			constexpr auto bIsMounted = 0x8c8; // char : 1
			constexpr auto bPreventTargetingByTurrets = 0x8c8; // char : 1
			constexpr auto bDelayFootstepsUnderMinInterval = 0x8c8; // char : 1
			constexpr auto bSleepingDisableIK = 0x8c8; // char : 1
			constexpr auto bRagdollRetainAnimations = 0x8c8; // char : 1
			constexpr auto bUseBPAddedAttachments = 0x8c8; // char : 1
			constexpr auto bCanPlayLandingAnim = 0x8c8; // char : 1
			constexpr auto bOnlyHasRunningAnimationWhenWalking = 0x8c8; // char : 1
			constexpr auto bPreventAllBuffs = 0x8c9; // char : 1
			constexpr auto LastIsInsideVaccumSealedCube = 0x8c9; // char : 1
			constexpr auto bPreventTargetingAndMovement = 0x8c9; // char : 1
			constexpr auto bForcePreventAllInput = 0x8c9; // char : 1
			constexpr auto bPreventMovement = 0x8c9; // char : 1
			constexpr auto bBPPreventInputType = 0x8c9; // char : 1
			constexpr auto bUseBPPostLoadedFromSaveGame = 0x8ca; // char : 1
			constexpr auto bUseHeavyCombatMusic = 0x8ca; // char : 1
			constexpr auto bBPModifyAllowedViewHitDir = 0x8ca; // char : 1
			constexpr auto bUseBPPreSerializeSaveGame = 0x8ca; // char : 1
			constexpr auto bDestroyOnStasis = 0x8ca; // char : 1
			constexpr auto bUseBPPreventStasis = 0x8ca; // char : 1
			constexpr auto bPreventJump = 0x8ca; // char : 1
			constexpr auto bBPLimitPlayerRotation = 0x8cb; // char : 1
			constexpr auto bBPManagedFPVViewLocation = 0x8cb; // char : 1
			constexpr auto bBPCameraRotationFinal = 0x8cb; // char : 1
			constexpr auto bServerBPNotifyInventoryItemChangesUseQuantity = 0x8cb; // char : 1
			constexpr auto bServerBPNotifyInventoryItemChanges = 0x8cb; // char : 1
			constexpr auto LastCausedDamageTime = 0x8d0; // double
			constexpr auto bUseBPOnLethalDamage = 0x8d8; // char : 1
			constexpr auto bUseBPAdjustTorpidityDamage = 0x8d8; // char : 1
			constexpr auto bUseBPForceCameraStyle = 0x8d8; // char : 1
			constexpr auto bIsAttachedOtherCharacter = 0x8d8; // char : 1
			constexpr auto bUseBPGrabDebugSnapshot = 0x8d8; // char : 1
			constexpr auto bUseBPOnStaminaDrained = 0x8d8; // char : 1
			constexpr auto bIsAtMaxInventoryItems = 0x8d8; // char : 1
			constexpr auto bUseBPRemovedAsPassenger = 0x8d9; // char : 1
			constexpr auto bDisableFPV = 0x8d9; // char : 1
			constexpr auto bConsumeZoomInput = 0x8d9; // char : 1
			constexpr auto ImmobilizationTrapsToIgnore = 0x8e0; // TArray<APrimalStructure*>
			constexpr auto CarryingDino = 0x8f8; // TWeakObjectPtr<APrimalDinoCharacter>
			constexpr auto DediOverrideCapsuleCollisionProfileName = 0x900; // FName
			constexpr auto DediOverrideMeshCollisionProfileName = 0x908; // FName
			constexpr auto SnaredFromSocket = 0x910; // FName
			constexpr auto DeathDestructionDepositInventoryClass = 0x918; // APrimalStructureItemContainer*
			constexpr auto DamageNotifyTeamAggroMultiplier = 0x920; // float
			constexpr auto DamageNotifyTeamAggroRange = 0x924; // float
			constexpr auto DamageNotifyTeamAggroRangeFalloff = 0x928; // float
			constexpr auto ReplicatedCurrentHealth = 0x92c; // float
			constexpr auto ReplicatedMaxHealth = 0x930; // float
			constexpr auto ReplicatedCurrentTorpor = 0x934; // float
			constexpr auto ReplicatedMaxTorpor = 0x938; // float
			constexpr auto LastGrapHookPullingMe = 0x940; // APrimalProjectileGrapplingHook*
			constexpr auto bInRagdoll = 0x948; // char : 1
			constexpr auto bIsNPC = 0x948; // char : 1
			constexpr auto bAllowDamageWhenMounted = 0x949; // char : 1
			constexpr auto bUseBPAdjustMoveRight = 0x949; // char : 1
			constexpr auto bUseBPGetGravity = 0x949; // char : 1
			constexpr auto bIsDraggedWithOffset = 0x949; // char : 1
			constexpr auto bUseBPAdjustMoveForward = 0x949; // char : 1
			constexpr auto bPreventRunningWhileWalking = 0x949; // char : 1
			constexpr auto bIsDraggingWithOffset = 0x949; // char : 1
			constexpr auto bCanLandOnWater = 0x949; // char : 1
			constexpr auto bUseBP_OnSetRunningEvent = 0x94a; // char : 1
			constexpr auto bUseBPOverrideFlyingVelocity = 0x94a; // char : 1
			constexpr auto bForceTurretFastTargeting = 0x94a; // char : 1
			constexpr auto bFlyingOrWaterDinoPreventBackwardsRun = 0x94a; // char : 1
			constexpr auto bUseBPOverrideCharacterNewFallVelocity = 0x94a; // char : 1
			constexpr auto bUseBPOnAnimPlayedNotify = 0x94a; // char : 1
			constexpr auto bUseBPOnMovementModeChangedNotify = 0x94a; // char : 1
			constexpr auto bUseBPOnAttachmentReplication = 0x94a; // char : 1
			constexpr auto bSleepingDisableRagdoll = 0x94b; // char : 1
			constexpr auto bDestroyOnStasisWhenDead = 0x94b; // char : 1
			constexpr auto bPreventLiveBlinking = 0x94b; // char : 1
			constexpr auto bForceAlwaysUpdateMeshAndCollision = 0x94b; // char : 1
			constexpr auto bUseBPGetHUDElements = 0x94c; // char : 1
			constexpr auto bPreventHurtAnim = 0x94c; // char : 1
			constexpr auto LastGrapHookPullingOwner = 0x950; // AShooterCharacter*
			constexpr auto bUseBP_ForceAllowBuffClasses = 0x958; // char : 1
			constexpr auto bEnableMoveCollapsing = 0x958; // char : 1
			constexpr auto bUseBPOnLanded = 0x958; // char : 1
			constexpr auto bUseBPCanBeBaseForCharacter = 0x958; // char : 1
			constexpr auto bUseBPCanBaseOnCharacter = 0x958; // char : 1
			constexpr auto DragOffset = 0x95c; // FVector
			constexpr auto bUseBPCheckJumpInput = 0x968; // char : 1
			constexpr auto bUseBPOverrideHurtAnim = 0x968; // char : 1
			constexpr auto bUseBPOverrideDamageCauserHitMarker = 0x968; // char : 1
			constexpr auto bIsSkinned = 0x968; // char : 1
			constexpr auto bUseBPAdjustImpulseFromDamage = 0x968; // char : 1
			constexpr auto bUseBPAdjustCharacterMovementImpulse = 0x968; // char : 1
			constexpr auto bUseBPModifyFOVInterpSpeed = 0x968; // char : 1
			constexpr auto bVerifyBasingForSaddleStructures = 0x968; // char : 1
			constexpr auto bPreventPerPixelPainting = 0x969; // char : 1
			constexpr auto bUseBPItemSlotOverrides = 0x969; // char : 1
			constexpr auto bUseBP_OverrideTerminalVelocity = 0x969; // char : 1
			constexpr auto bUseBPAllowPlayMontage = 0x969; // char : 1
			constexpr auto bUseBP_ShouldForceDisableTPVCameraInterpolation = 0x969; // char : 1
			constexpr auto LastIkUpdateTime = 0x978; // double
			constexpr auto DraggedBoneIndex = 0x9a4; // int32_t
			constexpr auto customBitFlags = 0x9a8; // int32_t
			constexpr auto RunningSpeedModifier = 0x9ac; // float
			constexpr auto DeathAnim = 0x9c0; // UAnimMontage*
			constexpr auto DeathSound = 0x9c8; // USoundCue*
			constexpr auto RunLoopSound = 0x9d0; // USoundCue*
			constexpr auto RunStopSound = 0x9d8; // USoundCue*
			constexpr auto FootStepSoundsPhysMat = 0x9e0; // TArray<USoundCue*>
			constexpr auto LandedSoundsPhysMat = 0x9f0; // TArray<USoundCue*>
			constexpr auto MeshRootSocketName = 0xa00; // FName
			constexpr auto MaxFallSpeed = 0xa10; // float
			constexpr auto FallDamageMultiplier = 0xa14; // float
			constexpr auto RunLoopAC = 0xa18; // UAudioComponent*
			constexpr auto DraggingConstraint = 0xa20; // FConstraintInstance
			constexpr auto CurrentTransponder = 0xb88; // APrimalStructureExplosiveTransGPS*
			constexpr auto ServerTargetCarriedYaw = 0xb94; // float
			constexpr auto NetDynamicMusicSound = 0xb98; // USoundBase*
			constexpr auto MountedDino = 0xba0; // TWeakObjectPtr<APrimalDinoCharacter>
			constexpr auto MountedDinoTime = 0xba8; // float
			constexpr auto LastBasedMovementActorRef = 0xbd8; // TWeakObjectPtr<AActor>
			constexpr auto GrabWeightThreshold = 0xbe0; // float
			constexpr auto DragWeight = 0xbe4; // float
			constexpr auto DescriptiveName = 0xbe8; // FString
			constexpr auto ReplicatedRagdollPositions = 0xbf8; // TArray<FVector_NetQuantize>
			constexpr auto ReplicatedRagdollRotations = 0xc08; // TArray<FRotator_NetQuantize>
			constexpr auto KillXPBase = 0xc68; // float
			constexpr auto RagdollReplicationInterval = 0xc80; // float
			constexpr auto BoneDamageAdjusters = 0xc88; // TArray<FBoneDamageAdjuster>
			constexpr auto ClientRotationInterpSpeed = 0xc98; // float
			constexpr auto ClientLocationInterpSpeed = 0xc9c; // float
			constexpr auto MaxDragMovementSpeed = 0xca0; // float
			constexpr auto CurrentAimRot = 0xca4; // FRotator
			constexpr auto CurrentRootLoc = 0xcb0; // FVector
			constexpr auto MyCharacterStatusComponent = 0xcd0; // UPrimalCharacterStatusComponent*
			constexpr auto MyInventoryComponent = 0xce0; // UPrimalInventoryComponent*
			constexpr auto SyncedMontage = 0xce8; // UAnimMontage*
			constexpr auto MontageSyncInterval = 0xcfc; // float
			constexpr auto LastRunningTime = 0xd00; // double
			constexpr auto TPVCameraOffset = 0xd08; // FVector
			constexpr auto TPVCameraOffsetMultiplier = 0xd14; // FVector
			constexpr auto TPVCameraOrgOffset = 0xd20; // FVector
			constexpr auto LandedSoundMaxRange = 0xd2c; // float
			constexpr auto FallingDamageHealthScaleBase = 0xd30; // float
			constexpr auto FootstepsMaxRange = 0xd34; // float
			constexpr auto MinTimeBetweenFootsteps = 0xd38; // float
			constexpr auto MinTimeBetweenFootstepsRunning = 0xd48; // float
			constexpr auto AnimationsPreventInput = 0xd50; // TArray<UAnimMontage*>
			constexpr auto DeathHarvestingComponent = 0xd60; // UPrimalHarvestingComponent*
			constexpr auto MyDeathHarvestingComponent = 0xd68; // UPrimalHarvestingComponent*
			constexpr auto PreDragComponentUpdateFlag = 0xdb0; // EMeshComponentUpdateFlag
			constexpr auto TargetableDamageFXDefaultPhysMaterial = 0xdb1; // EShooterPhysMaterialType
			constexpr auto PoopAnimation = 0xdb8; // UAnimMontage*
			constexpr auto CorpseDestructionTime = 0xdc0; // double
			constexpr auto CorpseLifespan = 0xdc8; // float
			constexpr auto TPVStructurePlacingHeightMultiplier = 0xdcc; // float
			constexpr auto CorpseFadeAwayTime = 0xdd0; // float
			constexpr auto RagdollDeathImpulseScaler = 0xdd4; // float
			constexpr auto PoopSound = 0xdd8; // USoundCue*
			constexpr auto BaseTargetingDesirability = 0xde0; // float
			constexpr auto DeadBaseTargetingDesirability = 0xde4; // float
			constexpr auto OrbitCamZoomStepSize = 0xdf8; // float
			constexpr auto OrbitCamMinZoomLevel = 0xdfc; // float
			constexpr auto OrbitCamMaxZoomLevel = 0xe00; // float
			constexpr auto MaxCursorHUDDistance = 0xe30; // float
			constexpr auto AddForwardVelocityOnJump = 0xe34; // float
			constexpr auto DeathActorTargetingOffset = 0xe38; // FVector
			constexpr auto SocketOverrideTargetingLocation = 0xe44; // FName
			constexpr auto LastTimeSubmerged = 0xe70; // double
			constexpr auto FootPhysicalSurfaceCheckInterval = 0xe88; // float
			constexpr auto LastAttackedNearbyPlayer = 0xe98; // TWeakObjectPtr<APrimalCharacter>
			constexpr auto LastAttackedNearbyPlayerTime = 0xea0; // float
			constexpr auto RagdollImpactDamageVelocityScale = 0xebc; // float
			constexpr auto RagdollImpactDamageMinDecelerationSpeed = 0xec0; // float
			constexpr auto StartFallingImpactRagdollTimeInterval = 0xec4; // float
			constexpr auto EnteredSwimmingSound = 0xef8; // USoundCue*
			constexpr auto EnteredSleepingSound = 0xf00; // USoundCue*
			constexpr auto LeftSleepingSound = 0xf08; // USoundCue*
			constexpr auto CorpseDraggedDecayRate = 0xf40; // float
			constexpr auto PoopAltItemChance = 0xf44; // float
			constexpr auto PoopAltItemClass = 0xf48; // UPrimalItem*
			constexpr auto DefaultBuffs = 0xf50; // TArray<APrimalBuff*>
			constexpr auto PoopIcon = 0xf60; // UTexture2D*
			constexpr auto RunningMaxDesiredRotDelta = 0xf68; // float
			constexpr auto CorpseDestructionTimer = 0xf70; // double
			constexpr auto LastSkinnedTime = 0xf78; // double
			constexpr auto OnDied = 0xf88; // FScriptMulticastDelegate
			constexpr auto OnNotifyDamage = 0xf98; // FScriptMulticastDelegate
			constexpr auto OnSleepStateChanged = 0xfa8; // FScriptMulticastDelegate
			constexpr auto NotifyLevelUp = 0xfb8; // FScriptMulticastDelegate
			constexpr auto NotifyUnstasis = 0xfc8; // FScriptMulticastDelegate
			constexpr auto NotifyStasis = 0xfd8; // FScriptMulticastDelegate
			constexpr auto LastTimeInSwimming = 0xff8; // double
			constexpr auto DefaultNoItemTextureParamOverrides = 0x1008; // TArray<FDefaultTextureParamOverride>
			constexpr auto PaintingComponent = 0x1028; // UStructurePaintingComponent*
			constexpr auto ExtraMaxSpeedModifier = 0x1030; // float
			constexpr auto ExtraRotationRateModifier = 0x1034; // float
			constexpr auto TamedDinoCallOutRange = 0x1038; // float
			constexpr auto TargetPathfindingLocationOffset = 0x1048; // FVector
			constexpr auto LastTookDamageTime = 0x1058; // double
			constexpr auto ExtraReceiveDamageMultiplier = 0x1060; // float
			constexpr auto ExtraMeleeDamageMultiplier = 0x1064; // float
			constexpr auto DamageTheMeleeDamageCauserPercent = 0x1080; // float
			constexpr auto DurabilityDegrateTheMeleeDamageCauserPercent = 0x1084; // float
			constexpr auto DamageTheMeleeDamageCauserDamageType = 0x1088; // UDamageType*
			constexpr auto TribeGroupInventoryRank = 0x1090; // char
			constexpr auto CharacterDamageImpulseMultiplier = 0x1094; // float
			constexpr auto MaxRagdollDeathVelocityImpulse = 0x10b0; // float
			constexpr auto ClientRotationInterpSpeedMultiplierGround = 0x10b4; // float
			constexpr auto GlideGravityScaleMultiplier = 0x10b8; // float
			constexpr auto GlideMaxCarriedWeight = 0x10bc; // float
			constexpr auto ScaleDeathHarvestHealthyByMaxHealthBase = 0x10c8; // float
			constexpr auto NotifyInputEvent = 0x10d0; // FScriptMulticastDelegate
			constexpr auto RunMinVelocityRotDot = 0x10f0; // float
			constexpr auto LastHitDamageTime = 0x10f8; // double
			constexpr auto bShouldBeInGodMode = 0x1100; // char
			constexpr auto MeshingTickCounterMultiplier = 0x1108; // int32_t
			constexpr auto PreventBuffClasses = 0x1110; // TArray<APrimalBuff*>
			constexpr auto PreventBuffClassesWithTag = 0x1120; // TArray<FName>
			constexpr auto bInterpHealthDamageMaterialOverlayAlpha = 0x1130; // char : 1
			constexpr auto bAllowCorpseDestructionWithPreventSaving = 0x1130; // char : 1
			constexpr auto bSuppressPlayerKillNotification = 0x1130; // char : 1
			constexpr auto bUseBlueprintAnimNotifyCustomState = 0x1130; // char : 1
			constexpr auto bIgnoreCorpseDecompositionMultipliers = 0x1130; // char : 1
			constexpr auto bUseBPOnMassTeleportEvent = 0x1130; // char : 1
			constexpr auto bIgnoreLowGravityDisorientation = 0x1130; // char : 1
			constexpr auto bPreventIKWhenNotWalking = 0x1130; // char : 1
			constexpr auto bAllowMultiUseByRemoteDino = 0x1131; // char : 1
			constexpr auto bUseBPPreventNotifySound = 0x1131; // char : 1
			constexpr auto bUseBPOverrideJumpZModifier = 0x1131; // char : 1
			constexpr auto bUseZeroGravityWander = 0x1131; // char : 1
			constexpr auto bJumpOnRelease = 0x1131; // char : 1
			constexpr auto bAllowBPNewDoorInteractionDrawHUD = 0x1131; // char : 1
			constexpr auto bUseGetOverrideSocket = 0x1131; // char : 1
			constexpr auto bPreventInventoryAccess = 0x1131; // char : 1
			constexpr auto bUseBP_ModifyInputAcceleration = 0x1132; // char : 1
			constexpr auto bUseBP_ModifySavedMoveAcceleration_PreRep = 0x1132; // char : 1
			constexpr auto bUseBP_ModifySavedMoveAcceleration_PostRep = 0x1132; // char : 1
			constexpr auto bForceSimpleTeleportFade = 0x1132; // char : 1
			constexpr auto bUseBPGetArmorDurabilityDecreaseMultiplier = 0x1132; // char : 1
			constexpr auto ControlledInventoryAccessDistanceOffset = 0x1134; // float
			constexpr auto OnOrbitCameraViewChange = 0x1138; // FScriptMulticastDelegate
			constexpr auto AdditionalMaxUseDistance = 0x1148; // float
		}

		// Inheritance: APrimalCharacter > ACharacter > APawn > AActor > UObject
		namespace APrimalDinoCharacter
		{
			constexpr auto ForcedMasterTarget = 0x1184; // TWeakObjectPtr<AActor>
			constexpr auto MountCharacterSocketName = 0x118c; // FName
			constexpr auto MountCharacter = 0x1194; // TWeakObjectPtr<APrimalCharacter>
			constexpr auto RidingAttackExtraVelocity = 0x11a0; // FVector
			constexpr auto StartChargeAnimation = 0x11b0; // UAnimMontage*
			constexpr auto AttackAnimations = 0x11b8; // TArray<UAnimMontage*>
			constexpr auto AttackAnimationWeights = 0x11c8; // TArray<float>
			constexpr auto AttackAnimationsTimeFromEndToConsiderFinished = 0x11d8; // TArray<float>
			constexpr auto bPreventDinoResetAffinityOnUnsleep = 0x11e8; // char : 1
			constexpr auto bHadLinkedSupplyCrate = 0x11e8; // char : 1
			constexpr auto bKeepInventoryForWakingTame = 0x11e8; // char : 1
			constexpr auto bUseBPKilledSomethingEvent = 0x11e8; // char : 1
			constexpr auto bTamedWanderHarvestAllowUsableHarvestingAsWell = 0x11e8; // char : 1
			constexpr auto bLocationBasedAttack = 0x11e8; // char : 1
			constexpr auto bAttackStopsMovement = 0x11e8; // char : 1
			constexpr auto bHiddenForLocalPassenger = 0x11e9; // char : 1
			constexpr auto bRunCheckCarriedTrace = 0x11e9; // char : 1
			constexpr auto CanElevate = 0x11e9; // char : 1
			constexpr auto bTamedWanderCorpseHarvesting = 0x11ea; // char : 1
			constexpr auto bUseBPNotifyStructurePlacedNearby = 0x11ea; // char : 1
			constexpr auto bUseBPCanTargetCorpse = 0x11ea; // char : 1
			constexpr auto bUseBPShouldForceFlee = 0x11ea; // char : 1
			constexpr auto bForceWanderOverrideNPCZoneManager = 0x11ea; // char : 1
			constexpr auto bDeprecateDino = 0x11ea; // char : 1
			constexpr auto bForceFoodItemAutoConsume = 0x11ea; // char : 1
			constexpr auto bWakingTameConsumeEntireStack = 0x11eb; // char : 1
			constexpr auto bForcePreventExitingWater = 0x11eb; // char : 1
			constexpr auto bForceUseDediAttackTiming = 0x11eb; // char : 1
			constexpr auto bFlyerAllowFlyingWithExplosive = 0x11eb; // char : 1
			constexpr auto ColorizationIntensity = 0x11ec; // float
			constexpr auto bAllowCarryCharacterWithoutRider = 0x11f0; // char : 1
			constexpr auto bWildDinoPreventWeight = 0x11f0; // char : 1
			constexpr auto bDebugMeleeAttacks = 0x11f0; // char : 1
			constexpr auto bRetainCarriedCharacterOnDismount = 0x11f0; // char : 1
			constexpr auto bUseBPOnTamedProcessOrder = 0x11f0; // char : 1
			constexpr auto bUseBP_OnTamedOrderReceived = 0x11f0; // char : 1
			constexpr auto bAllowAttackWithCryoSickness = 0x11f0; // char : 1
			constexpr auto bUseBPCanCryo = 0x11f0; // char : 1
			constexpr auto bConsoleIgnoreSafeZonesForCrosshair = 0x11f1; // char : 1
			constexpr auto bUseBPSetInitialAimOffsetTargets = 0x11f1; // char : 1
			constexpr auto bUseBPSetSimulatedInterpRollOverride = 0x11f1; // char : 1
			constexpr auto bUseBPBecameNewBaby = 0x11f1; // char : 1
			constexpr auto bTryAlwaysApplyCryoSickness = 0x11f1; // char : 1
			constexpr auto bForceUseAltAimSocketsForTurrets = 0x11f1; // char : 1
			constexpr auto bUseBPClampMaxHarvestHealth = 0x11f1; // char : 1
			constexpr auto bWildPreventTeleporting = 0x11f1; // char : 1
			constexpr auto bForceDrawCrosshairWhenHUDIsHidden = 0x11f2; // char : 1
			constexpr auto FemaleMaterialOverrides = 0x11f8; // TArray<UMaterialInterface*>
			constexpr auto bUseBPCheckCanSpawnFromLocation = 0x1208; // char : 1
			constexpr auto PaintConsumptionMultiplier = 0x120c; // float
			constexpr auto ChargingBlockedStopTimeThreshold = 0x1210; // float
			constexpr auto MeleeSwingSockets = 0x1218; // TArray<FName>
			constexpr auto MeleeDamageAmount = 0x1228; // int32_t
			constexpr auto MeleeDamageImpulse = 0x122c; // float
			constexpr auto MeleeSwingRadius = 0x1230; // float
			constexpr auto AttackInfos = 0x1238; // TArray<FDinoAttackInfo>
			constexpr auto CurrentAttackIndex = 0x1248; // char
			constexpr auto LastAttackIndex = 0x1249; // char
			constexpr auto MeleeDamageType = 0x1250; // UDamageType*
			constexpr auto StepActorDamageTypeOverride = 0x1258; // UDamageType*
			constexpr auto AttackOffset = 0x1260; // float
			constexpr auto FleeHealthPercentage = 0x1264; // float
			constexpr auto BreakFleeHealthPercentage = 0x1268; // float
			constexpr auto TamerString = 0x1270; // FString
			constexpr auto TamedName = 0x1280; // FString
			constexpr auto HibernatedZoneVolumes = 0x1290; // TArray<FHibernationZoneInfo>
			constexpr auto OverlayTooltipPadding = 0x12a0; // FVector2D
			constexpr auto OverlayTooltipScale = 0x12a8; // FVector2D
			constexpr auto HUDOverlayToolTipWidget = 0x12b0; // UPrimalDinoToolTipWidget*
			constexpr auto MyDinoEntry = 0x12b8; // UPrimalDinoEntry*
			constexpr auto RiderFPVCameraOffset = 0x12c0; // FVector
			constexpr auto FinalNPCLevelMultiplier = 0x12f0; // float
			constexpr auto LandingTraceMaxDistance = 0x12f4; // float
			constexpr auto FlyingWanderFixedDistanceAmount = 0x12f8; // float
			constexpr auto FlyingWanderRandomDistanceAmount = 0x12fc; // float
			constexpr auto AcceptableLandingRadius = 0x1300; // float
			constexpr auto MaxLandingTime = 0x1304; // float
			constexpr auto GenderSpeedMultipliers0x2 = 0x1308; // float
			constexpr auto ChargeSpeedMultiplier = 0x1310; // float
			constexpr auto ChargingAnim = 0x1318; // UAnimMontage*
			constexpr auto ChargingStaminaPerSecondDrain = 0x1320; // float
			constexpr auto ChargingStopDotTreshold = 0x1324; // float
			constexpr auto Rider = 0x1340; // TWeakObjectPtr<AShooterCharacter>
			constexpr auto PreviousRider = 0x1348; // TWeakObjectPtr<AShooterCharacter>
			constexpr auto SaddleItemClass = 0x1350; // UPrimalItem*
			constexpr auto SaddleSlotNameOverride = 0x1358; // FString
			constexpr auto NoSaddlePassengerSeats = 0x1368; // TArray<FSaddlePassengerSeatDefinition>
			constexpr auto CarriedCharacter = 0x1378; // TWeakObjectPtr<APrimalCharacter>
			constexpr auto DinoWithPassengerAnim = 0x1388; // UAnimMontage*
			constexpr auto DinoWithDinoPassengerAnim = 0x1390; // UAnimMontage*
			constexpr auto PassengerPerSeat = 0x1398; // TArray<TWeakObjectPtr<APrimalCharacter>>
			constexpr auto SavedPassengerPerSeat = 0x13a8; // TArray<APrimalCharacter*>
			constexpr auto LastClientCameraRotationServerUpdate = 0x13c8; // double
			constexpr auto OverrideTargetComponents = 0x13d0; // TArray<USceneComponent*>
			constexpr auto WhistleTraceOffset = 0x13e0; // float
			constexpr auto LastPlayedAttackAnimation = 0x13f4; // int32_t
			constexpr auto AttackIndexOfPlayedAnimation = 0x13f8; // char
			constexpr auto DinoBaseLevelWeightEntries = 0x1400; // TArray<FDinoBaseLevelWeightEntry>
			constexpr auto RidingFirstPersonViewLocationOffset = 0x1480; // FVector
			constexpr auto bIsLanding = 0x148c; // char : 1
			constexpr auto bCanCharge = 0x148c; // char : 1
			constexpr auto bCancelInterpolation = 0x148c; // char : 1
			constexpr auto bIsCharging = 0x148c; // char : 1
			constexpr auto bChargeDamageStructures = 0x148c; // char : 1
			constexpr auto bReplicatePitchWhileSwimming = 0x148c; // char : 1
			constexpr auto bIsFlying = 0x148c; // char : 1
			constexpr auto bIsWakingTame = 0x148c; // char : 1
			constexpr auto bAllowCarryFlyerDinos = 0x148d; // char : 1
			constexpr auto bFlyerForceLimitPitch = 0x148d; // char : 1
			constexpr auto bFlyerForceNoPitch = 0x148d; // char : 1
			constexpr auto bRiderJumpTogglesFlight = 0x148d; // char : 1
			constexpr auto bHasRider = 0x148d; // char : 1
			constexpr auto bForceAutoTame = 0x148d; // char : 1
			constexpr auto bAllowRiding = 0x148d; // char : 1
			constexpr auto bPreventStasis = 0x148e; // char : 1
			constexpr auto bAutoTameable = 0x148e; // char : 1
			constexpr auto bAlwaysSetTamingTeamOnItemAdd = 0x148e; // char : 1
			constexpr auto bCheatForceTameRide = 0x148e; // char : 1
			constexpr auto bIsFemale = 0x148e; // char : 1
			constexpr auto bRiderUseDirectionalAttackIndex = 0x148e; // char : 1
			constexpr auto bCanBeTamed = 0x148e; // char : 1
			constexpr auto bCanOpenLockedDoors = 0x148f; // char : 1
			constexpr auto bMeleeSwingDamageBlockedByStrutures = 0x148f; // char : 1
			constexpr auto bUseColorization = 0x148f; // char : 1
			constexpr auto bTargetingIgnoreWildDinos = 0x148f; // char : 1
			constexpr auto bAttackTargetWhenLaunched = 0x148f; // char : 1
			constexpr auto bIKIgnoreSaddleStructures = 0x148f; // char : 1
			constexpr auto bCanMountOnHumans = 0x148f; // char : 1
			constexpr auto bTargetingIgnoredByWildDinos = 0x148f; // char : 1
			constexpr auto BabyChanceOfTwins = 0x1490; // float
			constexpr auto bOverridePlatformStructureLimit = 0x1494; // char : 1
			constexpr auto bPlatformSaddleIgnoreRotDotCheck = 0x1494; // char : 1
			constexpr auto bMeleeAttackHarvetUsableComponents = 0x1494; // char : 1
			constexpr auto bUseInteprolatedVelocity = 0x1494; // char : 1
			constexpr auto bCanBeOrdered = 0x1494; // char : 1
			constexpr auto bAllowsFishingOnSaddle = 0x1494; // char : 1
			constexpr auto bRiderDontRequireSaddle = 0x1494; // char : 1
			constexpr auto bAllowTargetingCorpses = 0x1494; // char : 1
			constexpr auto bIsCarnivore = 0x1495; // char : 1
			constexpr auto bAllowRidingInWater = 0x1495; // char : 1
			constexpr auto bUsesGender = 0x1495; // char : 1
			constexpr auto bTargetEverything = 0x1495; // char : 1
			constexpr auto bTamedWanderHarvestNonUsableHarvesting = 0x1495; // char : 1
			constexpr auto bEnableTamedWandering = 0x1495; // char : 1
			constexpr auto bEnableTamedMating = 0x1495; // char : 1
			constexpr auto bCollectVictimItems = 0x1495; // char : 1
			constexpr auto bDoStepDamage = 0x1496; // char : 1
			constexpr auto bAnimIsMoving = 0x1496; // char : 1
			constexpr auto bTamingHasFood = 0x1496; // char : 1
			constexpr auto bDontWander = 0x1496; // char : 1
			constexpr auto bHasMateBoost = 0x1496; // char : 1
			constexpr auto bServerInitializedDino = 0x1496; // char : 1
			constexpr auto bPreventBasingWhenUntamed = 0x1497; // char : 1
			constexpr auto bForceAlwaysAllowBasing = 0x1497; // char : 1
			constexpr auto bChargingRequiresWalking = 0x1497; // char : 1
			constexpr auto bUseRootLocSwimOffset = 0x1497; // char : 1
			constexpr auto bDisplaySummonedNotification = 0x1497; // char : 1
			constexpr auto bDisplayKilledNotification = 0x1497; // char : 1
			constexpr auto bUseBPGetAttackWeight = 0x1497; // char : 1
			constexpr auto BabyGestationSpeed = 0x1498; // float
			constexpr auto bAllowAutoUnstasisDestroy = 0x149c; // char : 1
			constexpr auto bAlwaysUpdateAimOffsetInterpolation = 0x149c; // char : 1
			constexpr auto bDebugBaby = 0x149c; // char : 1
			constexpr auto bSupportWakingTame = 0x149c; // char : 1
			constexpr auto bAllowDeathAutoGrab = 0x149c; // char : 1
			constexpr auto bPreventAllRiderWeaponsOnReequip = 0x149c; // char : 1
			constexpr auto bPreventAllRiderWeapons = 0x149c; // char : 1
			constexpr auto bServerForceUpdateDinoGameplayMeshNearPlayer = 0x149c; // char : 1
			constexpr auto WildAmbientHarvestingAnimationServerTickPose = 0x149d; // char : 1
			constexpr auto bPreventSleepingTame = 0x149d; // char : 1
			constexpr auto bTamedWanderHarvest = 0x149d; // char : 1
			constexpr auto bSimulatedNetLandCheckFloor = 0x149d; // char : 1
			constexpr auto bRefreshedColorization = 0x149d; // char : 1
			constexpr auto bPreventFlyerCapsuleExpansion = 0x149e; // char : 1
			constexpr auto bIncludeCarryWeightOfBasedPawns = 0x149e; // char : 1
			constexpr auto bPreventFlyerFlyingRider = 0x149e; // char : 1
			constexpr auto bAllowFlyerLandedRider = 0x149e; // char : 1
			constexpr auto bFlyerPreventRiderAutoFly = 0x149e; // char : 1
			constexpr auto bForceRiderNetworkParent = 0x149f; // char : 1
			constexpr auto bForcePerfectTame = 0x149f; // char : 1
			constexpr auto bCanHaveBaby = 0x149f; // char : 1
			constexpr auto bUseBabyGestation = 0x149f; // char : 1
			constexpr auto bPreventUnalignedDinoBasing = 0x149f; // char : 1
			constexpr auto bOverrideLevelMusicIfTamed = 0x149f; // char : 1
			constexpr auto bReachedMaxStructures = 0x149f; // char : 1
			constexpr auto ExtraBabyGestationSpeedMultiplier = 0x14a0; // float
			constexpr auto bIsBaby = 0x14a4; // char : 1
			constexpr auto bIsRepairing = 0x14a4; // char : 1
			constexpr auto bFlyerDontAutoLandOnDismount = 0x14a4; // char : 1
			constexpr auto bCanBeRepaired = 0x14a4; // char : 1
			constexpr auto bSupportsSaddleStructures = 0x14a4; // char : 1
			constexpr auto bBonesHidden = 0x14a4; // char : 1
			constexpr auto bCanUnclaimTame = 0x14a5; // char : 1
			constexpr auto bAllowWildDinoEquipment = 0x14a5; // char : 1
			constexpr auto bUseTamedVisibleComponents = 0x14a5; // char : 1
			constexpr auto bAllowDemolish = 0x14a5; // char : 1
			constexpr auto bUseGang = 0x14a5; // char : 1
			constexpr auto bBlueprintDrawFloatingHUD = 0x14a5; // char : 1
			constexpr auto bEggBoosted = 0x14a5; // char : 1
			constexpr auto bUseBPTamedTick = 0x14a5; // char : 1
			constexpr auto bScaleInsulationByMeleeDamage = 0x14a6; // char : 1
			constexpr auto bUseWildRandomScale = 0x14a6; // char : 1
			constexpr auto bInventoryOnlyAllowCraftingWhenWandering = 0x14a6; // char : 1
			constexpr auto bSupportsPassengerSeats = 0x14a6; // char : 1
			constexpr auto bUseSaddlePassengerSeatsWhenAvailable = 0x14a6; // char : 1
			constexpr auto bAddPassengerSeatMultiUseEntries = 0x14a6; // char : 1
			constexpr auto bUseBPPlayDying = 0x14a6; // char : 1
			constexpr auto bUseBPOverrideWantsToRun = 0x14a6; // char : 1
			constexpr auto bHeldJumpSlowFalling = 0x14a7; // char : 1
			constexpr auto bIsHeldJumpSlowFalling = 0x14a7; // char : 1
			constexpr auto bTriggerBPUnstasis = 0x14a7; // char : 1
			constexpr auto bWildProduceEggDynamically = 0x14a7; // char : 1
			constexpr auto bPreventWakingTameFeeding = 0x14a7; // char : 1
			constexpr auto bForceDisablingTaming = 0x14a7; // char : 1
			constexpr auto AutoFadeOutAfterTameTime = 0x14a8; // float
			constexpr auto bUseBPGetCrosshairLocation = 0x14ac; // char : 1
			constexpr auto bClampOffscreenFloatingHUDWidgets = 0x14ac; // char : 1
			constexpr auto bOverrideCrosshairSpread = 0x14ac; // char : 1
			constexpr auto bCenterOffscreenFloatingHUDWidgets = 0x14ac; // char : 1
			constexpr auto bOverrideCrosshairColor = 0x14ac; // char : 1
			constexpr auto bFlyerAllowRidingInCaves = 0x14ac; // char : 1
			constexpr auto bOverrideCrosshairAlpha = 0x14ac; // char : 1
			constexpr auto bScaleExtraRunningSpeedModifier = 0x14ac; // char : 1
			constexpr auto bUseFixedSpawnLevel = 0x14ad; // char : 1
			constexpr auto bTreatCrouchInputAsAttack = 0x14ad; // char : 1
			constexpr auto bUseBPGetRiderUnboardLocation = 0x14ad; // char : 1
			constexpr auto bUseBPGetRiderUnboardDirection = 0x14ad; // char : 1
			constexpr auto bUniqueDino = 0x14ad; // char : 1
			constexpr auto bModifyBasedCamera = 0x14ad; // char : 1
			constexpr auto bUseBPOnRefreshColorization = 0x14ad; // char : 1
			constexpr auto bHideAncestorsButton = 0x14ad; // char : 1
			constexpr auto bUseBPGetRiderSocket = 0x14ae; // char : 1
			constexpr auto bIsNursing = 0x14ae; // char : 1
			constexpr auto bIsNursingDino = 0x14ae; // char : 1
			constexpr auto bUseBPCanMountOnCharacter = 0x14ae; // char : 1
			constexpr auto bUseBPOverrideTamingDescriptionLabel = 0x14ae; // char : 1
			constexpr auto bUseBPDisplayTamedMessage = 0x14ae; // char : 1
			constexpr auto bUseBPDinoTooltipCustomProgressBar = 0x14ae; // char : 1
			constexpr auto bUseBP_OverrideDinoName = 0x14ae; // char : 1
			constexpr auto bUseBPShowTamingPanel = 0x14af; // char : 1
			constexpr auto bFlyerPrioritizeAllyMountToCarry = 0x14af; // char : 1
			constexpr auto bUseBPOverrideMutationLabels = 0x14af; // char : 1
			constexpr auto bPreventMovementModeChangeForDinoPassengers = 0x14af; // char : 1
			constexpr auto bPreventRiderImmobilization = 0x14af; // char : 1
			constexpr auto BasedCameraSpeedMultiplier = 0x14b0; // float
			constexpr auto LastEggBoostedTime = 0x14b8; // double
			constexpr auto WildPercentageChanceOfBaby = 0x14c0; // float
			constexpr auto WildBabyAgeWeight = 0x14c4; // float
			constexpr auto BabyGestationProgress = 0x14c8; // float
			constexpr auto FlyerForceLimitPitchMin = 0x14cc; // float
			constexpr auto FlyerForceLimitPitchMax = 0x14d0; // float
			constexpr auto BabyChanceOfTriplets = 0x14dc; // float
			constexpr auto BabyAge = 0x14e0; // float
			constexpr auto MaxPercentOfCapsulHeightAllowedForIK = 0x14e4; // float
			constexpr auto SlopeBiasForMaxCapsulePercent = 0x14e8; // float
			constexpr auto FlyingForceRotationRateModifier = 0x14ec; // float
			constexpr auto HideBoneNames = 0x14f0; // TArray<FName>
			constexpr auto HideBonesString = 0x1500; // FString
			constexpr auto WaterSurfaceExtraJumpVector = 0x1510; // FVector
			constexpr auto FlyerTakeOffAdditionalVelocity = 0x151c; // FVector
			constexpr auto OpenDoorDelay = 0x1528; // float
			constexpr auto TamedWanderHarvestInterval = 0x152c; // float
			constexpr auto TamedWanderHarvestSearchRange = 0x1530; // float
			constexpr auto TamedWanderHarvestCollectRadius = 0x1534; // float
			constexpr auto TamedWanderHarvestCollectOffset = 0x1538; // FVector
			constexpr auto RootLocSwimOffset = 0x1544; // float
			constexpr auto PlayAnimBelowHealthPercent = 0x1548; // float
			constexpr auto LeavePlayAnimBelowHealthPercent = 0x154c; // float
			constexpr auto PlatformSaddleMaxStructureBuildDistance2D = 0x1550; // float
			constexpr auto PlayAnimBelowHealth = 0x1558; // UAnimMontage*
			constexpr auto LowHealthExitSound = 0x1560; // USoundBase*
			constexpr auto LowHealthEnterSound = 0x1568; // USoundBase*
			constexpr auto LowHealthDinoSettings = 0x1570; // UPrimalDinoSettings*
			constexpr auto SwimOffsetInterpSpeed = 0x1578; // float
			constexpr auto AIRangeMultiplier = 0x1580; // float
			constexpr auto PreventColorizationRegions0x6 = 0x1584; // char
			constexpr auto AllowPaintingColorRegions0x6 = 0x158a; // char
			constexpr auto ColorSetIndices0x6 = 0x1590; // char
			constexpr auto ColorSetNames0x6 = 0x1598; // FName
			constexpr auto ColorSetIntensityMultipliers0x6 = 0x15c8; // float
			constexpr auto ColorOverrideBuff = 0x15e0; // TWeakObjectPtr<APrimalBuff>
			constexpr auto MeleeAttackStaminaCost = 0x15f4; // float
			constexpr auto WakingTameAnimation = 0x15f8; // UAnimMontage*
			constexpr auto Target = 0x1600; // TWeakObjectPtr<AActor>
			constexpr auto TamedFollowTarget = 0x1608; // TWeakObjectPtr<AActor>
			constexpr auto TamedLandTarget = 0x1610; // TWeakObjectPtr<AActor>
			constexpr auto PercentChanceFemale = 0x1618; // float
			constexpr auto DeathGiveItemClasses = 0x1620; // TArray<UPrimalItem*>
			constexpr auto DeathGiveItemChanceToBeBlueprint = 0x1630; // TArray<float>
			constexpr auto DeathGiveItemQualityMin = 0x1640; // float
			constexpr auto DeathGiveItemQualityMax = 0x1644; // float
			constexpr auto DeathGiveItemRange = 0x1648; // float
			constexpr auto DeathGiveAchievement = 0x1650; // FString
			constexpr auto OverrideAreaMusic = 0x1660; // USoundBase*
			constexpr auto UnboardLocationOffset = 0x1668; // FVector
			constexpr auto RidingNetUpdateFequency = 0x1688; // float
			constexpr auto RiderMaxSpeedModifier = 0x168c; // float
			constexpr auto RiderExtraMaxSpeedModifier = 0x1690; // float
			constexpr auto RiderMaxRunSpeedModifier = 0x1694; // float
			constexpr auto RiderRotationRateModifier = 0x1698; // float
			constexpr auto SwimmingRotationRateModifier = 0x169c; // float
			constexpr auto chargingRotationRateModifier = 0x16a0; // float
			constexpr auto EnterFlightAnim = 0x16a8; // UAnimMontage*
			constexpr auto ExitFlightAnim = 0x16b0; // UAnimMontage*
			constexpr auto SleepConsumeFoodAnim = 0x16b8; // UAnimMontage*
			constexpr auto WakingConsumeFoodAnim = 0x16c0; // UAnimMontage*
			constexpr auto FallAsleepAnim = 0x16c8; // UAnimMontage*
			constexpr auto TamedUnsleepAnim = 0x16d0; // UAnimMontage*
			constexpr auto WildUnsleepAnim = 0x16d8; // UAnimMontage*
			constexpr auto OpenDoorAnim = 0x16e0; // UAnimMontage*
			constexpr auto ControlFacePitchInterpSpeed = 0x16e8; // float
			constexpr auto TamedWalkableFloorZ = 0x16ec; // float
			constexpr auto CurrentMovementAnimRate = 0x16f0; // float
			constexpr auto MinPlayerLevelForWakingTame = 0x16f4; // int32_t
			constexpr auto TamedInventoryComponentTemplate = 0x1700; // UPrimalInventoryComponent*
			constexpr auto DeathInventoryTemplates = 0x1708; // FWeightedObjectList
			constexpr auto DeathInventoryChanceToUse = 0x1728; // float
			constexpr auto WakingTameFeedInterval = 0x172c; // float
			constexpr auto DeathInventoryQualityPerLevelMultiplier = 0x1738; // float
			constexpr auto RequiredTameAffinity = 0x173c; // float
			constexpr auto RequiredTameAffinityPerBaseLevel = 0x1740; // float
			constexpr auto TamedAITargetingRange = 0x1744; // char
			constexpr auto bMeleeSwingDamageBlockedByAllStationaryObjects = 0x1745; // char : 1
			constexpr auto bUseBPChargingModifyInputAcceleration = 0x1745; // char : 1
			constexpr auto bUseBPOnRepIsCharging = 0x1745; // char : 1
			constexpr auto bUseBPPreventOrderAllowed = 0x1745; // char : 1
			constexpr auto bPassengerDinosUsePassengerAnim = 0x1745; // char : 1
			constexpr auto bUsesPassengerAnimOnDinos = 0x1745; // char : 1
			constexpr auto bOverrideRotationOnCarriedCharacter = 0x1745; // char : 1
			constexpr auto bAdvancedCarryRelease = 0x1745; // char : 1
			constexpr auto bUseBPOnDinoFiredProjectile = 0x1746; // char : 1
			constexpr auto bUseBPModifyControlRotation = 0x1746; // char : 1
			constexpr auto bClearRiderOnDinoImmobilized = 0x1746; // char : 1
			constexpr auto bUseBPIsBasedOnActor = 0x1746; // char : 1
			constexpr auto bForceCarriedPlayerToCheckForWalls = 0x1746; // char : 1
			constexpr auto PassengerBoneNameOverride = 0x1748; // FName
			constexpr auto CurrentTameAffinity = 0x1750; // float
			constexpr auto TameIneffectivenessModifier = 0x1754; // float
			constexpr auto TameIneffectivenessByAffinity = 0x1758; // float
			constexpr auto bUseBPIsValidUnStasisCaster = 0x1760; // bool
			constexpr auto SaddleStructures = 0x1768; // TArray<FPrimalSaddleStructure>
			constexpr auto MaxSaddleStructuresHeight = 0x1778; // int32_t
			constexpr auto CalculateStructureHeightFromSaddle = 0x177c; // bool
			constexpr auto CalculateStructureDistanceFromSaddle = 0x177d; // bool
			constexpr auto SaddlePivotOffset = 0x1780; // int32_t
			constexpr auto MaxSaddleStructuresNum = 0x1784; // int32_t
			constexpr auto DinoSettingsClass = 0x1788; // UPrimalDinoSettings*
			constexpr auto TamingFoodConsumeInterval = 0x1790; // float
			constexpr auto DediForceAttackAnimTime = 0x1794; // float
			constexpr auto DediForceStartAttackAfterAnimTime = 0x1798; // float
			constexpr auto WakingTameFoodIncreaseMultiplier = 0x179c; // float
			constexpr auto TamingTeamID = 0x17a0; // int32_t
			constexpr auto OwningPlayerID = 0x17a4; // int32_t
			constexpr auto OwningPlayerName = 0x17a8; // FString
			constexpr auto TamingLastFoodConsumptionTime = 0x17b8; // double
			constexpr auto DinoID1 = 0x17c0; // uint32_t
			constexpr auto DinoID2 = 0x17c4; // uint32_t
			constexpr auto TamedAggressionLevel = 0x17d4; // int32_t
			constexpr auto TamingIneffectivenessModifierIncreaseByDamagePercent = 0x17d8; // float
			constexpr auto LinkedSupplyCrate = 0x17e4; // TWeakObjectPtr<APrimalStructureItemContainer_SupplyCrate>
			constexpr auto UntamedPoopTimeMinInterval = 0x17ec; // float
			constexpr auto UntamedPoopTimeMaxInterval = 0x17f0; // float
			constexpr auto MeleeHarvestDamageMultiplier = 0x17f4; // float
			constexpr auto AllowRidingMaxDistance = 0x17f8; // float
			constexpr auto UntamedPoopTimeCache = 0x17fc; // float
			constexpr auto BaseEggClass = 0x1800; // UPrimalItem*
			constexpr auto EggItemsToSpawn = 0x1808; // TArray<UPrimalItem*>
			constexpr auto EggWeightsToSpawn = 0x1818; // TArray<float>
			constexpr auto FertilizedEggItemsToSpawn = 0x1828; // TArray<UPrimalItem*>
			constexpr auto FertilizedEggWeightsToSpawn = 0x1838; // TArray<float>
			constexpr auto EggChanceToSpawnUnstasis = 0x1848; // float
			constexpr auto EggIntervalBetweenUnstasisChances = 0x184c; // float
			constexpr auto EggRangeMaximumNumberFromSameDinoType = 0x1850; // float
			constexpr auto EggMaximumNumberFromSameDinoType = 0x1854; // int32_t
			constexpr auto EggRangeMaximumNumber = 0x1858; // float
			constexpr auto EggMaximumNumber = 0x185c; // int32_t
			constexpr auto EggSpawnSocketName = 0x1860; // FName
			constexpr auto EggLayingAnimation = 0x1868; // UAnimMontage*
			constexpr auto UntamedWalkingSpeedModifier = 0x1870; // float
			constexpr auto TamedWalkingSpeedModifier = 0x1874; // float
			constexpr auto UntamedRunningSpeedModifier = 0x1878; // float
			constexpr auto TamedRunningSpeedModifier = 0x187c; // float
			constexpr auto RandomColorSetsMale = 0x1880; // UPrimalColorSet*
			constexpr auto RandomColorSetsFemale = 0x1888; // UPrimalColorSet*
			constexpr auto SpawnerColorSets = 0x1890; // UPrimalColorSet*
			constexpr auto RiderAnimOverride = 0x1898; // UAnimSequence*
			constexpr auto TurningRightRiderAnimOverride = 0x18a0; // UAnimSequence*
			constexpr auto TurningLeftRiderAnimOverride = 0x18a8; // UAnimSequence*
			constexpr auto LatchedRiderAnimOverride = 0x18b0; // UAnimSequence*
			constexpr auto RiderMoveAnimOverride = 0x18b8; // UAnimSequence*
			constexpr auto RidingAnimSpeedFactor = 0x18c0; // float
			constexpr auto StartRidingAnimOverride = 0x18c8; // UAnimMontage*
			constexpr auto StopRidingAnimOverride = 0x18d0; // UAnimMontage*
			constexpr auto TargetingTeamNameOverride = 0x18d8; // FName
			constexpr auto ExtraTamedSpeedMultiplier = 0x18e0; // float
			constexpr auto ExtraUnTamedSpeedMultiplier = 0x18e4; // float
			constexpr auto LastEggSpawnChanceTime = 0x18e8; // double
			constexpr auto OriginalNPCVolumeName = 0x18f0; // FName
			constexpr auto OutsideOriginalNPCVolumeStasisDestroyInterval = 0x18f8; // float
			constexpr auto StasisedDestroyInterval = 0x18fc; // float
			constexpr auto TamedAllowNamingTime = 0x1900; // float
			constexpr auto MovementSpeedScalingRotationRatePower = 0x1904; // float
			constexpr auto AttackNoStaminaTorpidityMultiplier = 0x1908; // float
			constexpr auto DecayDestructionPeriod = 0x190c; // float
			constexpr auto TamedAtTime = 0x1910; // double
			constexpr auto LastInAllyRangeTime = 0x1918; // double
			constexpr auto LatchedOnStructures = 0x1930; // TArray<APrimalStructure*>
			constexpr auto MyDinoSettingsCDO = 0x1940; // UPrimalDinoSettings*
			constexpr auto LocInterpolationSnapDistance = 0x194c; // float
			constexpr auto HUDScaleMultiplier = 0x1960; // float
			constexpr auto HUDTextScaleMultiplier = 0x1964; // float
			constexpr auto TamedCorpseLifespan = 0x1968; // float
			constexpr auto MateBoostDamageReceiveMultiplier = 0x196c; // float
			constexpr auto MateBoostDamageGiveMultiplier = 0x1970; // float
			constexpr auto MateBoostRange = 0x1974; // float
			constexpr auto DinoNameTag = 0x1978; // FName
			constexpr auto AttackMyTargetForPlayerController = 0x1980; // AShooterPlayerController*
			constexpr auto RidingAttackExtraVelocityDelay = 0x1988; // float
			constexpr auto StepDamageRadialDamageInterval = 0x198c; // float
			constexpr auto StepDamageRadialDamageExtraRadius = 0x1990; // float
			constexpr auto StepDamageRadialDamageAmountGeneral = 0x1994; // float
			constexpr auto StepDamageRadialDamageAmountHarvestable = 0x1998; // float
			constexpr auto StepHarvestableDamageType = 0x19a8; // UDamageType*
			constexpr auto StepDamageFootDamageInterval = 0x19b0; // float
			constexpr auto StepDamageFootDamageRadius = 0x19b4; // float
			constexpr auto StepDamageFootDamageAmount = 0x19b8; // float
			constexpr auto StepDamageFootDamageSockets = 0x19c0; // TArray<FName>
			constexpr auto DurationBeforeMovingStuckPawn = 0x19d0; // float
			constexpr auto StartledAnimationRightDefault = 0x19e8; // UAnimMontage*
			constexpr auto StartledAnimationLeft = 0x19f0; // UAnimMontage*
			constexpr auto StartledAnimations = 0x19f8; // TArray<UAnimMontage*>
			constexpr auto FlyingStartledAnimation = 0x1a08; // UAnimMontage*
			constexpr auto RandomPlayStartledAnimIntervalMin = 0x1a10; // float
			constexpr auto RandomPlayStartledAnimIntervalMax = 0x1a14; // float
			constexpr auto StartledAnimationCooldown = 0x1a18; // float
			constexpr auto DefaultActivateAttackRangeOffset = 0x1a1c; // float
			constexpr auto CorpseTargetingMultiplier = 0x1a20; // float
			constexpr auto CorpseLifespanNonRelevant = 0x1a38; // float
			constexpr auto bUseBPUnstasisConsumeFood = 0x1a3c; // char : 1
			constexpr auto bUseBPOnDinoStartled = 0x1a3c; // char : 1
			constexpr auto bRemoteDinoConsumesStaminaWhileRunning = 0x1a3c; // char : 1
			constexpr auto MinStaminaForRider = 0x1a40; // float
			constexpr auto LoseStaminaWithRiderRate = 0x1a44; // float
			constexpr auto FollowingRunDistance = 0x1a48; // float
			constexpr auto MaxDinoKillerTransferWeightPercent = 0x1a4c; // float
			constexpr auto NPCZoneVolumeCountWeight = 0x1a50; // float
			constexpr auto FloatingHUDTextWorldOffset = 0x1a58; // FVector
			constexpr auto RepairRequirementsItem = 0x1ad0; // UPrimalItem*
			constexpr auto RepairCheckInterval = 0x1adc; // float
			constexpr auto RepairPercentPerInterval = 0x1ae0; // float
			constexpr auto RiderCheckTraceOffset = 0x1ae4; // FVector
			constexpr auto RiderEjectionImpulse = 0x1af0; // FVector
			constexpr auto WakingTameAffinityDecreaseFoodPercentage = 0x1afc; // float
			constexpr auto WakingTameAllowFeedingFoodPercentage = 0x1b00; // float
			constexpr auto WakingTameFoodAffinityMultiplier = 0x1b04; // float
			constexpr auto CheckForWildAmbientHarvestingIntervalMin = 0x1b08; // float
			constexpr auto CheckForWildAmbientHarvestingIntervalMax = 0x1b0c; // float
			constexpr auto WildAmbientHarvestingAnimation = 0x1b18; // UAnimMontage*
			constexpr auto WildAmbientHarvestingAnimations = 0x1b20; // TArray<UAnimMontage*>
			constexpr auto WildAmbientHarvestingComponentClasses = 0x1b30; // TArray<UPrimalHarvestingComponent*>
			constexpr auto WildAmbientHarvestingRadius = 0x1b40; // float
			constexpr auto AbsoluteBaseLevel = 0x1b48; // int32_t
			constexpr auto OverrideBaseStatLevelsOnSpawn = 0x1b50; // TArray<FStatValuePair>
			constexpr auto OverrideStatPriorityOnSpawn = 0x1b60; // TArray<EPrimalCharacterStatusValue>
			constexpr auto TamedHarvestDamageType = 0x1b70; // UDamageType*
			constexpr auto SaddleStruct = 0x1b78; // FDinoSaddleStruct
			constexpr auto StartChargingShake = 0x1bb8; // UCameraShake*
			constexpr auto LightEndChargingShake = 0x1bc0; // UCameraShake*
			constexpr auto HardEndChargingShake = 0x1bc8; // UCameraShake*
			constexpr auto ChargeBumpDamage = 0x1bd0; // float
			constexpr auto ChargeBumpDamageType = 0x1bd8; // UDamageType*
			constexpr auto ChargeBumpImpulse = 0x1be0; // float
			constexpr auto MinChargeInterval = 0x1be4; // float
			constexpr auto PlayerMountedLaunchFowardSpeed = 0x1be8; // float
			constexpr auto PlayerMountedLaunchUpSpeed = 0x1bec; // float
			constexpr auto AttackOnLaunchMaximumTargetDistance = 0x1bf0; // float
			constexpr auto KeepFlightRemainingTime = 0x1bf4; // float
			constexpr auto MountCharacterAnimation = 0x1bf8; // UAnimMontage*
			constexpr auto UnmountCharacterAnimation = 0x1c00; // UAnimMontage*
			constexpr auto EndChargingAnimation = 0x1c08; // UAnimMontage*
			constexpr auto FlyingRunSpeedModifier = 0x1c10; // float
			constexpr auto ChargingAnimDelay = 0x1c14; // float
			constexpr auto RiderSocketName = 0x1c18; // FName
			constexpr auto ChargingActivationRequiresStamina = 0x1c20; // float
			constexpr auto ChargingActivationConsumesStamina = 0x1c24; // float
			constexpr auto FlyerHardBreakingOverride = 0x1c28; // float
			constexpr auto BabyScale = 0x1c2c; // float
			constexpr auto BabySpeedMultiplier = 0x1c30; // float
			constexpr auto BabyPitchMultiplier = 0x1c34; // float
			constexpr auto BabyVolumeMultiplier = 0x1c38; // float
			constexpr auto WanderAroundActor = 0x1c3c; // TWeakObjectPtr<AActor>
			constexpr auto WanderAroundActorMaxDistance = 0x1c44; // float
			constexpr auto BuffGivenToBasedCharacters = 0x1c68; // APrimalBuff*
			constexpr auto LastUpdatedBabyAgeAtTime = 0x1c78; // double
			constexpr auto LastUpdatedGestationAtTime = 0x1c80; // double
			constexpr auto LastUpdatedMatingAtTime = 0x1c88; // double
			constexpr auto BabyAgeSpeed = 0x1c90; // float
			constexpr auto ExtraBabyAgeSpeedMultiplier = 0x1c94; // float
			constexpr auto FemaleMatingRangeAddition = 0x1c98; // float
			constexpr auto FemaleMatingTime = 0x1c9c; // float
			constexpr auto NextAllowedMatingTime = 0x1ca0; // double
			constexpr auto MatingProgress = 0x1ca8; // float
			constexpr auto LastMatingNotificationTime = 0x1cb0; // double
			constexpr auto MatingWithDino = 0x1cb8; // APrimalDinoCharacter*
			constexpr auto MatingAnimationMale = 0x1cc0; // UAnimMontage*
			constexpr auto GestationEggNumberOfLevelUpPointsApplied0xc = 0x1cc8; // char
			constexpr auto GestationEggTamedIneffectivenessModifier = 0x1cd4; // float
			constexpr auto GestationEggColorSetIndices0x6 = 0x1cd8; // char
			constexpr auto NewFemaleMinTimeBetweenMating = 0x1ce0; // float
			constexpr auto NewFemaleMaxTimeBetweenMating = 0x1ce4; // float
			constexpr auto DefaultTamedBuffs = 0x1ce8; // TArray<APrimalBuff*>
			constexpr auto HyperThermiaInsulation = 0x1d10; // float
			constexpr auto HypoThermiaInsulation = 0x1d14; // float
			constexpr auto InsulationRange = 0x1d18; // float
			constexpr auto GangOverlapRange = 0x1d1c; // float
			constexpr auto GangDamageResistance = 0x1d20; // float
			constexpr auto GangDamage = 0x1d24; // float
			constexpr auto MaxGangCount = 0x1d28; // int32_t
			constexpr auto GangCount = 0x1d2c; // int32_t
			constexpr auto WildRandomScale = 0x1d4c; // float
			constexpr auto HeldJumpSlowFallingGravityZScale = 0x1d50; // float
			constexpr auto SlowFallingAnim = 0x1d58; // UAnimMontage*
			constexpr auto SlowFallingStaminaCostPerSecond = 0x1d60; // float
			constexpr auto NoRiderRotationModifier = 0x1d64; // float
			constexpr auto RiderFPVCameraUseSocketName = 0x1d68; // FName
			constexpr auto RiderLatchedFPVCameraUseSocketName = 0x1d70; // FName
			constexpr auto PassengerFPVCameraRootSocket = 0x1d78; // FName
			constexpr auto FPVRiderBoneNamesToHide = 0x1d80; // TArray<FName>
			constexpr auto ExtraRunningSpeedModifier = 0x1d90; // float
			constexpr auto ScaleExtraRunningSpeedModifierMin = 0x1d94; // float
			constexpr auto ScaleExtraRunningSpeedModifierMax = 0x1d98; // float
			constexpr auto ScaleExtraRunningSpeedModifierSpeed = 0x1d9c; // float
			constexpr auto LastHigherScaleExtraRunningSpeedValue = 0x1da0; // float
			constexpr auto LastHigherScaleExtraRunningSpeedTime = 0x1da8; // double
			constexpr auto bDisableHighQualityAIVolumeLedgeChecking = 0x1db0; // char : 1
			constexpr auto bDoHighQualityLedgeChecking = 0x1db0; // char : 1
			constexpr auto bUseBPOverrideStencilAllianceForTarget = 0x1db0; // char : 1
			constexpr auto bSimulateRootMotion = 0x1db0; // char : 1
			constexpr auto RiderMovementSpeedScalingRotationRatePowerMultiplier = 0x1db4; // float
			constexpr auto HighQualityLedgeDetectionExtraTraceDistance = 0x1db8; // float
			constexpr auto bOnlyDoStepDamageWhenRunning = 0x1dbc; // char : 1
			constexpr auto bPreventPlatformSaddleMultiFloors = 0x1dbc; // char : 1
			constexpr auto bPreventMountedDinoMeshHiding = 0x1dbc; // char : 1
			constexpr auto bUsePlayerMountedCarryingDinoAnimation = 0x1dbc; // char : 1
			constexpr auto bPreventRotationRateModifier = 0x1dbc; // char : 1
			constexpr auto bStepDamageFoliageOnly = 0x1dbc; // char : 1
			constexpr auto bPreventUntamedRun = 0x1dbc; // char : 1
			constexpr auto bUseBPDoAttack = 0x1dbd; // char : 1
			constexpr auto bDamageNonFoliageFeetSocketsOnly = 0x1dbd; // char : 1
			constexpr auto bStepDamageAllTargetables = 0x1dbd; // char : 1
			constexpr auto bStepDamageNonFoliageWithoutRunning = 0x1dbd; // char : 1
			constexpr auto bUseVelocityForRequestedMoveIfStuck = 0x1dbd; // char : 1
			constexpr auto bAllowWaterSurfaceExtraJump = 0x1dbd; // char : 1
			constexpr auto bAllowPublicSeating = 0x1dbd; // char : 1
			constexpr auto bAllowTogglingPublicSeating = 0x1dbd; // char : 1
			constexpr auto bRiderDontBeBlockedByPawnMesh = 0x1dbe; // char : 1
			constexpr auto bUseExtendedUnstasisCheck = 0x1dbe; // char : 1
			constexpr auto bAllowDinoAutoConsumeInventoryFood = 0x1dbe; // char : 1
			constexpr auto bForceNoCharacterStatusComponentTick = 0x1dbe; // char : 1
			constexpr auto bIsRaidDino = 0x1dbe; // char : 1
			constexpr auto bWildIgnoredByAutoTurrets = 0x1dbe; // char : 1
			constexpr auto bWildAllowTargetingNeutralStructures = 0x1dbe; // char : 1
			constexpr auto bIsCarryingPassenger = 0x1dbf; // char : 1
			constexpr auto bForwardPlatformSaddleStructureDamageToDino = 0x1dbf; // char : 1
			constexpr auto bUseBPCanTakePassenger = 0x1dbf; // char : 1
			constexpr auto bForceWildDeathInventoryDeposit = 0x1dbf; // char : 1
			constexpr auto bIsCarryingCharacter = 0x1dbf; // char : 1
			constexpr auto bStepDamageNonFoliageTamedOnly = 0x1dbf; // char : 1
			constexpr auto bDoStepDamageTamedOnly = 0x1dbf; // char : 1
			constexpr auto LoadDestroyWildDinosUnderVersion = 0x1dc0; // int32_t
			constexpr auto SaveDestroyWildDinosUnderVersion = 0x1dc4; // int32_t
			constexpr auto AllowWaterSurfaceExtraJumpStaminaCost = 0x1dc8; // float
			constexpr auto PlayKillLocalSound = 0x1dd0; // USoundBase*
			constexpr auto TribeGroupPetOrderingRank = 0x1dec; // char
			constexpr auto TribeGroupPetRidingRank = 0x1ded; // char
			constexpr auto FollowStoppingDistance = 0x1dee; // char
			constexpr auto ImprinterName = 0x1df0; // FString
			constexpr auto ImprinterPlayerDataID = 0x1e00; // uint64_t
			constexpr auto BabyMinCuddleInterval = 0x1e08; // float
			constexpr auto BabyMaxCuddleInterval = 0x1e0c; // float
			constexpr auto BabyCuddleGracePeriod = 0x1e10; // float
			constexpr auto BabyCuddleLoseImpringQualityPerSecond = 0x1e14; // float
			constexpr auto BabyCuddleWalkDistance = 0x1e18; // float
			constexpr auto BabyCuddleWalkStartingLocation = 0x1e1c; // FVector
			constexpr auto BabyNextCuddleTime = 0x1e28; // double
			constexpr auto BabyCuddleType = 0x1e30; // EBabyCuddleType
			constexpr auto BabyCuddleFood = 0x1e38; // UPrimalItem*
			constexpr auto BabyCuddledAnimation = 0x1e40; // UAnimMontage*
			constexpr auto MyBabyCuddleFoodTypes = 0x1e48; // TArray<UPrimalItem*>
			constexpr auto RiderMaxImprintingQualityDamageReduction = 0x1e58; // float
			constexpr auto RiderMaxImprintingQualityDamageMultiplier = 0x1e5c; // float
			constexpr auto BabyImprintingQualityTotalMaturationTime = 0x1e60; // float
			constexpr auto WakingTameMaxDistance = 0x1e64; // float
			constexpr auto TimeBetweenTamedWakingEatAnimations = 0x1e68; // float
			constexpr auto bDontPlayAttackingMusic = 0x1e78; // char : 1
			constexpr auto bForceIgnoreRagdollHarvesting = 0x1e78; // char : 1
			constexpr auto bBPModifyAimOffsetTargetLocation = 0x1e78; // char : 1
			constexpr auto bBPModifyAimOffsetNoTarget = 0x1e78; // char : 1
			constexpr auto bIsVehicle = 0x1e78; // char : 1
			constexpr auto bDisallowPostNetReplication = 0x1e78; // char : 1
			constexpr auto bIgnoreTargetingLiveUnriddenDinos = 0x1e79; // char : 1
			constexpr auto bFlyerDisableEnemyTargetingMaxDeltaZ = 0x1e79; // char : 1
			constexpr auto bSleepedForceCreateInventory = 0x1e79; // char : 1
			constexpr auto bLocalForceNearbySkelMeshUpdate = 0x1e79; // char : 1
			constexpr auto bFlyerDinoAllowStrafing = 0x1e79; // char : 1
			constexpr auto bPreventMating = 0x1e79; // char : 1
			constexpr auto bAttackStopsRotation = 0x1e79; // char : 1
			constexpr auto bFlyerDinoAllowBackwardsFlight = 0x1e79; // char : 1
			constexpr auto bIsBossDino = 0x1e7a; // char : 1
			constexpr auto bTamedAIAllowSpecialAttacks = 0x1e7a; // char : 1
			constexpr auto bTamedAIToggleSpecialAttacks = 0x1e7a; // char : 1
			constexpr auto bRepeatPrimaryAttack = 0x1e7a; // char : 1
			constexpr auto bPreventUploading = 0x1e7a; // char : 1
			constexpr auto bPreventHibernation = 0x1e7a; // char : 1
			constexpr auto bRiderMovementLocked = 0x1e7a; // char : 1
			constexpr auto bUseBPModifyHarvestingQuantity = 0x1e7b; // char : 1
			constexpr auto bUseBPModifyHarvestingWeightsArray = 0x1e7b; // char : 1
			constexpr auto bUseBPDoHarvestAttack = 0x1e7b; // char : 1
			constexpr auto bNeutered = 0x1e7b; // char : 1
			constexpr auto bIgnoreAllWhistles = 0x1e7b; // char : 1
			constexpr auto StepDamageFootDamageRunningMultiplier = 0x1e7c; // float
			constexpr auto bUseBPModifyHarvestDamage = 0x1e80; // char : 1
			constexpr auto bHideFloatingHUD = 0x1e80; // char : 1
			constexpr auto maxRangeForWeaponTriggeredTooltip = 0x1e84; // float
			constexpr auto bUseBPCanDragCharacter = 0x1e88; // char : 1
			constexpr auto bSingleplayerFreezePhysicsWhenNoTarget = 0x1e88; // char : 1
			constexpr auto bAllowDraggingWhileFalling = 0x1e88; // char : 1
			constexpr auto bUseBPDinoPostBeginPlay = 0x1e88; // char : 1
			constexpr auto bUseBPCanAutodrag = 0x1e88; // char : 1
			constexpr auto bFlyerDontGainImpulseOnSubmerged = 0x1e88; // char : 1
			constexpr auto bDisableHarvesting = 0x1e88; // char : 1
			constexpr auto bAllowRidingInTurretMode = 0x1e89; // char : 1
			constexpr auto bAllowDamageSameTeamAndClass = 0x1e89; // char : 1
			constexpr auto bAllowsTurretMode = 0x1e89; // char : 1
			constexpr auto bUseAdvancedAnimLerp = 0x1e89; // char : 1
			constexpr auto bWildAllowFollowTamedTarget = 0x1e89; // char : 1
			constexpr auto bIsCloneDino = 0x1e89; // char : 1
			constexpr auto bPreventWanderingUnderWater = 0x1e89; // char : 1
			constexpr auto bIsInTurretMode = 0x1e8a; // char : 1
			constexpr auto bUseBPShouldCancelDoAttack = 0x1e8a; // char : 1
			constexpr auto bUseBPModifyDesiredRotation = 0x1e8a; // char : 1
			constexpr auto bUseLocalSpaceDesiredRotationWithRider = 0x1e8a; // char : 1
			constexpr auto bUseBPDesiredRotationIsLocalSpace = 0x1e8a; // char : 1
			constexpr auto bUseBPOverrideCameraViewTarget = 0x1e8a; // char : 1
			constexpr auto bIsRobot = 0x1e8a; // char : 1
			constexpr auto StepRadialDamageOffset = 0x1e8c; // float
			constexpr auto bForcePerFrameTicking = 0x1e90; // char : 1
			constexpr auto bNoKillXP = 0x1e90; // char : 1
			constexpr auto bHadStaticBase = 0x1e90; // char : 1
			constexpr auto bUseBP_OnStartLandingNotify = 0x1e90; // char : 1
			constexpr auto bUseAttackForceWalkDistanceMultiplier = 0x1e90; // char : 1
			constexpr auto bUseBP_CustomModifier_MaxSpeed = 0x1e90; // char : 1
			constexpr auto bUseBP_CustomModifier_RotationRate = 0x1e90; // char : 1
			constexpr auto bIgnoreAllyLook = 0x1e91; // char : 1
			constexpr auto bBabyInitiallyUnclaimed = 0x1e91; // char : 1
			constexpr auto bUseBPForceTurretFastTargeting = 0x1e91; // char : 1
			constexpr auto bSuppressWakingTameMessage = 0x1e91; // char : 1
			constexpr auto bPreventFlyerLanding = 0x1e91; // char : 1
			constexpr auto bIgnoreDestroyOnRapidDeath = 0x1e92; // char : 1
			constexpr auto bIsDestroyingDino = 0x1e92; // char : 1
			constexpr auto bPreventFallingBumpCheck = 0x1e92; // char : 1
			constexpr auto bCheckBPAllowClaiming = 0x1e92; // char : 1
			constexpr auto bIsTrapTamed = 0x1e92; // char : 1
			constexpr auto bDisableCollisionWithDinosWhenFlying = 0x1e92; // char : 1
			constexpr auto bPreventWildTrapping = 0x1e92; // char : 1
			constexpr auto bAllowTrapping = 0x1e92; // char : 1
			constexpr auto bUseBPGetLookOffsetSocketName = 0x1e93; // char : 1
			constexpr auto bTargetEverythingIncludingSameTeamInPVE = 0x1e93; // char : 1
			constexpr auto bUseBlueprintExtraBabyScale = 0x1e93; // char : 1
			constexpr auto bUseBPGetDragSocketDinoName = 0x1e93; // char : 1
			constexpr auto bPreventNeuter = 0x1e93; // char : 1
			constexpr auto bUseBPGetDragSocketName = 0x1e93; // char : 1
			constexpr auto ForcePawnBigPushingForTime = 0x1e94; // float
			constexpr auto bOnlyTargetConscious = 0x1e98; // char : 1
			constexpr auto bHideSaddleInFPV = 0x1e98; // char : 1
			constexpr auto bPreventCloning = 0x1e98; // char : 1
			constexpr auto bPassiveFlee = 0x1e98; // char : 1
			constexpr auto bUseBP_OnPostNetReplication = 0x1e98; // char : 1
			constexpr auto bForceUsePhysicalFootSurfaceTrace = 0x1e98; // char : 1
			constexpr auto bBPManagedFPVViewLocationNoRider = 0x1e98; // char : 1
			constexpr auto bPreventStasisOnDedi = 0x1e99; // char : 1
			constexpr auto bAlwaysCheckForFloor = 0x1e99; // char : 1
			constexpr auto bAlwaysCheckForFalling = 0x1e99; // char : 1
			constexpr auto bForceAllowCarryWaterDinos = 0x1e99; // char : 1
			constexpr auto bUseBP_AllowWalkableSlopeOverride = 0x1e99; // char : 1
			constexpr auto bUseBP_CanFly = 0x1e99; // char : 1
			constexpr auto bUseBP_OverrideBasedCharactersCameraInterpSpeed = 0x1e99; // char : 1
			constexpr auto bUseBPOverrideFloatingHUDLocation = 0x1e99; // char : 1
			constexpr auto bRidingIsSeperateUnstasisCaster = 0x1e9a; // char : 1
			constexpr auto bIsOceanManagerDino = 0x1e9a; // char : 1
			constexpr auto bUseBP_ShouldPreventBasedCharactersCameraInterpolation = 0x1e9a; // char : 1
			constexpr auto bInterceptPlayerEmotes = 0x1e9a; // char : 1
			constexpr auto WanderRadiusMultiplier = 0x1e9c; // float
			constexpr auto DisableCameraShakes = 0x1ea0; // char : 1
			constexpr auto bUseBP_OverrideCarriedCharacterTransform = 0x1ea0; // char : 1
			constexpr auto bUseBP_OnBasedPawnNotifies = 0x1ea0; // char : 1
			constexpr auto bUsesWaterWalking = 0x1ea0; // char : 1
			constexpr auto bHasInvisiableSaddle = 0x1ea0; // char : 1
			constexpr auto bUseWildDinoMapMultipliers = 0x1ea0; // char : 1
			constexpr auto bIgnoreFlierRidingRestrictions = 0x1ea0; // char : 1
			constexpr auto bRotatingUpdatesDinoIK = 0x1ea0; // char : 1
			constexpr auto bForceAllowPvECarry = 0x1ea1; // char : 1
			constexpr auto bAllowInvalidTameVersion = 0x1ea1; // char : 1
			constexpr auto bUseShoulderMountedLaunch = 0x1ea1; // char : 1
			constexpr auto bUsePreciseLaunching = 0x1ea1; // char : 1
			constexpr auto bDrawHealthBar = 0x1ea1; // char : 1
			constexpr auto bUseBP_OverrideRiderCameraCollisionSweep = 0x1ea1; // char : 1
			constexpr auto bUnderwaterMating = 0x1ea2; // char : 1
			constexpr auto bBabyPreventExitingWater = 0x1ea2; // char : 1
			constexpr auto bUseBPCheckSeven = 0x1ea2; // char : 1
			constexpr auto bPreventExportDino = 0x1ea2; // char : 1
			constexpr auto bPreventPassengerFPV = 0x1ea2; // char : 1
			constexpr auto AIDinoForceActiveUntasisingRange = 0x1ea4; // float
			constexpr auto WildRunningRotationRateModifier = 0x1ea8; // float
			constexpr auto TamedRunningRotationRateModifier = 0x1eac; // float
			constexpr auto TamedSwimmingRotationRateModifier = 0x1eb0; // float
			constexpr auto WildSwimmingRotationRateModifier = 0x1eb4; // float
			constexpr auto HardLimitWildDinoToVolume = 0x1eb8; // TWeakObjectPtr<ANPCZoneVolume>
			constexpr auto WildLimitTargetVolume = 0x1ec0; // TWeakObjectPtr<AVolume>
			constexpr auto RiderFlyingRotationRateModifier = 0x1ec8; // float
			constexpr auto NoRiderFlyingRotationRateModifier = 0x1ecc; // float
			constexpr auto AICombatRotationRateModifier = 0x1ed0; // float
			constexpr auto WalkingRotationRateModifier = 0x1ed4; // float
			constexpr auto SetAttackTargetTraceDistance = 0x1ed8; // float
			constexpr auto SetAttackTargetTraceWidth = 0x1edc; // float
			constexpr auto PlayerMountedCarryAnimation = 0x1ef8; // UAnimMontage*
			constexpr auto bForceAllowBackwardsMovement = 0x1f00; // char : 1
			constexpr auto bForceAllowMountedCarryRunning = 0x1f00; // char : 1
			constexpr auto bSupplyPlayerMountedCarryAnimation = 0x1f00; // char : 1
			constexpr auto bPreventBackwardsWalking = 0x1f00; // char : 1
			constexpr auto bGlideWhenMounted = 0x1f00; // char : 1
			constexpr auto bGlideWhenFalling = 0x1f00; // char : 1
			constexpr auto bHandleUseButtonPressBP = 0x1f00; // char : 1
			constexpr auto bUseBPOnMountStateChanged = 0x1f00; // char : 1
			constexpr auto bCanLatch = 0x1f01; // char : 1
			constexpr auto bIsLatched = 0x1f01; // char : 1
			constexpr auto bIsLatchedDownward = 0x1f01; // char : 1
			constexpr auto bIsLatching = 0x1f01; // char : 1
			constexpr auto bRotateToFaceLatchingObject = 0x1f01; // char : 1
			constexpr auto bLimitRiderYawOnLatched = 0x1f01; // char : 1
			constexpr auto bAllowMountedWeaponry = 0x1f01; // char : 1
			constexpr auto bKeepAffinityOnDamageRecievedWakingTame = 0x1f01; // char : 1
			constexpr auto bSuppressDeathNotification = 0x1f02; // char : 1
			constexpr auto bRidingRequiresTamed = 0x1f02; // char : 1
			constexpr auto bCanTargetVehicles = 0x1f02; // char : 1
			constexpr auto bForceDrawHUDWithoutRecentlyRendered = 0x1f02; // char : 1
			constexpr auto bHideFloatingName = 0x1f02; // char : 1
			constexpr auto bForceDrawHUD = 0x1f02; // char : 1
			constexpr auto bForceRiderDrawCrosshair = 0x1f02; // char : 1
			constexpr auto bUseBPFedWakingTameEvent = 0x1f02; // char : 1
			constexpr auto bUseCustomHealthBarColor = 0x1f03; // char : 1
			constexpr auto bUseOnUpdateMountedDinoMeshHiding = 0x1f03; // char : 1
			constexpr auto bUseBPInterceptTurnInputEvents = 0x1f03; // char : 1
			constexpr auto bUseBPInterceptMoveInputEvents = 0x1f03; // char : 1
			constexpr auto bUseBPInterceptMoveInputEventsEvenIfZero = 0x1f03; // char : 1
			constexpr auto bUseBPAdjustAttackIndex = 0x1f03; // char : 1
			constexpr auto bCheckBPAllowCarryCharacter = 0x1f03; // char : 1
			constexpr auto bUseBPOnEndCharging = 0x1f03; // char : 1
			constexpr auto bUseBPCarriedDinoBabyRescaled = 0x1f04; // char : 1
			constexpr auto bUseBPNotifyMateBoostChanged = 0x1f04; // char : 1
			constexpr auto HealthBarOffsetY = 0x1f08; // float
			constexpr auto OwnerMission = 0x1f10; // AMissionType*
			constexpr auto bForceAllowBackwardsMovementWithNoRider = 0x1f18; // char : 1
			constexpr auto bIsCorrupted = 0x1f18; // char : 1
			constexpr auto bIsHordeDino = 0x1f18; // char : 1
			constexpr auto bBPOverrideHealthBarOffset = 0x1f18; // char : 1
			constexpr auto bDropWildEggsWithoutMateBoost = 0x1f18; // char : 1
			constexpr auto bIsTemporaryMissionDino = 0x1f18; // char : 1
			constexpr auto bForcePreventInventoryAccess = 0x1f18; // char : 1
			constexpr auto bAllowWildRunningWithoutTarget = 0x1f18; // char : 1
			constexpr auto bDisableHarvestHealthGain = 0x1f19; // char : 1
			constexpr auto bForceAllowTamedTickEggLay = 0x1f19; // char : 1
			constexpr auto bHasBuffPreventingUploading = 0x1f19; // char : 1
			constexpr auto bAlwaysAllowStrafing = 0x1f19; // char : 1
			constexpr auto bUseBPGetTargetingDesirability = 0x1f19; // char : 1
			constexpr auto bIsBed = 0x1f19; // char : 1
			constexpr auto LimitRiderYawOnLatchedRange = 0x1f1c; // float
			constexpr auto LatchingDistanceLimit = 0x1f20; // float
			constexpr auto LatchingInitialYaw = 0x1f24; // float
			constexpr auto LatchingInitialPitch = 0x1f28; // float
			constexpr auto LatchingInterpolatedPitch = 0x1f2c; // float
			constexpr auto LatchedFirstPersonViewAngle = 0x1f30; // float
			constexpr auto LatchingCameraInterpolationSpeed = 0x1f34; // float
			constexpr auto TargetLatchingInitialYaw = 0x1f38; // float
			constexpr auto CurrentStrafeMagnitude = 0x1f3c; // float
			constexpr auto GainStaminaWhenLatchedRate = 0x1f40; // float
			constexpr auto AIAggroNotifyNeighborsClassesRangeScale = 0x1f44; // float
			constexpr auto LastFrameMoveRight = 0x1f48; // int32_t
			constexpr auto LastFrameMoveLeft = 0x1f4c; // int32_t
			constexpr auto LastRiderMountedWeaponRotation = 0x1f50; // FRotator
			constexpr auto DeathGivesDossierIndex = 0x1f68; // int32_t
			constexpr auto DeathGivesDossierDelay = 0x1f6c; // float
			constexpr auto LastMovementDesiredRotation_MountedWeaponry = 0x1f70; // FRotator_NetQuantizeSmartPitch
			constexpr auto SaddleRiderMovementTraceThruSocketName = 0x1f7c; // FName
			constexpr auto SwimmingRunSpeedModifier = 0x1f84; // float
			constexpr auto RidingSwimmingRunSpeedModifier = 0x1f88; // float
			constexpr auto DinoDownloadedAtTime = 0x1f90; // double
			constexpr auto UploadedFromServerName = 0x1f98; // FString
			constexpr auto LatestUploadedFromServerName = 0x1fa8; // FString
			constexpr auto PreviousUploadedFromServerName = 0x1fb8; // FString
			constexpr auto TamedOnServerName = 0x1fc8; // FString
			constexpr auto DinoAncestors = 0x1fd8; // TArray<FDinoAncestorsEntry>
			constexpr auto DinoAncestorsMale = 0x1fe8; // TArray<FDinoAncestorsEntry>
			constexpr auto NextBabyDinoAncestors = 0x1ff8; // TArray<FDinoAncestorsEntry>
			constexpr auto NextBabyDinoAncestorsMale = 0x2008; // TArray<FDinoAncestorsEntry>
			constexpr auto MaxAllowedRandomMutations = 0x2018; // int32_t
			constexpr auto RandomMutationRolls = 0x201c; // int32_t
			constexpr auto RandomMutationChance = 0x2020; // float
			constexpr auto RandomMutationGivePoints = 0x2024; // float
			constexpr auto RandomMutationsMale = 0x2028; // int32_t
			constexpr auto RandomMutationsFemale = 0x202c; // int32_t
			constexpr auto GestationEggRandomMutationsFemale = 0x2030; // int32_t
			constexpr auto GestationEggRandomMutationsMale = 0x2034; // int32_t
			constexpr auto WakingTameDistanceSocketName = 0x2038; // FName
			constexpr auto WakingTameConsumeEntireStackMaxQuantity = 0x2040; // int32_t
			constexpr auto AttackPlayerDesirabilityMultiplier = 0x2044; // float
			constexpr auto FlyerAttachedExplosiveSpeedMultiplier = 0x2058; // float
			constexpr auto DinoExtraDefaultInventoryItems = 0x2060; // TArray<FDinoExtraDefaultItemList>
			constexpr auto DeathGiveEngramClasses = 0x2070; // TArray<UPrimalItem*>
			constexpr auto SinglePlayerOutgoingDamageModifier = 0x2080; // float
			constexpr auto SinglePlayerIncomingDamageModifier = 0x2084; // float
			constexpr auto DinoLevelUpAnimationOverride = 0x20b0; // UAnimMontage*
			constexpr auto DamageVictimClassesIgnoreBlockingGeomtryTrace = 0x20b8; // TArray<AActor*>
			constexpr auto CloneBaseElementCost = 0x20d8; // float
			constexpr auto CloneElementCostPerLevel = 0x20dc; // float
			constexpr auto LastValidTameVersion = 0x20e0; // int32_t
			constexpr auto SavedLastValidTameVersion = 0x20e4; // int32_t
			constexpr auto NonDedicatedFreezeDinoPhysicsIfLevelUnloaded = 0x20e8; // FName
			constexpr auto NonDedicatedFreezeWildDinoPhysicsIfLevelsUnloaded = 0x20f0; // TArray<FName>
			constexpr auto UnboardLocationTraceOffset = 0x2100; // FVector
			constexpr auto AttackLineOfSightMeshSocketName = 0x210c; // FName
			constexpr auto AttackForceWalkDistanceMultiplier = 0x2114; // float
			constexpr auto AttackForceWalkRotationRateMultiplier = 0x2118; // float
			constexpr auto OverrideDinoTameSoundIndex = 0x211c; // int32_t
			constexpr auto SwimSound = 0x2120; // USoundBase*
			constexpr auto SwimSoundIntervalPerHundredSpeed = 0x2128; // float
			constexpr auto TamedAIControllerOverride = 0x2130; // AController*
			constexpr auto PersonalTamedDinoCost = 0x2138; // int32_t
			constexpr auto UploadEarliestValidTime = 0x2140; // double
			constexpr auto StasisAutoDestroyInterval = 0x2148; // float
			constexpr auto CarryCameraYawOffset = 0x214c; // float
			constexpr auto ExtraDamageMultiplier = 0x2150; // float
			constexpr auto ExtraTamedBaseHealthMultiplier = 0x2154; // float
			constexpr auto attackRangeOffset = 0x2158; // float
			constexpr auto DinoExtraIncreasePlayerCollisionActivationDistanceSquared = 0x215c; // float
			constexpr auto OverrideApproachRadius = 0x2164; // float
			constexpr auto TamedOverrideStasisComponentRadius = 0x2168; // float
			constexpr auto UniqueDino_MapMarkerMesh = 0x2170; // UStaticMesh*
			constexpr auto UniqueDino_MapMarkerColor = 0x2178; // FColor
			constexpr auto OverrideDinoMaxExperiencePoints = 0x217c; // float
			constexpr auto MaxDinoTameLevels = 0x2180; // int32_t
			constexpr auto DestroyTamesOverLevelClampOffset = 0x2184; // int32_t
			constexpr auto NursingTroughFoodEffectivenessMultiplier = 0x2188; // float
			constexpr auto ForceAllowFoodAsConsumableList = 0x2190; // TArray<UPrimalItem*>
			constexpr auto CustomReplicatedData = 0x21a0; // int32_t
			constexpr auto OnNotifySetRider = 0x21a8; // FScriptMulticastDelegate
			constexpr auto OnNotifyClearRider = 0x21b8; // FScriptMulticastDelegate
			constexpr auto OnSetMountedDino = 0x21c8; // FScriptMulticastDelegate
			constexpr auto OnClearMountedDino = 0x21d8; // FScriptMulticastDelegate
			constexpr auto OnNotifyAddPassenger = 0x21e8; // FScriptMulticastDelegate
			constexpr auto OnNotifyClearPassenger = 0x21f8; // FScriptMulticastDelegate
			constexpr auto NextAllowedBedUseTime = 0x2208; // double
			constexpr auto UseBedCooldownTime = 0x2210; // float
			constexpr auto bUseBPGetOtherActorToIgnore = 0x2214; // char : 1
			constexpr auto MutagenApplied = 0x2214; // char : 1
			constexpr auto bAllowWhistleThroughRemoteDino = 0x2214; // char : 1
			constexpr auto bForceValidUnstasisCaster = 0x2214; // char : 1
			constexpr auto bControlledDinoPreventsPlayerInventory = 0x2214; // char : 1
			constexpr auto bDinoFPVDisableMotionBlur = 0x2214; // char : 1
			constexpr auto bPaintingUseSaddle = 0x2214; // char : 1
			constexpr auto bUseBPGetTargetingDesirabilityForTurrets = 0x2215; // char : 1
			constexpr auto bForceDisableClientGravitySim = 0x2215; // char : 1
			constexpr auto bUseBPOverridePassengerAdditiveAnim = 0x2215; // char : 1
			constexpr auto bReplicatePassengerTPVAim = 0x2215; // char : 1
			constexpr auto bDinoDontOverrideControllerPitch = 0x2215; // char : 1
			constexpr auto bPaintingSupportSkins = 0x2215; // char : 1
			constexpr auto CarriedAsBabyPassengerSizeLimitOverride = 0x2218; // float
			constexpr auto MutagenBaseCost = 0x221c; // float
			constexpr auto PaintTextureResolution = 0x2220; // int32_t
			constexpr auto OnFlyerStartLanding = 0x2228; // FScriptMulticastDelegate
			constexpr auto OnFlyerLanded = 0x2238; // FScriptMulticastDelegate
			constexpr auto OnFlyerLandingInterrupted = 0x2248; // FScriptMulticastDelegate
			constexpr auto bOnlyDrawFloatingHUDAsLocalPlayerController = 0x2258; // bool
			constexpr auto bHasPlayerController = 0x2259; // bool
			constexpr auto CopyDinoSettingsRangeMesh = 0x2260; // UStaticMeshComponent*
			constexpr auto GestationGenderOverride = 0x2268; // char
		}
		// Inheritance: APrimalCharacter > ACharacter > APawn > AActor > UObject
		namespace AShooterCharacter
		{
			constexpr auto SpawnIntroAnim1P = 0x1160; // UAnimMontage*
			constexpr auto RespawnIntroAnim1P = 0x1168; // UAnimMontage*
			constexpr auto ProneInAnim = 0x1170; // UAnimMontage*
			constexpr auto ProneOutAnim = 0x1178; // UAnimMontage*
			constexpr auto StartRidingAnim = 0x1180; // UAnimMontage*
			constexpr auto StopRidingAnim = 0x1188; // UAnimMontage*
			constexpr auto TalkingAnim = 0x1190; // UAnimMontage*
			constexpr auto VoiceTalkingAnim = 0x1198; // UAnimMontage*
			constexpr auto VoiceYellingAnim = 0x11a0; // UAnimMontage*
			constexpr auto EmoteAnims = 0x11a8; // TArray<UAnimMontage*>
			constexpr auto FireBallistaAnimation = 0x11b8; // UAnimMontage*
			constexpr auto ReloadBallistaAnimation = 0x11c0; // UAnimMontage*
			constexpr auto DraggingCharacterAnim = 0x11c8; // UAnimMontage*
			constexpr auto VivoxUsername = 0x11d0; // FString
			constexpr auto CurrentVoiceModeAsUInt32 = 0x11e0; // uint32_t
			constexpr auto VoiceModeForCullingTests = 0x11e4; // uint32_t
			constexpr auto bWasProne = 0x11f0; // bool
			constexpr auto bIsPreviewCharacter = 0x11f1; // bool
			constexpr auto WalkBobMagnitude = 0x1204; // float
			constexpr auto WalkBobInterpSpeed = 0x1208; // float
			constexpr auto TargetingTime = 0x120c; // float
			constexpr auto BobMaxMovementSpeed = 0x1210; // float
			constexpr auto WeaponBobMaxMovementSpeed = 0x1214; // float
			constexpr auto bIsViewingInventory = 0x1218; // char : 1
			constexpr auto bIsFemale = 0x1218; // char : 1
			constexpr auto bUseAlternateFallBlendspace = 0x1218; // char : 1
			constexpr auto bIsRiding = 0x1218; // char : 1
			constexpr auto bIsClimbing = 0x1218; // char : 1
			constexpr auto bIsIndoors = 0x1218; // char : 1
			constexpr auto bIsCrafting = 0x1218; // char : 1
			constexpr auto bIsTargeting = 0x1218; // char : 1
			constexpr auto bPlaySpawnAnim = 0x1219; // char : 1
			constexpr auto bPlayFirstSpawnAnim = 0x1219; // char : 1
			constexpr auto bNoPhysics = 0x1219; // char : 1
			constexpr auto bGaveInitialItems = 0x121a; // char : 1
			constexpr auto bReceivedGenesisSeasonPassItems = 0x121a; // char : 1
			constexpr auto DefaultWeapon = 0x1480; // AShooterWeapon*
			constexpr auto OverrideDefaultWeapon = 0x1488; // AShooterWeapon*
			constexpr auto MapWeapon = 0x1490; // AShooterWeapon*
			constexpr auto GPSWeapon = 0x1498; // AShooterWeapon*
			constexpr auto CompassWeapon = 0x14a0; // AShooterWeapon*
			constexpr auto PlayerName = 0x14b0; // FString
			constexpr auto RidingDino = 0x14c0; // TWeakObjectPtr<APrimalDinoCharacter>
			constexpr auto Mesh1P = 0x14c8; // USkeletalMeshComponent*
			constexpr auto LowerBodyPartRootBones = 0x14d0; // TArray<FName>
			constexpr auto FPVCameraAnimationPhysicsAsset = 0x14e0; // UPhysicsAsset*
			constexpr auto DropItemAnimation = 0x14e8; // UAnimMontage*
			constexpr auto ThrowItemAnimation = 0x14f0; // UAnimMontage*
			constexpr auto PickupItemAnimation = 0x14f8; // UAnimMontage*
			constexpr auto ActivateInventoryAnimation = 0x1500; // UAnimMontage*
			constexpr auto SurvivorProfilePreviewMesh = 0x1508; // USkeletalMeshComponent*
			constexpr auto LastDinoAimRotationOffset = 0x1510; // FRotator
			constexpr auto LastFiredBoomerang = 0x1528; // APrimalProjectileBoomerang*
			constexpr auto LastFiredGrapHook = 0x1530; // APrimalProjectileGrapplingHook*
			constexpr auto GrapplingHookCable = 0x1538; // UPrimalCableComponent*
			constexpr auto LastGrapHookAC = 0x1540; // UAudioComponent*
			constexpr auto _GrapHookCableObjectCount = 0x1548; // int32_t
			constexpr auto GrapHookDefaultOffset = 0x154c; // FVector
			constexpr auto GrapHookCableWidth = 0x1558; // float
			constexpr auto GrapHookMaterial = 0x1560; // UMaterialInterface*
			constexpr auto LadderLateralJumpVelocity = 0x1568; // float
			constexpr auto GrapHookPulledRopeDistance = 0x156c; // float
			constexpr auto GrapHookSyncTime = 0x1570; // float
			constexpr auto bReleasingGrapHook = 0x1574; // bool
			constexpr auto PlatformProfileName = 0x1578; // FString
			constexpr auto PlatformProfileID = 0x1588; // FUniqueNetIdRepl
			constexpr auto CharacterStatusStateSounds = 0x1598; // TArray<FPlayerStatusStateCharacterSound>
			constexpr auto CharacterStatusStateSoundComponent = 0x15a8; // UAudioComponent*
			constexpr auto DefaultTPVAnimBlueprint = 0x15e8; // UObject*
			constexpr auto WeaponAttachPoint = 0x15f0; // FName
			constexpr auto TargetingSpeedModifier = 0x15f8; // float
			constexpr auto LowHealthSound = 0x1600; // USoundCue*
			constexpr auto CallFollowAnim = 0x1608; // UAnimMontage*
			constexpr auto CallStayAnim = 0x1610; // UAnimMontage*
			constexpr auto CallFollowAnimSingle = 0x1618; // UAnimMontage*
			constexpr auto CallStayAnimSingle = 0x1620; // UAnimMontage*
			constexpr auto CallMoveToAnim = 0x1628; // UAnimMontage*
			constexpr auto CallAttackAnim = 0x1630; // UAnimMontage*
			constexpr auto LowHealthWarningPlayer = 0x1638; // UAudioComponent*
			constexpr auto CraftingMovementSpeedModifier = 0x1660; // float
			constexpr auto WeaponBobMagnitudes = 0x1664; // FVector
			constexpr auto WeaponBobPeriods = 0x1670; // FVector
			constexpr auto WeaponBobOffsets = 0x167c; // FVector
			constexpr auto WeaponBobMagnitudes_Targeting = 0x1688; // FVector
			constexpr auto WeaponBobPeriods_Targeting = 0x1694; // FVector
			constexpr auto WeaponBobOffsets_Targeting = 0x16a0; // FVector
			constexpr auto WeaponBobMinimumSpeed = 0x16ac; // float
			constexpr auto WeaponBobSpeedBase = 0x16b0; // float
			constexpr auto WeaponBobSpeedBaseFalling = 0x16b4; // float
			constexpr auto DefaultAttachmentInfos = 0x16c0; // TArray<FItemAttachmentInfo>
			constexpr auto StartCrouchSound = 0x16d0; // USoundCue*
			constexpr auto EndCrouchSound = 0x16d8; // USoundCue*
			constexpr auto StartProneSound = 0x16e0; // USoundCue*
			constexpr auto EndProneSound = 0x16e8; // USoundCue*
			constexpr auto NextInventoryWeapon = 0x16f0; // AShooterWeapon*
			constexpr auto PreMapWeaponItemNetID = 0x16f8; // FItemNetID
			constexpr auto ServerSeatedViewRotationYaw = 0x1700; // float
			constexpr auto ServerSeatedViewRotationPitch = 0x1704; // float
			constexpr auto CurrentWeapon = 0x1708; // AShooterWeapon*
			constexpr auto bDrawHealthBar = 0x1710; // char : 1
			constexpr auto HealthBarOffsetY = 0x1714; // float
			constexpr auto bUseCustomHealthBarColor = 0x1718; // char : 1
			constexpr auto bBPOverrideHealthBarOffset = 0x1718; // char : 1
			constexpr auto LinkedPlayerDataID = 0x1720; // uint64_t
			constexpr auto LastValidPlayerController = 0x1748; // TWeakObjectPtr<AShooterPlayerController>
			constexpr auto DrinkingAnimation = 0x1750; // UAnimMontage*
			constexpr auto IndoorsHyperthermiaInsulation = 0x1780; // float
			constexpr auto IndoorsHypothermiaInsulation = 0x1784; // float
			constexpr auto IndoorCheckInterval = 0x1788; // float
			constexpr auto PreRidingWeaponItemNetID = 0x1798; // FItemNetID
			constexpr auto PreInventoryWeaponItemNetID = 0x17a0; // FItemNetID
			constexpr auto OverrideAnimBlueprints = 0x17a8; // TArray<FOverrideAnimBlueprintEntry>
			constexpr auto ViewingInventoryAnimation = 0x17b8; // UAnimSequence*
			constexpr auto DefaultDinoRidingAnimation = 0x17c0; // UAnimSequence*
			constexpr auto DefaultDinoRidingMoveAnimation = 0x17c8; // UAnimSequence*
			constexpr auto DefaultSeatingAnimation = 0x17d0; // UAnimSequence*
			constexpr auto DefaultShieldAnimation = 0x17d8; // UAnimSequence*
			constexpr auto ShieldCoverAnimation = 0x17e0; // UAnimMontage*
			constexpr auto ShieldCoverAnimationForCrouch = 0x17e8; // UAnimMontage*
			constexpr auto bDisableLookYaw = 0x17f0; // char : 1
			constexpr auto bPlayingShieldCoverAnimation = 0x17f0; // char : 1
			constexpr auto bPlayingShieldCoverAnimationForCrouch = 0x17f0; // char : 1
			constexpr auto bTriggerBPUnstasis = 0x17f0; // char : 1
			constexpr auto bHatHidden = 0x17f1; // char : 1
			constexpr auto bAllowDPC = 0x17f1; // char : 1
			constexpr auto bIsConnected = 0x17f1; // char : 1
			constexpr auto bLockedToSeatingStructure = 0x17f1; // char : 1
			constexpr auto bPreventAllWeapons = 0x17f2; // char : 1
			constexpr auto bForceBuffAimOverride = 0x17f2; // char : 1
			constexpr auto EnemyPlayerMaxCursorHUDDistanceProne = 0x17f4; // float
			constexpr auto EnemyPlayerMaxCursorHUDDistanceCrouched = 0x17f8; // float
			constexpr auto EnemyPlayerMaxCursorHUDDistanceStanding = 0x17fc; // float
			constexpr auto CurrentPassengerSeatDefinition = 0x1808; // FSaddlePassengerSeatDefinition
			constexpr auto AnimsOverrideFrom = 0x18b0; // TArray<UAnimMontage*>
			constexpr auto AnimOverrideTo = 0x18c0; // TArray<UAnimMontage*>
			constexpr auto AnimSequencesOverrideFrom = 0x18d0; // TArray<UAnimSequence*>
			constexpr auto AnimSequenceOverrideTo = 0x18e0; // TArray<UAnimSequence*>
			constexpr auto BodyColors0x4 = 0x18f4; // FLinearColor
			constexpr auto FacialHairIndex = 0x1934; // char
			constexpr auto HeadHairIndex = 0x1935; // char
			constexpr auto RawBoneModifiers0x16 = 0x1938; // float
			constexpr auto LoggedOutTargetingDesirability = 0x19a0; // float
			constexpr auto bIsRainWatered = 0x19a4; // bool
			constexpr auto UniqueNetIdTypeHash = 0x19b4; // uint32_t
			constexpr auto SpawnAnim = 0x19c8; // UAnimMontage*
			constexpr auto FirstSpawnAnim = 0x19d0; // UAnimMontage*
			constexpr auto SavedLastTimeHadController = 0x19f0; // double
			constexpr auto LastTimeHadController = 0x19f8; // double
			constexpr auto LastTaggedTime = 0x1a00; // double
			constexpr auto LastTaggedTimeExtra = 0x1a08; // double
			constexpr auto LastTaggedTimeThird = 0x1a10; // double
			constexpr auto ExtraFloatVar = 0x1a18; // float
			constexpr auto ExtraVectorVar = 0x1a1c; // FVector
			constexpr auto ExtraExtraVectorVar = 0x1a28; // FVector
			constexpr auto ExtraNameVar = 0x1a34; // FName
			constexpr auto bIsOnSeatingStructure = 0x1a3c; // bool
			constexpr auto bIsControllingBallista = 0x1a3d; // bool
			constexpr auto bUseBallistaAimOffset = 0x1a3e; // bool
			constexpr auto CurrentControlledBallistaYaw = 0x1a40; // float
			constexpr auto bIsServerAdmin = 0x1a44; // bool
			constexpr auto SeatingStructure = 0x1a48; // TWeakObjectPtr<APrimalStructureSeating>
			constexpr auto SeatingStructureSeatNumber = 0x1a50; // int32_t
			constexpr auto ThrowCharacterSound = 0x1a70; // USoundBase*
			constexpr auto PlayerBadgeGroup = 0x1a88; // char
			constexpr auto bShouldInvertTurnInput = 0x1a89; // bool
			constexpr auto InventoryDragWeightScale = 0x1ac0; // float
			constexpr auto MountedCarryingDinoAnimation = 0x1ac8; // UAnimMontage*
			constexpr auto CuddleAnimation = 0x1ad0; // UAnimMontage*
			constexpr auto CharacterAdditiveStandingAnim = 0x1b18; // UAnimSequence*
			constexpr auto HeadHairComponent = 0x1b30; // USkeletalMeshComponent*
			constexpr auto FacialHairComponent = 0x1b38; // USkeletalMeshComponent*
			constexpr auto DefaultHeadHairMesh = 0x1b40; // USkeletalMesh*
			constexpr auto DefaultFacialHairMesh = 0x1b48; // USkeletalMesh*
			constexpr auto IntervalForFullHeadHairGrowth = 0x1b50; // float
			constexpr auto IntervalForFullFacialHairGrowth = 0x1b54; // float
			constexpr auto PercentOfFullFacialHairGrowth = 0x1b58; // float
			constexpr auto PercentOfFullHeadHairGrowth = 0x1b5c; // float
			constexpr auto OriginalHairColor = 0x1b60; // FLinearColor
			constexpr auto PostUpdateTick = 0x1b70; // FShooterCharacterPostUpdateTickFunction
			constexpr auto ReplicatedWeight = 0x1bcc; // float
			constexpr auto LocalCorpseEmitter = 0x1bd0; // UParticleSystemComponent*
			constexpr auto LocalDiedAtTime = 0x1bd8; // double
			constexpr auto ProneMoveSound = 0x1be8; // USoundBase*
			constexpr auto UploadEarliestValidTime = 0x1bf0; // double
			constexpr auto JunctionLinkCableParticle = 0x1c08; // UParticleSystemComponent*
			constexpr auto bPreventWeaponMovementAnims = 0x1c28; // bool
			constexpr auto CurrentItemBalloon = 0x1c2c; // TWeakObjectPtr<APrimalStructure>
			constexpr auto NotifyWeaponUnequipped = 0x1c38; // FScriptMulticastDelegate
			constexpr auto NotifyWeaponEquipped = 0x1c48; // FScriptMulticastDelegate
			constexpr auto NotifyWeaponFired = 0x1c58; // FScriptMulticastDelegate
			constexpr auto NotifyOnWeaponEquip = 0x1c68; // FScriptMulticastDelegate
			constexpr auto PlayerHexagonCount = 0x1c78; // int32_t
			constexpr auto DefaultHexagonAmountEarnedOnMissionCompletion = 0x1c7c; // int32_t
			constexpr auto MeshHeightAdjustment = 0x1c94; // float
			constexpr auto BuffExtraDamageMultiplier = 0x1c98; // float
			constexpr auto bNormalizeHeadPosition = 0x1c9c; // bool
			constexpr auto OnFirstPersonCameraView = 0x1ca0; // FScriptMulticastDelegate
			constexpr auto OnThirdPersonCameraView = 0x1cb0; // FScriptMulticastDelegate
			constexpr auto ExpectedBaseID = 0x1cc0; // uint32_t
			constexpr auto LastExpectedBaseTime = 0x1cc8; // double
			constexpr auto bPreventShowHUDOnSpawnIntroCompletion = 0x1cd0; // bool
			constexpr auto bHideFloatingHUD = 0x1cd4; // char : 1
			constexpr auto bForceDrawHUD = 0x1cd4; // char : 1
			constexpr auto bForceSeatingAnim = 0x1cd4; // char : 1
		}
		// Inheritance: APrimalStructureItemContainer > APrimalStructure > APrimalTargetableActor > AActor > UObject
		namespace APrimalStructureTurret
		{
			constexpr auto Target = 0xe08; // TWeakObjectPtr<AActor>
			constexpr auto AmmoItemTemplate = 0xe10; // UPrimalItem*
			constexpr auto MuzzleFlashEmitter = 0xe18; // APrimalEmitterSpawnable*
			constexpr auto FireInterval = 0xe20; // float
			constexpr auto LastFireTime = 0xe28; // double
			constexpr auto LastLongReloadStartTime = 0xe30; // double
			constexpr auto MaxFireYawDelta = 0xe38; // float
			constexpr auto MaxFirePitchDelta = 0xe3c; // float
			constexpr auto TargetingLocOffset = 0xe40; // FVector
			constexpr auto TargetingRotationInterpSpeed = 0xe4c; // float
			constexpr auto TargetingRanges0x3 = 0xe50; // float
			constexpr auto TargetingTraceOffset = 0xe5c; // FVector
			constexpr auto FireDamageType = 0xe68; // UDamageType*
			constexpr auto FireDamageAmount = 0xe70; // float
			constexpr auto FireDamageImpulse = 0xe74; // float
			constexpr auto TrailFX = 0xe78; // UParticleSystem*
			constexpr auto TurretAimRotOffset = 0xe80; // FRotator
			constexpr auto AimTargetLocOffset = 0xe8c; // FVector
			constexpr auto PlayerProneTargetOffset = 0xe98; // FVector
			constexpr auto AimSpread = 0xea4; // float
			constexpr auto bInWaterOnlyTargetWater = 0xea8; // char : 1
			constexpr auto bFireProjectiles = 0xea8; // char : 1
			constexpr auto bClientFireProjectile = 0xea8; // char : 1
			constexpr auto bIsTargeting = 0xea8; // char : 1
			constexpr auto bHasOmniDirectionalFire = 0xea8; // char : 1
			constexpr auto bOnlyUseAmmoOnDamage = 0xea8; // char : 1
			constexpr auto bUseNoAmmo = 0xea8; // char : 1
			constexpr auto bUseNoWarning = 0xea8; // char : 1
			constexpr auto bTurretIgnoreProjectiles = 0xea9; // char : 1
			constexpr auto bUseBPTurretPreventsTargeting = 0xea9; // char : 1
			constexpr auto bAimIgnoreSockets = 0xea9; // char : 1
			constexpr auto bUseAmmoFromNearbyContainer = 0xea9; // char : 1
			constexpr auto bUseMaxInventoryForAmmoContainerReload = 0xea9; // char : 1
			constexpr auto RangeSetting = 0xeaa; // char
			constexpr auto AISetting = 0xeab; // char
			constexpr auto WarningSetting = 0xeac; // char
			constexpr auto NumBullets = 0xeb0; // int32_t
			constexpr auto NumBulletsPerShot = 0xeb4; // int32_t
			constexpr auto LongAmmoReloadCD = 0xeb8; // int32_t
			constexpr auto MaxAmmoContainerReloadPercent = 0xebc; // float
			constexpr auto AlwaysEnableFastTurretTargetingOverVelocity = 0xec0; // float
			constexpr auto ProjectileClass = 0xec8; // AShooterProjectile*
			constexpr auto WarningExpirationTime = 0xed0; // float
			constexpr auto WarningEmitterShort = 0xed8; // APrimalEmitterSpawnable*
			constexpr auto WarningEmitterLong = 0xee0; // APrimalEmitterSpawnable*
			constexpr auto BatteryIntervalFromActivationBeforeFiring = 0xee8; // float
			constexpr auto MyChildEmitterTargetingEffect = 0xf00; // UChildActorComponent*
			constexpr auto DefaultTurretAimRotOffset = 0xf08; // FRotator
			constexpr auto MuzzleLocOffset = 0xf14; // FVector
			constexpr auto MagazineSize = 0xf28; // int32_t
			constexpr auto RangeToCheckForAmmo = 0xf2c; // float
			constexpr auto AmmoBoxReloadCooldown = 0xf30; // float
			constexpr auto CopySettingsRangeMesh = 0xf38; // UStaticMeshComponent*
		}
		// Inheritance: APrimalTargetableActor > AActor > UObject
		namespace APrimalStructure
		{
			constexpr auto OverlayTooltipPadding = 0x5a0; // FVector2D
			constexpr auto OverlayTooltipScale = 0x5a8; // FVector2D
			constexpr auto StructureTag = 0x5b0; // FName
			constexpr auto ConsumesPrimalItem = 0x5b8; // UPrimalItem*
			constexpr auto ScaleFactor = 0x5c0; // float
			constexpr auto StructureSnapTypeFlags = 0x5c4; // int32_t
			constexpr auto Variants = 0x5c8; // TArray<FStructureVariant>
			constexpr auto CurrentVariant = 0x5d8; // int32_t
			constexpr auto bForceAllowWallAttachments = 0x5dc; // char : 1
			constexpr auto bIsBed = 0x5dc; // char : 1
			constexpr auto bUseBPRefreshedStructureColors = 0x5dc; // char : 1
			constexpr auto bIsFlipped = 0x5dc; // char : 1
			constexpr auto bIsRepairing = 0x5dc; // char : 1
			constexpr auto bShowInPlaceableList = 0x5dc; // char : 1
			constexpr auto bIsFlippable = 0x5dc; // char : 1
			constexpr auto bPlacementUsesWeaponClipAmmo = 0x5dd; // char : 1
			constexpr auto bAbsoluteTakeAnythingAsGround = 0x5dd; // char : 1
			constexpr auto bIgnoreDyingWhenDemolished = 0x5dd; // char : 1
			constexpr auto bUseBPPostLoadedFromSaveGame = 0x5dd; // char : 1
			constexpr auto bClientAddPlacedOnFloorStructures = 0x5dd; // char : 1
			constexpr auto bDestroyOnStasis = 0x5dd; // char : 1
			constexpr auto bUseBPPreventStasis = 0x5dd; // char : 1
			constexpr auto bTriggerBPStasis = 0x5dd; // char : 1
			constexpr auto bPlacementShouldNotBeHorizontal = 0x5de; // char : 1
			constexpr auto bDisablePlacementOnDynamicsFoliageAndDoors = 0x5de; // char : 1
			constexpr auto bSeatedDisableCollisionCheck = 0x5de; // char : 1
			constexpr auto bUseBPIsAllowedToBuildEx = 0x5de; // char : 1
			constexpr auto bUseBPHandleStructureEnabled = 0x5de; // char : 1
			constexpr auto bForcePlacingOnVerticalGround = 0x5de; // char : 1
			constexpr auto bRequiresGroundedPlacement = 0x5de; // char : 1
			constexpr auto bAllowPlacingOnOtherTeamStructuresPvPOnly = 0x5de; // char : 1
			constexpr auto bForceUseSkeletalMeshComponent = 0x5df; // char : 1
			constexpr auto UseBPOverrideTargetLocation = 0x5df; // char : 1
			constexpr auto bOverrideFoundationSupportDistance = 0x5df; // char : 1
			constexpr auto PlacementOffsetForVerticalGround = 0x5e0; // float
			constexpr auto bWasAttachedToPawn = 0x5e4; // char : 1
			constexpr auto bUseAdvancedRotationPlacement = 0x5e4; // char : 1
			constexpr auto bDontOverrideCollisionProfile = 0x5e4; // char : 1
			constexpr auto bDidSpawnEffects = 0x5e4; // char : 1
			constexpr auto bPendingRemoval = 0x5e4; // char : 1
			constexpr auto bPreventDinoPlacementDistanceIncrease = 0x5e4; // char : 1
			constexpr auto bForceDisableFootSound = 0x5e4; // char : 1
			constexpr auto bTraceThruEncroachmentPoints = 0x5e4; // char : 1
			constexpr auto bRootFoundationLimitBuildArea = 0x5e5; // char : 1
			constexpr auto bCenterOffscreenFloatingHUDWidgets = 0x5e5; // char : 1
			constexpr auto PlacementInitialTracePointOffsetForVerticalGround = 0x5e8; // float
			constexpr auto StructuresAllowedToBeVerticalGround = 0x5f0; // TArray<APrimalStructure*>
			constexpr auto TraceDistanceFromActorToWallVerticalGround = 0x600; // float
			constexpr auto PlacementHitLocOffset = 0x604; // FVector
			constexpr auto PlacementEncroachmentCheckOffset = 0x610; // FVector
			constexpr auto PlacementEncroachmentBoxExtent = 0x61c; // FVector
			constexpr auto PlacementTraceScale = 0x628; // FVector
			constexpr auto SnapAlternatePlacementTraceScale = 0x634; // FVector
			constexpr auto PlacementRotOffset = 0x640; // FRotator
			constexpr auto PlacementTraceRotOffset = 0x64c; // FRotator
			constexpr auto SnappingRotationOffset = 0x658; // FRotator
			constexpr auto bIsFoundation = 0x664; // char : 1
			constexpr auto bForcePlacingOnGround = 0x664; // char : 1
			constexpr auto bTakeAnythingAsGround = 0x664; // char : 1
			constexpr auto bAllowAttachToSaddle = 0x664; // char : 1
			constexpr auto bOnlyAllowPlacementInWater = 0x664; // char : 1
			constexpr auto bRequireFreePrimarySnappedStructure = 0x664; // char : 1
			constexpr auto bPlacementTraceIgnorePawns = 0x664; // char : 1
			constexpr auto bAllowAttachToPawn = 0x664; // char : 1
			constexpr auto bForceCheckNearbyEnemyFoundation = 0x665; // char : 1
			constexpr auto bIsFloor = 0x665; // char : 1
			constexpr auto bForceFloorCollisionGroup = 0x665; // char : 1
			constexpr auto bIsWall = 0x665; // char : 1
			constexpr auto bDisallowPreventCropsBiomes = 0x665; // char : 1
			constexpr auto bCanBeRepaired = 0x665; // char : 1
			constexpr auto bReturnDamageOnHitFromPawn = 0x665; // char : 1
			constexpr auto bPreventStasis = 0x665; // char : 1
			constexpr auto bRequiresToBeInsideZoneVolume = 0x666; // char : 1
			constexpr auto bIsCoreStructure = 0x666; // char : 1
			constexpr auto bDeprecateStructure = 0x666; // char : 1
			constexpr auto bIsFenceFoundation = 0x666; // char : 1
			constexpr auto bWasPlacementSnapped = 0x666; // char : 1
			constexpr auto bUseOnlyBlockSelfTraceChannel = 0x666; // char : 1
			constexpr auto bUseFenceFoundation = 0x666; // char : 1
			constexpr auto bAllowUseFromRidingDino = 0x666; // char : 1
			constexpr auto bAllowLoadBearing = 0x667; // char : 1
			constexpr auto bIsEnvironmentStructure = 0x667; // char : 1
			constexpr auto bUseBPOnVariantSwitch = 0x667; // char : 1
			constexpr auto RepairCheckInterval = 0x66c; // float
			constexpr auto PlacementFloorCheckZExtentUp = 0x670; // float
			constexpr auto RepairPercentPerInterval = 0x674; // float
			constexpr auto DecayDestructionPeriod = 0x678; // float
			constexpr auto PreventPlacingOnFloorClasses = 0x680; // TArray<APrimalStructure*>
			constexpr auto AllowPlacingOnFloorClasses = 0x690; // TArray<APrimalStructure*>
			constexpr auto MyStaticMesh = 0x6a0; // UStaticMeshComponent*
			constexpr auto CosmeticVariantStaticMesh = 0x6a8; // UStaticMeshComponent*
			constexpr auto MyRootTransform = 0x6b0; // USceneComponent*
			constexpr auto bUseBPAllowSnapRotationForStructure = 0x6b8; // char : 1
			constexpr auto bSnappingRequiresNearbyFoundation = 0x6b8; // char : 1
			constexpr auto bAllowSnapRotation = 0x6b8; // char : 1
			constexpr auto bDisablePlacementOnStructureFloors = 0x6b8; // char : 1
			constexpr auto bRequiresSnapping = 0x6b8; // char : 1
			constexpr auto bUsePlacementCollisionCheck = 0x6b8; // char : 1
			constexpr auto bDestroyStructureIfFloorDestroyed = 0x6b8; // char : 1
			constexpr auto bRequiresPlacementOnStructureFloors = 0x6b8; // char : 1
			constexpr auto bPlacementChooseRotation = 0x6b9; // char : 1
			constexpr auto bRequiresPlacingOnWall = 0x6b9; // char : 1
			constexpr auto bSnapRequiresPlacementOnGround = 0x6b9; // char : 1
			constexpr auto bAllowSnapOntoSameLocation = 0x6b9; // char : 1
			constexpr auto bOnlyFoundationIfSnappedToFoundation = 0x6b9; // char : 1
			constexpr auto bFoundationRequiresGroundTrace = 0x6b9; // char : 1
			constexpr auto bPlacingOnGroundRequiresNoStructure = 0x6b9; // char : 1
			constexpr auto bTakeGroundNormal = 0x6b9; // char : 1
			constexpr auto bIsSPlusStructure = 0x6ba; // char : 1
			constexpr auto bPreventDefaultVariant = 0x6ba; // char : 1
			constexpr auto bUsingStructureColors = 0x6ba; // char : 1
			constexpr auto bDebug = 0x6ba; // char : 1
			constexpr auto bUseFadeInEffect = 0x6ba; // char : 1
			constexpr auto bFinalPlacementDontAdjustForMaxRange = 0x6ba; // char : 1
			constexpr auto bTakeGroundNormalDirectly = 0x6ba; // char : 1
			constexpr auto bAllowStructureColors = 0x6ba; // char : 1
			constexpr auto bAllowPickingUpStructureAfterPlacement = 0x6bb; // char : 1
			constexpr auto bDisablePickingUpStructureAfterPlacementOnTryMultiUse = 0x6bb; // char : 1
			constexpr auto bUseBlueprintAnimNotifyCustomEvent = 0x6bb; // char : 1
			constexpr auto TraceIgnoreStructuresWithTypeFlags = 0x6bc; // int32_t
			constexpr auto bStationaryStructure = 0x6c0; // char : 1
			constexpr auto bCanDemolish = 0x6c0; // char : 1
			constexpr auto bIgnorePawns = 0x6c0; // char : 1
			constexpr auto bIgnoreSnappedToOtherFloorStructures = 0x6c0; // char : 1
			constexpr auto bForceBlockIK = 0x6c0; // char : 1
			constexpr auto bForceSnappedStructureToGround = 0x6c0; // char : 1
			constexpr auto bEnforceStructureLinkExactRotation = 0x6c0; // char : 1
			constexpr auto bUsesHealth = 0x6c0; // char : 1
			constexpr auto bAllowEnemyDemolish = 0x6c1; // char : 1
			constexpr auto bIgnoreMaxStructuresInRange = 0x6c1; // char : 1
			constexpr auto bDontActuallySnapJustPlacement = 0x6c1; // char : 1
			constexpr auto bPreventPlacementInWater = 0x6c1; // char : 1
			constexpr auto bForcePreventEnemyStructuresNearby = 0x6c1; // char : 1
			constexpr auto bDontSetStructureCollisionChannels = 0x6c1; // char : 1
			constexpr auto bAllowInRegularStructurePreventionZones = 0x6c1; // char : 1
			constexpr auto bAllowPlacingOnOtherTeamStructures = 0x6c1; // char : 1
			constexpr auto bPaintingUseSkeletalMesh = 0x6c2; // char : 1
			constexpr auto bUsesPaintingComponent = 0x6c2; // char : 1
			constexpr auto bCanBuildUpon = 0x6c2; // char : 1
			constexpr auto bHasResetDecayTime = 0x6c2; // char : 1
			constexpr auto bForceAllowInPreventionVolumes = 0x6c2; // char : 1
			constexpr auto bForceCreateDynamicMaterials = 0x6c2; // char : 1
			constexpr auto bUseBPGetInfoFromConsumedItemForPlacedStructure = 0x6c2; // char : 1
			constexpr auto bImmuneToAutoDemolish = 0x6c2; // char : 1
			constexpr auto bUseBPUpdatedHealth = 0x6c3; // char : 1
			constexpr auto bSnapToWaterSurface = 0x6c3; // char : 1
			constexpr auto bPerInstanceSnapPoints = 0x6c3; // char : 1
			constexpr auto bUseBPOnStructurePickup = 0x6c3; // char : 1
			constexpr auto bUseBPTreatAsFoundationForSnappedStructure = 0x6c3; // char : 1
			constexpr auto bAllowTargetingByCorruptDinos = 0x6c3; // char : 1
			constexpr auto bIgnoreMaxStructuresInSmallRadius = 0x6c3; // char : 1
			constexpr auto SnapPoints = 0x6c8; // TArray<FPrimalStructureSnapPoint>
			constexpr auto bTraceCheckOnlyUseStructuresWithTypeFlags = 0x6d8; // int32_t
			constexpr auto AllowStructureColorSets0x6 = 0x6dc; // char
			constexpr auto WaterVolumeCheckPointOffset = 0x6e4; // FVector
			constexpr auto WaterPlacementMinimumWaterHeight = 0x6f0; // float
			constexpr auto PlacementMaxZDelta = 0x6f4; // float
			constexpr auto PlacementChooseRotationMaxRangeOverride = 0x6f8; // float
			constexpr auto PlacementMaxRange = 0x6fc; // float
			constexpr auto MaxSnapLocRange = 0x700; // float
			constexpr auto SnapOverlapCheckRadius = 0x704; // float
			constexpr auto MaximumFoundationSupport2DBuildDistance = 0x708; // float
			constexpr auto PlacementFloorCheckZExtent = 0x70c; // float
			constexpr auto LastHealthPercentage = 0x710; // float
			constexpr auto TakeGroundNormalRotationOffset = 0x714; // FRotator
			constexpr auto DemolishGiveItemCraftingResourcePercentage = 0x720; // float
			constexpr auto bDestroyOnStasisUnlessPrevented = 0x724; // char : 1
			constexpr auto AllowReplacementByStructureClassType = 0x728; // APrimalStructure*
			constexpr auto PreventReplacementOfStructureClassType = 0x730; // APrimalStructure*
			constexpr auto MaximumHeightAboveWorldGround = 0x738; // float
			constexpr auto MaximumHeightUnderWorldMaxKillZ = 0x73c; // float
			constexpr auto PreviewCameraRotation = 0x740; // FRotator
			constexpr auto PreviewCameraPivotOffset = 0x74c; // FVector
			constexpr auto PreviewCameraDistanceScaleFactor = 0x758; // float
			constexpr auto PreviewCameraDefaultZoomMultiplier = 0x75c; // float
			constexpr auto PreviewCameraMaxZoomMultiplier = 0x760; // float
			constexpr auto ReturnDamageAmount = 0x764; // float
			constexpr auto StructureRangeTypeFlag = 0x768; // int32_t
			constexpr auto LimitMaxStructuresInRangeTypeFlag = 0x76c; // int32_t
			constexpr auto ReturnDamageImpulse = 0x770; // float
			constexpr auto ReturnDamageType = 0x778; // UDamageType*
			constexpr auto ReturnDamageExcludeIncomingTypes = 0x780; // TArray<UDamageType*>
			constexpr auto ReturnDamageOnlyForIncomingTypes = 0x790; // TArray<UDamageType*>
			constexpr auto OwningPlayerID = 0x7a0; // int32_t
			constexpr auto OwningPlayerName = 0x7a8; // FString
			constexpr auto LastInAllyRangeTime = 0x7b8; // double
			constexpr auto PickupAllowedBeforeNetworkTime = 0x7c0; // double
			constexpr auto DecayDestructionPeriodMultiplier = 0x7c8; // float
			constexpr auto SaddleDino = 0x7cc; // TWeakObjectPtr<APrimalDinoCharacter>
			constexpr auto LatchedDinos = 0x7d8; // TArray<APrimalDinoCharacter*>
			constexpr auto PreviewMaterial = 0x7e8; // UMaterialInterface*
			constexpr auto PreviewMaterialInstances = 0x7f0; // TArray<UMaterialInstanceDynamic*>
			constexpr auto PreviewMaterialColorParamName = 0x800; // FName
			constexpr auto PlacementTraceDirections = 0x808; // TArray<FVector>
			constexpr auto LinkedStructures = 0x818; // TArray<APrimalStructure*>
			constexpr auto LinkedStructuresID = 0x828; // TArray<uint32_t>
			constexpr auto StructuresPlacedOnFloor = 0x838; // TArray<APrimalStructure*>
			constexpr auto SnapToStructureTypesToExclude = 0x848; // TArray<APrimalStructure*>
			constexpr auto SnapFromStructureTypesToExclude = 0x858; // TArray<APrimalStructure*>
			constexpr auto SnapToStructureTagsToExclude = 0x868; // TArray<FName>
			constexpr auto SnapFromStructureTagsToExclude = 0x878; // TArray<FName>
			constexpr auto PlacedOnFloorStructure = 0x888; // APrimalStructure*
			constexpr auto PrimarySnappedStructureChild = 0x890; // APrimalStructure*
			constexpr auto PrimarySnappedStructureParent = 0x898; // APrimalStructure*
			constexpr auto OwnerName = 0x8a0; // FString
			constexpr auto StructureColors0x6 = 0x8b0; // int16_t
			constexpr auto AttachedTo = 0x8c0; // APawn*
			constexpr auto AttachedTransponder = 0x8c8; // APrimalStructureExplosiveTransGPS*
			constexpr auto StructureID = 0x8d0; // uint32_t
			constexpr auto AttachedToDinoID1 = 0x8d4; // uint32_t
			constexpr auto OnlyAllowStructureClassesToAttach = 0x8d8; // TArray<APrimalStructure*>
			constexpr auto OnlyAllowStructureClassesFromAttach = 0x8e8; // TArray<APrimalStructure*>
			constexpr auto StructureIconMaterial = 0x920; // UMaterialInterface*
			constexpr auto AdvancedRotationPlacementOffset = 0x928; // FVector
			constexpr auto SpawnEmitter = 0x938; // APrimalEmitterSpawnable*
			constexpr auto SpawnEmitterLocationOffset = 0x940; // FVector
			constexpr auto SpawnEmitterRotationOffset = 0x94c; // FRotator
			constexpr auto PickupGivesItem = 0x958; // UPrimalItem*
			constexpr auto ExcludeInStructuresRadius = 0x960; // float
			constexpr auto ExcludeInStructuresRadiusClasses = 0x968; // TArray<APrimalStructure*>
			constexpr auto PaintingComponent = 0x990; // UStructurePaintingComponent*
			constexpr auto PreventBuildStructureReasonStringOverrides = 0x998; // TArray<FString>
			constexpr auto FloatingHudLocTextOffset = 0x9a8; // FVector
			constexpr auto ForceLimitStructuresInRange = 0x9b8; // int32_t
			constexpr auto bForcePersonalStructureOwnership = 0x9bc; // char : 1
			constexpr auto bBPOverrideAllowStructureAccess = 0x9bc; // char : 1
			constexpr auto bBPOverideDemolish = 0x9bc; // char : 1
			constexpr auto bUseBPOnDemolish = 0x9bc; // char : 1
			constexpr auto bBPOverrideAllowSnappingWith = 0x9bc; // char : 1
			constexpr auto bBPOverrideAllowSnappingWithButAlsoCallSuper = 0x9bc; // char : 1
			constexpr auto bUseBPOnLinkedStructureDestroyed = 0x9bc; // char : 1
			constexpr auto bPreventAttachToSaddle = 0x9bc; // char : 1
			constexpr auto bBPOverrideSnappedToTransform = 0x9bd; // char : 1
			constexpr auto bBPOverridePlacementRotation = 0x9bd; // char : 1
			constexpr auto bBPOverrideSnappedFromTransform = 0x9bd; // char : 1
			constexpr auto bForceBlockStationaryTraces = 0x9bd; // char : 1
			constexpr auto bForceGroundForFoundation = 0x9bd; // char : 1
			constexpr auto bAttachToStaticMeshSocketRotation = 0x9bd; // char : 1
			constexpr auto bAttachToStaticMeshSocket = 0x9bd; // char : 1
			constexpr auto bUseTribeGroupStructureRank = 0x9bd; // char : 1
			constexpr auto bDemolishJustDestroy = 0x9be; // char : 1
			constexpr auto bDisableSnapStructure = 0x9be; // char : 1
			constexpr auto bHighPriorityDemolish = 0x9be; // char : 1
			constexpr auto bDisableStructureOnElectricStorm = 0x9be; // char : 1
			constexpr auto bStructureUseAltCollisionChannel = 0x9be; // char : 1
			constexpr auto bIsPreviewStructure = 0x9be; // char : 1
			constexpr auto bNoCollision = 0x9be; // char : 1
			constexpr auto bTriggerBPUnstasis = 0x9bf; // char : 1
			constexpr auto bBlueprintDrawHUD = 0x9bf; // char : 1
			constexpr auto bBlueprintDrawPreviewHUD = 0x9bf; // char : 1
			constexpr auto bUsesWorldSpaceMaterial = 0x9bf; // char : 1
			constexpr auto bForceIgnoreStationaryObjectTrace = 0x9bf; // char : 1
			constexpr auto bForceAllowNearSupplyCrateSpawns = 0x9bf; // char : 1
			constexpr auto bBPPostSetStructureCollisionChannels = 0x9bf; // char : 1
			constexpr auto bPickupGiveItemRequiresAccess = 0x9bf; // char : 1
			constexpr auto bUseBPAllowPickupGiveItem = 0x9c0; // char : 1
			constexpr auto bPreventAttachedChildStructures = 0x9c0; // char : 1
			constexpr auto PlacementMaterialForwardDirIndex = 0x9c4; // int32_t
			constexpr auto bIgnoredByTargeting = 0x9c8; // char : 1
			constexpr auto bStructuresInRangeTypeFlagUseAltCollisionChannel = 0x9c8; // char : 1
			constexpr auto bPreventPreviewIfWeaponPlaced = 0x9c8; // char : 1
			constexpr auto ForcePreventPlacingInOfflineRaidStructuresRadius = 0x9cc; // float
			constexpr auto AttachToStaticMeshSocketNameBase = 0x9d0; // FName
			constexpr auto StructureHarvestingComponent = 0x9d8; // UPrimalHarvestingComponent*
			constexpr auto MyStructureHarvestingComponent = 0x9e0; // UPrimalHarvestingComponent*
			constexpr auto ItemsUseAlternateActorClassAttachment = 0x9f8; // AActor*
			constexpr auto UnstasisAutoDestroyAfterTime = 0xa00; // float
			constexpr auto TribeGroupStructureRank = 0xa04; // char
			constexpr auto PreventSaddleDinoClasses = 0xa08; // TArray<APrimalDinoCharacter*>
			constexpr auto AllowSaddleDinoClasses = 0xa18; // TArray<APrimalDinoCharacter*>
			constexpr auto PlaceOnWallUseStaticMeshTag = 0xa28; // FName
			constexpr auto SnapStructureClass = 0xa30; // APrimalStructure*
			constexpr auto DemolishActivationTime = 0xa38; // float
			constexpr auto GroundEncroachmentCheckLocationOffset = 0xa3c; // FVector
			constexpr auto StructureMinAllowedVersion = 0xa48; // int32_t
			constexpr auto SavedStructureMinAllowedVersion = 0xa4c; // int32_t
			constexpr auto OverrideEnemyFoundationPreventionRadius = 0xa50; // float
			constexpr auto OverridePVPEnemyFoundationPreventionRadius = 0xa54; // float
			constexpr auto ExpandEnemyFoundationPreventionRadius = 0xa58; // float
			constexpr auto BedID = 0xa5c; // int32_t
			constexpr auto ForceAllowWallAttachmentClasses = 0xa60; // TArray<APrimalStructure*>
			constexpr auto LimitMaxStructuresInRangeRadius = 0xa70; // float
			constexpr auto FastDecayLinkedStructureClasses = 0xa78; // TArray<APrimalStructure*>
			constexpr auto PlacementMaxZAbovePlayerHeight = 0xa88; // float
			constexpr auto OverrideTargetComponents = 0xa98; // TArray<USceneComponent*>
			constexpr auto OverrideApproachRadius = 0xaa8; // float
			constexpr auto OwnerMission = 0xab0; // AMissionType*
			constexpr auto bBPCheckItemRequiementsToBuild = 0xab8; // char : 1
			constexpr auto PlaceUsingItemID = 0xabc; // FItemNetID
			constexpr auto CustomDataModifiedOnStructurePickup = 0xac8; // TArray<FName>
			constexpr auto bUseBPGetAggroDinoOnDamageSettings = 0xad8; // char : 1
			constexpr auto bCanAttachToExosuit = 0xad8; // char : 1
			constexpr auto bCanBeStoredByExosuit = 0xad8; // char : 1
			constexpr auto bStructureIgnoreDying = 0xad8; // char : 1
			constexpr auto bClientReceivedStructuresPlacedOnFloor = 0xad8; // char : 1
			constexpr auto bHasAnyStructuresPlacedOnFloor = 0xad8; // char : 1
			constexpr auto bUseBPPreventCharacterBasing = 0xad8; // char : 1
		}
		// Inheritance: AShooterWeapon_Projectile > AShooterWeapon > AActor > UObject
		namespace AWeapTekRifle_C
		{
			constexpr auto OverheatingAmount = 0xe30; // float
			constexpr auto LocalOverheatingAmount = 0xe34; // float
			constexpr auto OverheatReducePerSecond = 0xe38; // float
			constexpr auto OverheatReduceAfterShotInterval = 0xe3c; // float
			constexpr auto OverheatedDelayInterval = 0xe40; // float
			constexpr auto LastOverheatedTime = 0xe48; // double
			constexpr auto OverheatAmountPerShot = 0xe50; // float
			constexpr auto LastShotTime = 0xe58; // double
			constexpr auto OverheatedAnim = 0xe60; // FWeaponAnim
			constexpr auto LastReplicatedOverheatingAmount = 0xe70; // float
			constexpr auto SecondaryMuzzleAttachName = 0xe74; // FName
			constexpr auto NotOverheatedAnim = 0xe80; // FWeaponAnim
			constexpr auto LastTimeInOverheated = 0xe90; // double
			constexpr auto TimeAfterOverheatingToAllowFire = 0xe98; // float
			constexpr auto bIsUsingPrimaryMuzzle = 0xe9c; // bool
			constexpr auto PrimaryMuzzleAttachName = 0xea0; // FName
			constexpr auto TargetFOV = 0xea8; // float
			constexpr auto CallFunc_PlayWeaponAnimation_ReturnValue = 0xeac; // float
			constexpr auto CallFunc_IsLocallyControlled_ReturnValue = 0xeb0; // bool
			constexpr auto CallFunc_PlayWeaponAnimation_ReturnValue2 = 0xeb4; // float
			constexpr auto CallFunc_GreaterEqual_FloatFloat_ReturnValue = 0xeb8; // bool
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue = 0xebc; // float
			constexpr auto CallFunc_FClamp_ReturnValue = 0xec0; // float
			constexpr auto CallFunc_GetGameTimeInSeconds_ReturnValue = 0xec8; // double
			constexpr auto CallFunc_GetIs_Overheated_bRetOverheated = 0xed0; // bool
		}
		namespace AWeapTekSniper_C
		{
			constexpr auto OverheatSoundLoop = 0xe28; // UAudioComponent*
			constexpr auto XRayDeactivationSound = 0xe30; // UAudioComponent*
			constexpr auto XRayActiveSound = 0xe38; // UAudioComponent*
			constexpr auto FadeOutOverheatParticles_RateScale_FF98F06349E45EAC1393FE991ED70D4A = 0xe40; // float
			constexpr auto FadeOutOverheatParticles__Direction_FF98F06349E45EAC1393FE991ED70D4A = 0xe44; // ETimelineDirection
			constexpr auto FadeOutOverheatParticles = 0xe48; // UTimelineComponent*
			constexpr auto ImpactEffectEntryHit = 0xe50; // AShooterImpactEffect*
			constexpr auto ImpactEffectExitHit = 0xe58; // AShooterImpactEffect*
			constexpr auto OverheatingAmount = 0xe60; // float
			constexpr auto LocalOverheatingAmount = 0xe64; // float
			constexpr auto LastOverheatedTime = 0xe68; // double
			constexpr auto OverheatAmountPerShot = 0xe70; // float
			constexpr auto LastShotTime = 0xe78; // double
			constexpr auto LastReplicatedOverheatingAmount = 0xe80; // float
			constexpr auto LastTimeInOverheated = 0xe88; // double
			constexpr auto OverheatDuration = 0xe90; // float
			constexpr auto TargetFOV = 0xe94; // float
			constexpr auto XRayAmmoToUsePerInterval = 0xe98; // int32_t
			constexpr auto XRayAmmoConsumptionInterval = 0xe9c; // float
			constexpr auto LastXRayElementConsumption = 0xea0; // double
			constexpr auto Scoped = 0xea8; // bool
			constexpr auto LastIsConsumingElement = 0xea9; // bool
			constexpr auto WeaponEmissiveColorNormal = 0xeac; // FLinearColor
			constexpr auto WeaponEmissiveColorOverheat = 0xebc; // FLinearColor
			constexpr auto WeaponEmissiveStrengthNormalMin = 0xecc; // float
			constexpr auto WeaponEmissiveStrengthNormalMax = 0xed0; // float
			constexpr auto WeaponEmissiveStrengthOverheatMin = 0xed4; // float
			constexpr auto WeaponEmissiveStrengthOverheatMax = 0xed8; // float
			constexpr auto OverheatedAnim_In = 0xee0; // FWeaponAnim
			constexpr auto OverheatedAnim_Out = 0xef0; // FWeaponAnim
			constexpr auto AllowScopeDuringOverheat = 0xf00; // bool
			constexpr auto XRayIsActive = 0xf01; // bool
			constexpr auto IgnoreAllDamageOnHit = 0xf08; // TArray<AActor*>
			constexpr auto MinAmountOfAmmoAllowedToFire = 0xf18; // int32_t
			constexpr auto OverheatCompleted = 0xf1c; // bool
		}
		// Inheritance: AActor > UObject
		namespace AShooterWeapon
		{
			constexpr auto EquipTime = 0x468; // float
			constexpr auto OverridePawnTPVAnimBlueprint = 0x470; // UObject*
			constexpr auto OverrideProneInAnim = 0x478; // UAnimMontage*
			constexpr auto OverrideProneOutAnim = 0x480; // UAnimMontage*
			constexpr auto OverrideJumpAnim = 0x488; // UAnimMontage*
			constexpr auto OverrideLandedAnim = 0x490; // UAnimMontage*
			constexpr auto OverrideRiderAnimSequenceFrom = 0x498; // TArray<UAnimSequence*>
			constexpr auto OverrideRiderAnimSequenceTo = 0x4a8; // TArray<UAnimSequence*>
			constexpr auto PrimaryIcon = 0x4b8; // FCanvasIcon
			constexpr auto SecondaryIcon = 0x4d0; // FCanvasIcon
			constexpr auto PrimaryClipIcon = 0x4e8; // FCanvasIcon
			constexpr auto SecondaryClipIcon = 0x500; // FCanvasIcon
			constexpr auto ItemDurabilityToConsumePerMeleeHit = 0x518; // float
			constexpr auto AmmoIconsCount = 0x51c; // float
			constexpr auto TargetingTooltipCheckRange = 0x520; // float
			constexpr auto bUseDinoRangeForTooltip = 0x524; // char : 1
			constexpr auto PrimaryClipIconOffset = 0x528; // int32_t
			constexpr auto SecondaryClipIconOffset = 0x52c; // int32_t
			constexpr auto TargetingInfoToolTipWidget = 0x530; // UTargetingInfoToolTipWidget*
			constexpr auto TargetingInfoTooltipPadding = 0x538; // FVector2D
			constexpr auto TargetingInfoTooltipScale = 0x540; // FVector2D
			constexpr auto bOnlyPassiveDurabilityWhenAccessoryActive = 0x548; // bool
			constexpr auto bDisableShooterOnElectricStorm = 0x549; // bool
			constexpr auto OverrideAttachPoint = 0x54c; // FName
			constexpr auto FPVRelativeLocation = 0x554; // FVector
			constexpr auto FPVRelativeRotation = 0x560; // FRotator
			constexpr auto FPVRelativeLocation_Targeting = 0x56c; // FVector
			constexpr auto FPVRelativeRotation_Targeting = 0x578; // FRotator
			constexpr auto FPVEnterTargetingInterpSpeed = 0x584; // float
			constexpr auto FPVExitTargetingInterpSpeed = 0x588; // float
			constexpr auto EndDoMeleeSwingTime = 0x58c; // float
			constexpr auto FPVLookAtMaximumOffset = 0x590; // FRotator
			constexpr auto FPVLookAtSpeedBase = 0x59c; // FRotator
			constexpr auto FPVLookAtInterpSpeed = 0x5a8; // FRotator
			constexpr auto FPVLookAtMaximumOffset_Targeting = 0x5b4; // FRotator
			constexpr auto FPVLookAtSpeedBase_Targeting = 0x5c0; // FRotator
			constexpr auto FPVLookAtInterpSpeed_Targeting = 0x5cc; // FRotator
			constexpr auto FPVImmobilizedLocationOffset = 0x5d8; // FVector
			constexpr auto FPVImmobilizedRotationOffset = 0x5e4; // FRotator
			constexpr auto FPVImmobilizedInterpSpeed = 0x5f0; // float
			constexpr auto bUseBlueprintAnimNotifications = 0x5f8; // bool
			constexpr auto MeleeSwingSockets = 0x600; // TArray<FName>
			constexpr auto AllowMeleeTimeBeforeAnimationEnd = 0x610; // float
			constexpr auto AssociatedPrimalItem = 0x618; // UPrimalItem*
			constexpr auto AssociatedMission = 0x620; // AMissionType*
			constexpr auto bCanBeUsedAsEquipment = 0x628; // bool
			constexpr auto AssociatedItemNetInfo = 0x630; // FItemNetInfo
			constexpr auto Mesh3P = 0x7e0; // USkeletalMeshComponent*
			constexpr auto WeaponAmmoItemTemplate = 0x7e8; // UPrimalItem*
			constexpr auto WeaponConfig = 0x7f0; // FWeaponData
			constexpr auto AnimatedCamera = 0x820; // ACameraActor*
			constexpr auto MyPawn = 0x8a0; // AShooterCharacter*
			constexpr auto Mesh1P = 0x8a8; // USkeletalMeshComponent*
			constexpr auto FireAC = 0x8b0; // UAudioComponent*
			constexpr auto MuzzleAttachPoint = 0x8b8; // FName
			constexpr auto MuzzleFX = 0x8c0; // UParticleSystem*
			constexpr auto MuzzleFX_FPV = 0x8c8; // UParticleSystem*
			constexpr auto AltMuzzleFX = 0x8d0; // UParticleSystem*
			constexpr auto AltMuzzleFX_FPV = 0x8d8; // UParticleSystem*
			constexpr auto MuzzlePSC = 0x8e0; // UParticleSystemComponent*
			constexpr auto MuzzlePSCSecondary = 0x8e8; // UParticleSystemComponent*
			constexpr auto FireCameraShake = 0x8f0; // UCameraShake*
			constexpr auto ReloadCameraShake = 0x8f8; // UCameraShake*
			constexpr auto MeleeCameraShake = 0x900; // UCameraShake*
			constexpr auto FireForceFeedback = 0x908; // UForceFeedbackEffect*
			constexpr auto FireSound = 0x910; // USoundCue*
			constexpr auto AltFireSound = 0x918; // USoundCue*
			constexpr auto FireFinishSound = 0x920; // USoundCue*
			constexpr auto OutOfAmmoSound = 0x928; // USoundCue*
			constexpr auto MeleeDamageAmount = 0x930; // int32_t
			constexpr auto TheMeleeSwingRadius = 0x934; // float
			constexpr auto MeleeDamageImpulse = 0x938; // float
			constexpr auto ReloadAnim = 0x940; // FWeaponAnim
			constexpr auto PartialReloadAnim = 0x950; // FWeaponAnim
			constexpr auto WeaponMesh3PReloadAnim = 0x960; // UAnimMontage*
			constexpr auto HarvestAnim = 0x968; // FWeaponAnim
			constexpr auto WeaponBreakAnim = 0x978; // FWeaponAnim
			constexpr auto EquipSound = 0x988; // USoundCue*
			constexpr auto EquipAnim = 0x990; // FWeaponAnim
			constexpr auto EquipNoAmmoClipAnim = 0x9a0; // FWeaponAnim
			constexpr auto UnequipAnim = 0x9b0; // FWeaponAnim
			constexpr auto UnequipNoAmmoClipAnim = 0x9c0; // FWeaponAnim
			constexpr auto WeaponMesh3PFireAnim = 0x9d0; // UAnimMontage*
			constexpr auto FireAnim = 0x9d8; // FWeaponAnim
			constexpr auto MeleeAnim = 0x9e8; // FWeaponAnim
			constexpr auto MeleeNoAmmoClipAnim = 0x9f8; // FWeaponAnim
			constexpr auto MeleeAnimList = 0xa08; // TArray<FWeaponAnim>
			constexpr auto bOnlyUseFirstMeleeAnimWithShield = 0xa18; // char : 1
			constexpr auto bForceShowCrosshairWhileFiring = 0xa18; // char : 1
			constexpr auto MeleeWithHitAnimList = 0xa20; // TArray<FWeaponAnim>
			constexpr auto ShieldHitAnim = 0xa30; // FWeaponAnim
			constexpr auto FPVMoveOffscreenWhenTurningMaxMoveWeaponSpeed = 0xa40; // float
			constexpr auto FPVMoveOffscreenWhenTurningMinMoveWeaponSpeed = 0xa44; // float
			constexpr auto FPVMoveOffscreenWhenTurningMinViewRotSpeed = 0xa48; // float
			constexpr auto FPVMoveOffscreenWhenTurningMaxViewRotSpeed = 0xa4c; // float
			constexpr auto FPVMoveOffscreenIdleRestoreInterval = 0xa50; // float
			constexpr auto FPVMoveOffscreenIdleRestoreSpeed = 0xa54; // float
			constexpr auto FPVMoveOffscreenWhenTurningMaxOffset = 0xa58; // float
			constexpr auto TargetingFireAnim = 0xa68; // FWeaponAnim
			constexpr auto bAllowSubmergedFiring = 0xa78; // char : 1
			constexpr auto bHideFPVMesh = 0xa78; // char : 1
			constexpr auto bForceTargeting = 0xa78; // char : 1
			constexpr auto bCanAltFire = 0xa78; // char : 1
			constexpr auto bUsePartialReloadAnim = 0xa79; // char : 1
			constexpr auto bUseUnequipNoAmmoClipAnim = 0xa79; // char : 1
			constexpr auto bUseEquipNoAmmoClipAnim = 0xa79; // char : 1
			constexpr auto bHideDamageSourceFromLogs = 0xa79; // char : 1
			constexpr auto bUseTargetingReloadAnim = 0xa79; // char : 1
			constexpr auto bUseTargetingFireAnim = 0xa79; // char : 1
			constexpr auto bAltFireDoesNotStopFire = 0xa79; // char : 1
			constexpr auto bAltFireDoesMeleeAttack = 0xa79; // char : 1
			constexpr auto bLoopedFireSound = 0xa7a; // char : 1
			constexpr auto bReloadAnimForceTickPoseOnServer = 0xa7a; // char : 1
			constexpr auto bUsePostUpdateTickForFPVParticles = 0xa7a; // char : 1
			constexpr auto bFPVMoveOffscreenWhenTurning = 0xa7a; // char : 1
			constexpr auto bMeleeHitUseMuzzleFX = 0xa7a; // char : 1
			constexpr auto bHideLeftArmFPV = 0xa7a; // char : 1
			constexpr auto bUseMeleeNoAmmoClipAnim = 0xa7a; // char : 1
			constexpr auto bLoopedMuzzleFX = 0xa7a; // char : 1
			constexpr auto bAllowTargetingWhileReloading = 0xa7b; // char : 1
			constexpr auto bMeleeHitColorizesStructures = 0xa7b; // char : 1
			constexpr auto bLoopedFireAnim = 0xa7b; // char : 1
			constexpr auto bAutoRefire = 0xa7b; // char : 1
			constexpr auto bConsumeAmmoOnUseAmmo = 0xa7b; // char : 1
			constexpr auto bTargetUnTargetWithClick = 0xa7b; // char : 1
			constexpr auto bWantsToFire = 0xa7c; // char : 1
			constexpr auto bWantsToAltFire = 0xa7c; // char : 1
			constexpr auto bDontActuallyConsumeItemAmmo = 0xa7c; // char : 1
			constexpr auto bBPUseTargetingEvents = 0xa7c; // char : 1
			constexpr auto bBPUseWeaponCanFire = 0xa7c; // char : 1
			constexpr auto bUseAmmoOnFiring = 0xa7d; // char : 1
			constexpr auto bUseAmmoServerOnly = 0xa7d; // char : 1
			constexpr auto bListenToAppliedForeces = 0xa7d; // char : 1
			constexpr auto bOverrideAimOffsets = 0xa80; // char : 1
			constexpr auto ItemDestructionUnequipWeaponDelay = 0xa84; // float
			constexpr auto WeaponUnequipDelay = 0xa88; // float
			constexpr auto TargetingReloadAnim = 0xa90; // FWeaponAnim
			constexpr auto CurrentAmmo = 0xab0; // int32_t
			constexpr auto CurrentAmmoInClip = 0xab4; // int32_t
			constexpr auto bReplicateCurrentAmmoInClipToNonOwners = 0xab8; // bool
			constexpr auto bUseBPAdjustAmmoPerShot = 0xab9; // bool
			constexpr auto bOnlyAllowUseWhenRidingDino = 0xaba; // char : 1
			constexpr auto bForceKeepEquippedWhileInInventory = 0xaba; // char : 1
			constexpr auto bIsDefaultWeapon = 0xaba; // char : 1
			constexpr auto bUseBPOnScoped = 0xaba; // char : 1
			constexpr auto bUseBPCanToggleAccessory = 0xaba; // char : 1
			constexpr auto bToggleAccessoryUseAltFireSound = 0xaba; // char : 1
			constexpr auto bToggleAccessoryUseAltMuzzleFX = 0xaba; // char : 1
			constexpr auto bHasToggleableAccessory = 0xaba; // char : 1
			constexpr auto bPrimaryFireDoesMeleeAttack = 0xabb; // char : 1
			constexpr auto bMeleeHitCaptureDermis = 0xabb; // char : 1
			constexpr auto FPVAccessoryToggleComponent = 0xabc; // FName
			constexpr auto TPVAccessoryToggleComponent = 0xac4; // FName
			constexpr auto bWantsToAutoReload = 0xacc; // char : 1
			constexpr auto bHasPlayedReload = 0xacc; // char : 1
			constexpr auto bNetLoopedSimulatingWeaponFire = 0xacc; // char : 1
			constexpr auto bUseAutoReload = 0xacc; // char : 1
			constexpr auto bCanAccessoryBeSetOn = 0xacc; // char : 1
			constexpr auto bIsAccessoryActive = 0xacc; // char : 1
			constexpr auto bConsumeAmmoItemOnReload = 0xacc; // char : 1
			constexpr auto bUseCanAccessoryBeSetOn = 0xacd; // char : 1
			constexpr auto bUseBPGetActorForTargetingTooltip = 0xacd; // char : 1
			constexpr auto bUseBPOverrideAimDirection = 0xacd; // char : 1
			constexpr auto bDoesntUsePrimalItem = 0xacd; // char : 1
			constexpr auto bUseBPShouldDealDamage = 0xacd; // char : 1
			constexpr auto bBPHandleMeleeAttack = 0xacd; // char : 1
			constexpr auto bUseBPIsValidUnstasisActor = 0xad0; // char : 1
			constexpr auto TimeToAutoReload = 0xad4; // float
			constexpr auto ToggleAccessorySound = 0xad8; // USoundBase*
			constexpr auto FiredLastNoAmmoShot = 0xae0; // int32_t
			constexpr auto LastNotifyShotTime = 0xae8; // double
			constexpr auto bLoopingSimulateWeaponFire = 0xaf0; // char : 1
			constexpr auto MeleeDamageType = 0xaf8; // UDamageType*
			constexpr auto bUseBPWeaponDealDamage = 0xb00; // char : 1
			constexpr auto bUseBPGetSelectedMeleeAttackAnim = 0xb00; // char : 1
			constexpr auto bPreventItemColors = 0xb00; // char : 1
			constexpr auto bAllowUseHarvesting = 0xb00; // char : 1
			constexpr auto bClientTriggersHandleFiring = 0xb00; // char : 1
			constexpr auto bUseBPOnWeaponAnimPlayedNotify = 0xb04; // char : 1
			constexpr auto VRTargetingModelOffset = 0xb08; // FVector
			constexpr auto VRTargetingAimOriginOffset = 0xb14; // FVector
			constexpr auto ScopeOverlayMI = 0xb20; // UMaterialInterface*
			constexpr auto ScopeCrosshairMI = 0xb28; // UMaterialInterface*
			constexpr auto ScopeCrosshairMID = 0xb30; // UMaterialInstanceDynamic*
			constexpr auto ScopeCrosshairSize = 0xb38; // float
			constexpr auto ScopeCrosshairColorParameter = 0xb3c; // FName
			constexpr auto bColorCrosshairBasedOnTarget = 0xb44; // char : 1
			constexpr auto bAllowTargeting = 0xb44; // char : 1
			constexpr auto bIgnoreTargetingFOV = 0xb44; // char : 1
			constexpr auto bAllowDropAndPickup = 0xb44; // char : 1
			constexpr auto bApplyAimDriftWhenTargeting = 0xb44; // char : 1
			constexpr auto bUseScopeOverlay = 0xb44; // char : 1
			constexpr auto bHideFPVMeshWhileTargeting = 0xb48; // char : 1
			constexpr auto bDirectTargetingToSecondaryAction = 0xb4c; // char : 1
			constexpr auto bDirectTargetingToAltFire = 0xb4c; // char : 1
			constexpr auto bDirectTargetingToPrimaryFire = 0xb4c; // char : 1
			constexpr auto bCanFire = 0xb4c; // char : 1
			constexpr auto bForceTargetingOnDino = 0xb4c; // char : 1
			constexpr auto bGamepadLeftIsPrimaryFire = 0xb4c; // char : 1
			constexpr auto bGamepadRightIsSecondaryAction = 0xb4c; // char : 1
			constexpr auto bDirectPrimaryFireToAltFire = 0xb4c; // char : 1
			constexpr auto bAllowRunning = 0xb4d; // char : 1
			constexpr auto bMeleeAttackHarvetUsableComponents = 0xb4d; // char : 1
			constexpr auto bAllowUseWhileRidingDino = 0xb4d; // char : 1
			constexpr auto bSupportsOffhandShield = 0xb4d; // char : 1
			constexpr auto bTargetingForceTraceFloatingHUD = 0xb4d; // char : 1
			constexpr auto bUseTPVWeaponMeshMeleeSockets = 0xb4d; // char : 1
			constexpr auto bPreventEquippingUnderwater = 0xb4d; // char : 1
			constexpr auto bDirectAltFireToSeconaryAction = 0xb4d; // char : 1
			constexpr auto bAllowSettingColorizeRegions = 0xb4e; // char : 1
			constexpr auto bAttemptToDyeWithMeleeAttack = 0xb4e; // char : 1
			constexpr auto bOnlyDamagePawns = 0xb4e; // char : 1
			constexpr auto bUseCharacterMeleeDamageModifier = 0xb4e; // char : 1
			constexpr auto bConsumeZoomInOut = 0xb4e; // char : 1
			constexpr auto bClipScopeInY = 0xb4e; // char : 1
			constexpr auto bScopeFullscreen = 0xb4e; // char : 1
			constexpr auto bAllowRunningWhileFiring = 0xb4e; // char : 1
			constexpr auto bAllowRunningWhileReloading = 0xb4f; // char : 1
			constexpr auto bAllowRunningWhileMeleeAttacking = 0xb4f; // char : 1
			constexpr auto MinItemDurabilityPercentageForShot = 0xb50; // float
			constexpr auto bColorizeMuzzleFX = 0xb54; // char : 1
			constexpr auto bForceFirstPersonWhileTargeting = 0xb54; // char : 1
			constexpr auto bUseBPStartEquippedNotify = 0xb54; // char : 1
			constexpr auto bDirectPrimaryFireToSecondaryAction = 0xb54; // char : 1
			constexpr auto bUseAlternateAimOffset = 0xb54; // char : 1
			constexpr auto OverrideTargetingFOV = 0xb58; // float
			constexpr auto TargetingDelayTime = 0xb5c; // float
			constexpr auto TargetingFOVInterpSpeed = 0xb60; // float
			constexpr auto AimDriftYawAngle = 0xb64; // float
			constexpr auto AimDriftPitchAngle = 0xb68; // float
			constexpr auto AimDriftYawFrequency = 0xb6c; // float
			constexpr auto AimDriftPitchFrequency = 0xb70; // float
			constexpr auto AlternateInventoryEquipAnim = 0xb78; // UAnimMontage*
			constexpr auto OpenInventoryAnim = 0xb80; // FWeaponAnim
			constexpr auto MeleeHitRandomChanceToDestroyItem = 0xb90; // float
			constexpr auto GlobalFireCameraShakeScale = 0xb94; // float
			constexpr auto DurabilityCostToEquip = 0xb98; // float
			constexpr auto PassiveDurabilityCostPerInterval = 0xb9c; // float
			constexpr auto PassiveDurabilityCostInterval = 0xba0; // float
			constexpr auto GlobalFireCameraShakeScaleTargeting = 0xba4; // float
			constexpr auto MeleeCameraShakeSpeedScale = 0xba8; // float
			constexpr auto ReloadCameraShakeSpeedScale = 0xbac; // float
			constexpr auto MeleeConsumesStamina = 0xbb0; // float
			constexpr auto MeleeHitTargetCameraShake = 0xbb8; // UCameraShake*
			constexpr auto MeleeHitTargetCameraShakeMobile = 0xbc0; // UCameraShake*
			constexpr auto MeleeHitColorizeStructuresUI = 0xbc8; // UPrimalUI*
			constexpr auto HypoThermiaInsulation = 0xbd0; // float
			constexpr auto HyperThermiaInsulation = 0xbd4; // float
			constexpr auto InsulationRange = 0xbd8; // float
			constexpr auto TargetingSound = 0xbf8; // USoundCue*
			constexpr auto UntargetingSound = 0xc00; // USoundCue*
			constexpr auto FPVMeleeTraceFXRange = 0xc08; // float
			constexpr auto MeleeAttackUsableHarvestDamageType = 0xc10; // UShooterDamageType*
			constexpr auto MeleeAttackHarvetUsableComponentsRadius = 0xc18; // float
			constexpr auto MeleeAttackUsableHarvestDamageMultiplier = 0xc1c; // float
			constexpr auto TPVForcePlayAnim = 0xc78; // UAnimMontage*
			constexpr auto bPreventOpeningInventory = 0xc80; // bool
			constexpr auto bAllowUseOnSeatingStructure = 0xc81; // bool
			constexpr auto bOnlyUseOnSeatingStructure = 0xc82; // bool
			constexpr auto bOverrideStandingAnim = 0xc83; // char : 1
			constexpr auto bUseBPForceTPVTargetingAnimation = 0xc83; // char : 1
			constexpr auto bForcePreventUseWhileRidingDino = 0xc83; // char : 1
			constexpr auto bUseBPPreventSwitchingWeapon = 0xc83; // char : 1
			constexpr auto bUseBPCanEquip = 0xc83; // char : 1
			constexpr auto bUseBPRemainEquipped = 0xc83; // char : 1
			constexpr auto bIsInDestruction = 0xc83; // char : 1
			constexpr auto bUseCustomSeatedAnim = 0xc83; // char : 1
			constexpr auto bSpawnedByMission = 0xc84; // char : 1
			constexpr auto bForceAllowPassengerTPV = 0xc84; // char : 1
			constexpr auto bAllowFullClipReload = 0xc84; // char : 1
			constexpr auto bUseBPModifyFOV = 0xc84; // char : 1
			constexpr auto bUseBPOverrideRootRotationOffset = 0xc84; // char : 1
			constexpr auto bUseBPGetTPVCameraOffset = 0xc84; // char : 1
			constexpr auto bServerIgnoreCheckCanFire = 0xc84; // char : 1
			constexpr auto bForceReloadOnDestruction = 0xc84; // char : 1
			constexpr auto bPreventCarriedZoomInOut = 0xc85; // char : 1
			constexpr auto bInstantAccuracyReset = 0xc85; // char : 1
			constexpr auto bForceAlwaysPlayEquipAnim = 0xc85; // char : 1
			constexpr auto bIgnoreReloadState = 0xc88; // char : 1
			constexpr auto bUseBPPostSpawnMuzzleEffect = 0xc88; // char : 1
			constexpr auto bUseBPGetCrosshairColor = 0xc8c; // char : 1
			constexpr auto bIgnorePlayerReload = 0xc8c; // char : 1
			constexpr auto bUseBPOnBurstStarted = 0xc90; // char : 1
			constexpr auto bUseBPOnBurstFinished = 0xc90; // char : 1
			constexpr auto bUseBurstStartAnim = 0xc90; // char : 1
			constexpr auto bUseBurstFinishAnim = 0xc90; // char : 1
			constexpr auto bSecondaryActionStopsFire = 0xc90; // char : 1
			constexpr auto bUseAmmoSupportsAdjustedAmmoPerShot = 0xc90; // char : 1
			constexpr auto bBPDoClientCheckCanFire = 0xc94; // bool
			constexpr auto bRestrictTPVCameraYaw = 0xc95; // bool
			constexpr auto TPVCameraYawRange = 0xc98; // float
			constexpr auto bFoceSimulatedTick = 0xc9c; // bool
			constexpr auto bWasLastFireFromGamePad = 0xc9d; // bool
			constexpr auto bDisableWeaponCrosshair = 0xc9e; // bool
			constexpr auto DyePreviewMeshOverrideSK = 0xca0; // USkeletalMesh*
			constexpr auto DyePreviewMeshOverrideSM = 0xca8; // UStaticMesh*
			constexpr auto bBPOverrideAspectRatio = 0xcb0; // bool
			constexpr auto bBPOverrideFPVMasterPoseComponent = 0xcb1; // bool
			constexpr auto bForceAllowMountedWeaponry = 0xcb2; // bool
			constexpr auto FireCameraShakeSpreadScaleExponent = 0xcb4; // float
			constexpr auto FireCameraShakeSpreadScaleExponentLessThan = 0xcb8; // float
			constexpr auto FireCameraShakeSpreadScaleMultiplierLessThan = 0xcbc; // float
			constexpr auto FireCameraShakeSpreadScaleMultiplier = 0xcc0; // float
			constexpr auto bUseFireCameraShakeScale = 0xcc4; // bool
			constexpr auto bForceTickWithNoController = 0xcc5; // bool
			constexpr auto InstantConfig = 0xcc8; // FInstantWeaponData
			constexpr auto CurrentFiringSpread = 0xcf8; // float
			constexpr auto ScopedBuff = 0xd00; // APrimalBuff*
			constexpr auto OverrideTPVShieldAnimation = 0xd10; // UAnimSequence*
			constexpr auto bAllowTargetingDuringMeleeSwing = 0xd18; // bool
			constexpr auto FPVMuzzleLocationOffset = 0xd1c; // FVector
			constexpr auto TPVMuzzleLocationOffset = 0xd28; // FVector
			constexpr auto bForceTPV_EquippedWhileRiding = 0xd34; // bool
			constexpr auto bCutsEnemyGrapplingCable = 0xd35; // bool
			constexpr auto FPVInventoryReequipOffset = 0xd38; // FVector
			constexpr auto bForceTPVCameraOffset = 0xd54; // bool
			constexpr auto bUseBPSpawnMeleeEffects = 0xd55; // bool
			constexpr auto StartBurstAnim = 0xd58; // FWeaponAnim
			constexpr auto FinishBurstAnim = 0xd68; // FWeaponAnim
		}
		// Inheritance: ABuff_TekArmor_C > ABuff_OverrideVelocity_C > APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_TekArmor_Gloves_C
		{
			constexpr auto TPV_ChargeFX = 0xb30; // UParticleSystemComponent*
			constexpr auto FPV_ChargeFX = 0xb38; // UParticleSystemComponent*
			constexpr auto Sound_ChargedLoop = 0xb40; // UAudioComponent*
			constexpr auto Sound_Discharged = 0xb48; // UAudioComponent*
			constexpr auto Sound_Charged = 0xb50; // UAudioComponent*
			constexpr auto Ref_TekGloves = 0xb58; // UPrimalItemArmor_TekGloves_C*
			constexpr auto CurrentTekPunchState = 0xb60; // E_TekGlovePunchState
			constexpr auto TakePercentDamageFromHittingStructs = 0xb64; // float
			constexpr auto bMultiplyDamageByMeleeMultiplier = 0xb68; // bool
			constexpr auto bUseChargeLevel2 = 0xb69; // bool
			constexpr auto bWantsToCharge = 0xb6a; // bool
			constexpr auto ChargeStartTime = 0xb70; // double
			constexpr auto cooldownStartTime = 0xb78; // double
			constexpr auto PunchCooldown = 0xb80; // float
			constexpr auto punchRadius = 0xb84; // float
			constexpr auto punchDamage = 0xb88; // float
			constexpr auto punchImpulse = 0xb8c; // float
			constexpr auto PunchImpulseDragWeightLimit = 0xb90; // float
			constexpr auto punchImpulse_current = 0xb94; // float
			constexpr auto punchImpulseDragWeightLimit_current = 0xb98; // float
			constexpr auto currentPunchDamageType = 0xba0; // UDamageType*
			constexpr auto PunchIgnoreActors = 0xba8; // TArray<AActor*>
			constexpr auto Ref_RocketPunchTarget = 0xbb8; // APrimalCharacter*
			constexpr auto rocketPunchDistance_Max = 0xbc0; // float
			constexpr auto currentRocketFistVelocity = 0xbc4; // FVector
			constexpr auto RocketPunchDuration_Max = 0xbd0; // float
			constexpr auto rocketPunchDuration_current = 0xbd4; // float
			constexpr auto rocketPunchStartTime = 0xbd8; // double
			constexpr auto ChargingSound = 0xbe0; // USoundBase*
			constexpr auto ChargedParticle = 0xbe8; // UParticleSystem*
			constexpr auto ChargedSound_One = 0xbf0; // USoundBase*
			constexpr auto ChargedSound_Two = 0xbf8; // USoundBase*
			constexpr auto PunchImpactParticle = 0xc00; // UParticleSystem*
			constexpr auto PunchImpactSound = 0xc08; // USoundBase*
			constexpr auto ElementCost_Punch = 0xc10; // int32_t
			constexpr auto ElementCost_ToCharge = 0xc14; // int32_t
			constexpr auto ElementCost_ChargeLoop = 0xc18; // int32_t
			constexpr auto ChargingElementCostInterval = 0xc1c; // float
			constexpr auto GlovesTargetingCrosshairType = 0xc20; // UMaterial*
			constexpr auto currentGlovesTargetingCrosshair = 0xc28; // UMaterialInstanceDynamic*
			constexpr auto PunchImpactGroundParticle = 0xc30; // UParticleSystem*
			constexpr auto bDebug = 0xc38; // bool
			constexpr auto CrosshairSize = 0xc3c; // float
			constexpr auto FullyChargedPeriodicSound = 0xc40; // USoundBase*
			constexpr auto PunchExplosionDamage = 0xc48; // float
			constexpr auto PunchExplosionRadius = 0xc4c; // float
			constexpr auto PunchExplosionDamageType = 0xc50; // UDamageType*
			constexpr auto PunchExplosionImpulse = 0xc58; // float
			constexpr auto PunchChargeCancelSound = 0xc60; // USoundBase*
			constexpr auto alreadyHitActorsArray = 0xc68; // TArray<AActor*>
			constexpr auto punchAnimLength = 0xc78; // float
			constexpr auto punchTraceHalfSize = 0xc7c; // float
			constexpr auto TekPunch_FoliageDamageType = 0xc80; // UDamageType*
			constexpr auto TekPunchCameraShake = 0xc88; // UCameraShake*
			constexpr auto bHasValidTarget = 0xc90; // bool
			constexpr auto HUD_NoPawnTargetColor = 0xc94; // FLinearColor
			constexpr auto HUD_ValidPawnTargetColor = 0xca4; // FLinearColor
			constexpr auto MidAirSound = 0xcb8; // USoundBase*
			constexpr auto lastChargeConsumeElementTime = 0xcc0; // double
			constexpr auto bTargetingPressed = 0xcc8; // bool
			constexpr auto previousTekPunchState = 0xcc9; // E_TekGlovePunchState
			constexpr auto playerWalkSpeed_Charging = 0xccc; // float
			constexpr auto timeToCharge = 0xcd0; // float
			constexpr auto ElementCost_RocketPunch = 0xcd4; // int32_t
			constexpr auto Anim_ChargeCancel_TPV = 0xcd8; // UAnimMontage*
			constexpr auto Anim_ChargeCancel_FPV = 0xce0; // UAnimMontage*
			constexpr auto Anim_ChargeStart_TPV_Ground = 0xce8; // UAnimMontage*
			constexpr auto Anim_ChargeStart_TPV_Air = 0xcf0; // UAnimMontage*
			constexpr auto Anim_ChargeStart_FPV = 0xcf8; // UAnimMontage*
			constexpr auto Anim_RocketPunch_TPV = 0xd00; // UAnimMontage*
			constexpr auto Anim_Punch_TPV_Ground = 0xd08; // UAnimMontage*
			constexpr auto Anim_Punch_TPV_Air = 0xd10; // UAnimMontage*
			constexpr auto Anim_Punch_FPV = 0xd18; // UAnimMontage*
			constexpr auto ElementCost_Charged = 0xd20; // int32_t
			constexpr auto punchDuration = 0xd24; // float
			constexpr auto GloveFXSocketName_FPV = 0xd28; // FName
			constexpr auto GloveFXSocketName_TPV = 0xd30; // FName
			constexpr auto bAllowAutoStart = 0xd38; // bool
			constexpr auto RocketPunchLastUpdateTime = 0xd40; // double
			constexpr auto bShouldPunchNow = 0xd48; // bool
			constexpr auto InstaPunchDistance = 0xd4c; // float
			constexpr auto RocketPunchTickCheckDistance = 0xd50; // float
			constexpr auto GroundCheckDistance = 0xd54; // float
			constexpr auto ChargedCameraShake = 0xd58; // UCameraShake*
			constexpr auto meleeDamageMultiplierScale = 0xd60; // float
			constexpr auto bAltFirePressed = 0xd64; // bool
			constexpr auto lastPunchTime = 0xd68; // double
			constexpr auto punchDurationMax = 0xd70; // float
			constexpr auto MaxFallZSpeed = 0xd74; // float
			constexpr auto LastPunchedTime = 0xd78; // double
			constexpr auto LastRocketPunchedTime = 0xd80; // double
		}

		// Inheritance: APlayerState > AInfo > AActor > UObject
		namespace AShooterPlayerState
		{
			constexpr auto MyPlayerData = 0x520; // UPrimalPlayerData*
			constexpr auto MyPlayerDataStruct = 0x528; // FPrimalPlayerDataStruct
			constexpr auto DefaultItemSlotClasses0xa = 0x970; // UPrimalItem*
			constexpr auto DefaultItemSlotEngrams0xa = 0x9c0; // char
			constexpr auto MyTribeData = 0x9d0; // FTribeData
			constexpr auto LastTribeInviteData = 0xb10; // FTribeData
			constexpr auto TotalEngramPoints = 0xc88; // int32_t
			constexpr auto FreeEngramPoints = 0xc8c; // int32_t
			constexpr auto EngramItemBlueprints = 0xc90; // TArray<UPrimalItem*>
			constexpr auto NextAllowedRespawnTime = 0xcf0; // double
			constexpr auto LastFlexPipeRefreshConnectionsNetworkTime = 0xcf8; // double
			constexpr auto AllowedRespawnInterval = 0xd00; // float
			constexpr auto LastTimeDiedToEnemyTeam = 0xd08; // double
			constexpr auto CurrentlySelectedDinoOrderGroup = 0xd10; // int32_t
			constexpr auto DinoOrderGroups0xa = 0xd18; // FDinoOrderGroup
			constexpr auto GenesisAbilityErrorLastTime = 0xef8; // double
			constexpr auto NextAllowTurretCopySettingsTime = 0xf00; // double
			constexpr auto bQuitter = 0xf10; // char : 1
		}
		namespace FTribeData
		{
			constexpr auto TribeName = 0x0; // FString
			constexpr auto LastNameChangeTime = 0x10; // double
			constexpr auto OwnerPlayerDataID = 0x18; // uint32_t
			constexpr auto TribeId = 0x1c; // int32_t
			constexpr auto MembersPlayerName = 0x20; // TArray<FString>
			constexpr auto MembersPlayerDataID = 0x30; // TArray<uint32_t>
			constexpr auto MembersRankGroups = 0x40; // TArray<char>
			constexpr auto SlotFreedTime = 0x50; // TArray<double>
			constexpr auto TribeAdmins = 0x60; // TArray<uint32_t>
			constexpr auto TribeAlliances = 0x70; // TArray<FTribeAlliance>
			constexpr auto bSetGovernment = 0x80; // bool
			constexpr auto TribeGovernment = 0x84; // FTribeGovernment
			constexpr auto MembersConfigs = 0x98; // TArray<FPrimalPlayerCharacterConfigStruct>
			constexpr auto TribeWars = 0xa8; // TArray<FTribeWar>
			constexpr auto TribeLog = 0xb8; // TArray<FString>
			constexpr auto LogIndex = 0xc8; // int32_t
			constexpr auto TribeRankGroups = 0xd0; // TArray<FTribeRankGroup>
			constexpr auto NumTribeDinos = 0xe0; // int32_t
			constexpr auto LastMergedTime = 0xe8; // double
		}
		// Inheritance: AActor > UObject
		namespace APrimalTargetableActor
		{
			constexpr auto HurtFX = 0x478; // UParticleSystem*
			constexpr auto DamageTypeAdjusters = 0x480; // TArray<FDamageTypeAdjuster>
			constexpr auto DestructionActorTemplate = 0x498; // AActor*
			constexpr auto LifeSpanAfterDeath = 0x4a0; // float
			constexpr auto DeathSound = 0x4a8; // USoundCue*
			constexpr auto PassiveDamageHealthReplicationPercentInterval = 0x4b0; // float
			constexpr auto DamageNotifyTeamAggroMultiplier = 0x4b4; // float
			constexpr auto DamageNotifyTeamAggroRange = 0x4b8; // float
			constexpr auto DamageNotifyTeamAggroRangeFalloff = 0x4bc; // float
			constexpr auto DestructibleMeshLocationOffset = 0x4c0; // FVector
			constexpr auto DestructibleMeshScaleOverride = 0x4cc; // FVector
			constexpr auto DestructibleMeshRotationOffset = 0x4d8; // FRotator
			constexpr auto bDestructionActorTemplateServerOnly = 0x4e4; // char : 1
			constexpr auto bDestroyedMeshUseSkeletalMeshComponent = 0x4e4; // char : 1
			constexpr auto bPreventZeroDamageInstigatorSelfDamage = 0x4e4; // char : 1
			constexpr auto bIsDead = 0x4e4; // char : 1
			constexpr auto bDamageNotifyTeamAggroAI = 0x4e4; // char : 1
			constexpr auto bWithinPreventionVolume = 0x4e4; // char : 1
			constexpr auto bAllowDamageByFriendlyDinos = 0x4e4; // char : 1
			constexpr auto bIgnoreDamageRepairCooldown = 0x4e5; // char : 1
			constexpr auto bUseBPDied = 0x4e5; // char : 1
			constexpr auto bUseHarvestingComponent = 0x4e5; // char : 1
			constexpr auto bUseBPAdjustDamage = 0x4e5; // char : 1
			constexpr auto bIgnoreDestructionEffects = 0x4e5; // char : 1
			constexpr auto bDoAllowRadialDamageWithoutVisiblityTrace = 0x4e5; // char : 1
			constexpr auto bForceFloatingDamageNumbers = 0x4e5; // char : 1
			constexpr auto bForceZeroDamageProcessing = 0x4e5; // char : 1
			constexpr auto DescriptiveName = 0x4e8; // FString
			constexpr auto DestroyedMeshActorClass = 0x4f8; // ADestroyedMeshActor*
			constexpr auto DestroyedMesh = 0x500; // UDestructibleMesh*
			constexpr auto ReplicatedHealth = 0x508; // float
			constexpr auto Health = 0x50c; // float
			constexpr auto MaxHealth = 0x510; // float
			constexpr auto DestructibleMeshDeathImpulseScale = 0x514; // float
			constexpr auto BoneDamageAdjusters = 0x518; // TArray<FBoneDamageAdjuster>
			constexpr auto MyHarvestingComponent = 0x530; // UPrimalHarvestingComponent*
			constexpr auto TargetableDamageFXDefaultPhysMaterial = 0x548; // EShooterPhysMaterialType
			constexpr auto BPOverrideDestroyedMeshTextures = 0x54c; // char : 1
			constexpr auto StructureSettingsClass = 0x550; // UPrimalStructureSettings*
		}
		// Inheritance: APrimalStructure > APrimalTargetableActor > AActor > UObject
		namespace APrimalStructureItemContainer
		{
			constexpr auto MyInventoryComponent = 0xae0; // UPrimalInventoryComponent*
			constexpr auto bAllowCustomName = 0xae8; // char : 1
			constexpr auto bOnlyUseSpoilingMultipliersIfActivated = 0xae8; // char : 1
			constexpr auto bContainerActivated = 0xae8; // char : 1
			constexpr auto bAdjustDamageAsPlayerWithEquipmenet = 0xae8; // char : 1
			constexpr auto bAutoActivateWhenFueled = 0xae8; // char : 1
			constexpr auto bCanToggleActivation = 0xae8; // char : 1
			constexpr auto bAutoActivateContainer = 0xae8; // char : 1
			constexpr auto bOnlyConsumeDurabilityOnEquipmentForEnemies = 0xae8; // char : 1
			constexpr auto bCraftingSubstractConnectedWater = 0xae9; // char : 1
			constexpr auto bServerBPNotifyInventoryItemChanges = 0xae9; // char : 1
			constexpr auto bClientBPNotifyInventoryItemChanges = 0xae9; // char : 1
			constexpr auto bDisplayActivationOnInventoryUI = 0xae9; // char : 1
			constexpr auto bUseBPGetFuelConsumptionMultiplier = 0xae9; // char : 1
			constexpr auto bPreventToggleActivation = 0xae9; // char : 1
			constexpr auto bServerBPNotifyInventoryItemChangesUseQuantity = 0xae9; // char : 1
			constexpr auto bForceNoPinLocking = 0xae9; // char : 1
			constexpr auto bPoweredAllowBattery = 0xaea; // char : 1
			constexpr auto bPoweredHasBattery = 0xaea; // char : 1
			constexpr auto bPoweredUsingBattery = 0xaea; // char : 1
			constexpr auto bDisplayActivationOnInventoryUISecondary = 0xaea; // char : 1
			constexpr auto bFuelAllowActivationWhenNoPower = 0xaea; // char : 1
			constexpr auto bDisplayActivationOnInventoryUITertiary = 0xaea; // char : 1
			constexpr auto bCheckStartedUnderwater = 0xaea; // char : 1
			constexpr auto bStartedUnderwater = 0xaea; // char : 1
			constexpr auto bPoweredAllowSolar = 0xaeb; // char : 1
			constexpr auto bPoweredUsingSolar = 0xaeb; // char : 1
			constexpr auto SolarRefreshIntervalMin = 0xaec; // float
			constexpr auto SolarRefreshIntervalMax = 0xaf0; // float
			constexpr auto SolarRefreshInterval = 0xaf4; // float
			constexpr auto LastSolarRefreshTime = 0xaf8; // double
			constexpr auto BatteryClassOverride = 0xb00; // UPrimalItem*
			constexpr auto PoweredOverrideCounter = 0xb08; // int32_t
			constexpr auto NotifyNearbyPowerGeneratorDistance = 0xb0c; // float
			constexpr auto NotifyNearbyPowerGeneratorOctreeGroup = 0xb10; // int32_t
			constexpr auto UseBPApplyPinCode = 0xb14; // char : 1
			constexpr auto ActivateMaterials = 0xb18; // TArray<UMaterialInterface*>
			constexpr auto InActivateMaterials = 0xb28; // TArray<UMaterialInterface*>
			constexpr auto ItemsToDisplayInStructureTooltip = 0xb38; // TArray<FItemToDisplayInStructureTooltip>
			constexpr auto MyChildEmitterSpawnable = 0xb48; // UChildActorComponent*
			constexpr auto bIsPinLocked = 0xb50; // char : 1
			constexpr auto bHasFuel = 0xb50; // char : 1
			constexpr auto bIsUnderwater = 0xb50; // char : 1
			constexpr auto bIsLocked = 0xb50; // char : 1
			constexpr auto BoxName = 0xb58; // FString
			constexpr auto MaxBoxNameLength = 0xb68; // int32_t
			constexpr auto bDestroyWhenAllItemsRemoved = 0xb6c; // char : 1
			constexpr auto bPoweredWaterSourceWhenActive = 0xb6c; // char : 1
			constexpr auto bDrinkingWater = 0xb6c; // char : 1
			constexpr auto bSupportsLocking = 0xb6c; // char : 1
			constexpr auto bDropInventoryOnDestruction = 0xb6c; // char : 1
			constexpr auto bSupportsPinLocking = 0xb6c; // char : 1
			constexpr auto bForcePreventAutoActivateWhenConnectedToWater = 0xb6c; // char : 1
			constexpr auto bDisableActivationUnderwater = 0xb6c; // char : 1
			constexpr auto bReplicateItemFuelClass = 0xb6d; // char : 1
			constexpr auto bOnlyAllowTeamActivation = 0xb6d; // char : 1
			constexpr auto bIsPowered = 0xb6d; // char : 1
			constexpr auto bLastToggleActivated = 0xb6d; // char : 1
			constexpr auto bSupportsPinActivation = 0xb6d; // char : 1
			constexpr auto bIsPowerJunction = 0xb6d; // char : 1
			constexpr auto bActiveRequiresPower = 0xb6d; // char : 1
			constexpr auto bAutoActivateIfPowered = 0xb6d; // char : 1
			constexpr auto bBPOnContainerActiveHealthDecrease = 0xb6e; // char : 1
			constexpr auto bAllowAutoActivateWhenNoPower = 0xb6e; // char : 1
			constexpr auto bBPIsValidWaterSourceForPipe = 0xb6e; // char : 1
			constexpr auto bUseBPCanBeActivatedByPlayer = 0xb6e; // char : 1
			constexpr auto bUseBPCanBeActivated = 0xb6e; // char : 1
			constexpr auto bUseBPActivated = 0xb6e; // char : 1
			constexpr auto bUseOpenSceneAction = 0xb6e; // char : 1
			constexpr auto bAutoActivateWhenNoPower = 0xb6f; // char : 1
			constexpr auto InsulationRange = 0xb70; // float
			constexpr auto HyperThermiaInsulation = 0xb74; // float
			constexpr auto HypoThermiaInsulation = 0xb78; // float
			constexpr auto ContainerActiveDecreaseHealthSpeed = 0xb7c; // float
			constexpr auto FuelConsumptionIntervalsMultiplier = 0xb80; // float
			constexpr auto DropInventoryOnDestructionLifespan = 0xb84; // float
			constexpr auto ActivateContainerString = 0xb88; // FString
			constexpr auto DeactivateContainerString = 0xb98; // FString
			constexpr auto ContainerActiveHealthDecreaseDamageTypePassive = 0xba8; // UDamageType*
			constexpr auto ActiveRequiresFuelItems = 0xbb0; // TArray<UPrimalItem*>
			constexpr auto FuelItemsConsumeInterval = 0xbc0; // TArray<float>
			constexpr auto FuelItemsConsumedGiveItems = 0xbd0; // TArray<UPrimalItem*>
			constexpr auto NetDestructionTime = 0xbe0; // double
			constexpr auto CurrentPinCode = 0xbe8; // uint32_t
			constexpr auto CurrentFuelTimeCache = 0xbf0; // double
			constexpr auto LastCheckedFuelTime = 0xbf8; // double
			constexpr auto LinkedPowerJunctionStructureID = 0xc00; // int32_t
			constexpr auto CurrentItemCount = 0xc04; // int32_t
			constexpr auto MaxItemCount = 0xc08; // int32_t
			constexpr auto LinkedPowerJunctionStructure = 0xc0c; // TWeakObjectPtr<APrimalStructure>
			constexpr auto NextConsumeFuelGiveItemType = 0xc18; // UPrimalItem*
			constexpr auto LastActiveStateChangeTime = 0xc28; // double
			constexpr auto MapMarkerLocationInfo = 0xc38; // FPrimalMapMarkerEntryData
			constexpr auto BasedCharacterDamageInterval = 0xc60; // float
			constexpr auto BasedCharacterDamageAmount = 0xc64; // float
			constexpr auto BasedCharacterDamageType = 0xc68; // UDamageType*
			constexpr auto EngramRequirementClassOverride = 0xc70; // UPrimalItem*
			constexpr auto LinkedBlueprintSpawnActorPoint = 0xc78; // AActor*
			constexpr auto PoweredNearbyStructureTemplate = 0xc80; // APrimalStructureItemContainer*
			constexpr auto PoweredNearbyStructureRange = 0xc88; // float
			constexpr auto JunctionLinkParticleTemplate = 0xc90; // UParticleSystem*
			constexpr auto UISceneTemplate = 0xc98; // UPrimalUI*
			constexpr auto OpenSceneActionName = 0xca0; // FString
			constexpr auto DisabledOpenSceneActionName = 0xcb0; // FString
			constexpr auto RequiresItemForOpenSceneAction = 0xcc0; // UPrimalItem*
			constexpr auto bUseDeathCacheCharacterID = 0xcc8; // char : 1
			constexpr auto bUseCooldownOnTransferAll = 0xcc8; // char : 1
			constexpr auto bHideAutoActivateToggle = 0xcc8; // char : 1
			constexpr auto bRequiresItemExactClass = 0xcc8; // char : 1
			constexpr auto bInventoryForcePreventItemAppends = 0xcc8; // char : 1
			constexpr auto bInventoryForcePreventRemoteAddItems = 0xcc8; // char : 1
			constexpr auto bDestroyWhenAllItemsRemovedExceptDefaults = 0xcc8; // char : 1
			constexpr auto bUseAmmoContainerBuff = 0xcc9; // char : 1
			constexpr auto DeathCacheCreationTime = 0xcd0; // double
			constexpr auto JunctionLinkCableParticle = 0xcf0; // UParticleSystemComponent*
			constexpr auto JunctionCableBeamOffsetStart = 0xcf8; // FVector
			constexpr auto JunctionCableBeamOffsetEnd = 0xd04; // FVector
			constexpr auto ContainerActivatedSound = 0xd10; // USoundBase*
			constexpr auto ContainerDeactivatedSound = 0xd18; // USoundBase*
			constexpr auto DemolishInventoryDepositClass = 0xd20; // APrimalStructureItemContainer*
			constexpr auto FuelItemTrueClass = 0xd28; // UPrimalItem*
			constexpr auto ReplicatedFuelItemClass = 0xd30; // UPrimalItem*
			constexpr auto ReplicatedFuelItemColorIndex = 0xd38; // int16_t
			constexpr auto DefaultParticleTemplate = 0xd40; // UParticleSystem*
			constexpr auto DefaultAudioTemplate = 0xd48; // USoundBase*
			constexpr auto OverrideParticleTemplateItemClasses = 0xd50; // TArray<UPrimalItem*>
			constexpr auto OverrideParticleTemplates = 0xd60; // TArray<UParticleSystem*>
			constexpr auto OverrideAudioTemplates = 0xd70; // TArray<USoundBase*>
			constexpr auto MaxActivationDistance = 0xd80; // float
			constexpr auto BoxNamePrefaceString = 0xd88; // FString
			constexpr auto TribeGroupInventoryRank = 0xd98; // char
			constexpr auto bServerBPNotifyInventoryItemChangesUseSwapped = 0xd99; // char : 1
			constexpr auto bUseBPOverrideDescriptiveName = 0xd99; // char : 1
			constexpr auto bBPNotifyRemoteViewerChange = 0xd99; // char : 1
			constexpr auto bReplicateLastActivatedTime = 0xd99; // char : 1
			constexpr auto bIsAmmoContainer = 0xd99; // char : 1
			constexpr auto bUseBPSetPlayerConstructor = 0xd99; // char : 1
			constexpr auto bUseBPGetQuantityOfItemWithoutCheckingInventory = 0xd99; // char : 1
			constexpr auto FuelConsumeDecreaseDurabilityAmounts = 0xda0; // TArray<float>
			constexpr auto RandomFuelUpdateTimeMin = 0xdb0; // float
			constexpr auto RandomFuelUpdateTimeMax = 0xdb4; // float
			constexpr auto LastDeactivatedTime = 0xdb8; // double
			constexpr auto LastActivatedTime = 0xdc0; // double
			constexpr auto ValidCraftingResourceMaxDurability = 0xdc8; // float
			constexpr auto ActivationCooldownTime = 0xdcc; // float
			constexpr auto UsablePriority = 0xdd0; // float
			constexpr auto DeathCacheCharacterID = 0xdd8; // uint64_t
			constexpr auto LocalCorpseEmitter = 0xde0; // UParticleSystemComponent*
			constexpr auto SinglePlayerFuelConsumptionIntervalsMultiplier = 0xde8; // float
			constexpr auto PoweredBatteryDurabilityToDecreasePerSecond = 0xdec; // float
			constexpr auto DropInventoryDepositTraceDistance = 0xdf0; // float
			constexpr auto ValidatedByPinCodePlayerControllers = 0xdf8; // TArray<TWeakObjectPtr<AShooterPlayerController>>
		}
		// Inheritance: AActor > UObject
		namespace AController
		{
			constexpr auto Character = 0x478; // ACharacter*
			constexpr auto PlayerState = 0x480; // APlayerState*
			constexpr auto Pawn = 0x488; // APawn*
			constexpr auto ControlRotation = 0x490; // FRotator
			constexpr auto bAttachToPawn = 0x49c; // char : 1
			constexpr auto StateName = 0x4a8; // FName
			constexpr auto OnInstigatedAnyDamage = 0x4b0; // FScriptMulticastDelegate
		}
		namespace FWeaponData
		{
			constexpr auto bInfiniteAmmo = 0x0; // bool
			constexpr auto bNeverReload = 0x1; // bool
			constexpr auto bUsesAmmo = 0x2; // bool
			constexpr auto bDontTakeAmmoOnReload = 0x3; // bool
			constexpr auto bFullReloadFromSingleItem = 0x4; // bool
			constexpr auto bShowAmmoInClipAsPercent = 0x5; // bool
			constexpr auto bDontReloadEmptyClipOnEquip = 0x6; // bool
			constexpr auto AmmoPerClip = 0x8; // int32_t
			constexpr auto AmmoPerShot = 0xc; // int32_t
			constexpr auto bSilentOverflowReload = 0x10; // bool
			constexpr auto TimeBetweenShots = 0x14; // float
			constexpr auto NoAnimReloadDuration = 0x18; // float
			constexpr auto bForceReloadDuration = 0x1c; // bool
			constexpr auto bLoopedReloadAnim = 0x1d; // bool
			constexpr auto ReloadDurationPerAmmoCount = 0x20; // float
			constexpr auto ItemDurabilityToConsumePerShot = 0x24; // float
			constexpr auto HarvestResourceMultiplier = 0x28; // float
		}
		namespace AWeapTekPistol_C
		{
			constexpr auto BeamFPV = 0xdc0; // UParticleSystemComponent*
			constexpr auto BeamTPV = 0xdc8; // UParticleSystemComponent*
			constexpr auto ChargeFPV = 0xdd0; // UParticleSystemComponent*
			constexpr auto ChargeTPV = 0xdd8; // UParticleSystemComponent*
			constexpr auto FireMode = 0xde0; // int32_t
			constexpr auto BeamTarget = 0xde4; // FVector
			constexpr auto BeamOn = 0xdf0; // bool
			constexpr auto FireModeConfig = 0xdf8; // TArray<FTekPistolFireMode_Beam>
			constexpr auto SetBeamLocally = 0xe08; // bool
			constexpr auto HealPercentage = 0xe0c; // float
			constexpr auto MinHealAmount = 0xe10; // int32_t
			constexpr auto MaxHealAmount = 0xe14; // int32_t
			constexpr auto TargetCharacter = 0xe18; // APrimalCharacter*
			constexpr auto DisableCrosshairColor = 0xe20; // FLinearColor
			constexpr auto StunCrosshairColor = 0xe30; // FLinearColor
			constexpr auto UseWorldSpaceBeamTarget = 0xe40; // bool
			constexpr auto HealingCrosshairColor = 0xe44; // FLinearColor
			constexpr auto LastHealTime = 0xe58; // double
			constexpr auto PrimalItem = 0xe60; // UPrimalItem_WeaponTekPistol_C*
			constexpr auto CustomItemData = 0xe68; // FCustomItemData
			constexpr auto ModeSwitchAnim = 0xee0; // FWeaponAnim
			constexpr auto PlayModeSwitchMontage = 0xef0; // bool
			constexpr auto FireStartAnim = 0xef8; // FWeaponAnim
			constexpr auto FireStopAnim = 0xf08; // FWeaponAnim
			constexpr auto FireDelayAfterModeSwitch = 0xf18; // float
			constexpr auto SwitchingMode = 0xf1c; // bool
			constexpr auto HelperBuff = 0xf20; // APrimalBuff*
			constexpr auto HelperBuffRef = 0xf28; // APrimalBuff*
			constexpr auto DamageCrosshairColor = 0xf30; // FLinearColor
			constexpr auto FireLoopSound = 0xf40; // UAudioComponent*
			constexpr auto ImpactLoop = 0xf48; // UAudioComponent*
			constexpr auto DynamicMats = 0xf50; // TArray<UMaterialInstanceDynamic*>
			constexpr auto K2Node_CustomEvent_NewMode = 0xf60; // int32_t
			constexpr auto K2Node_CustomEvent_BeamOn2 = 0xf64; // bool
			constexpr auto CallFunc_CanRunCosmeticEvents_OutNetworkMode = 0xf65; // ENetworkModeResult
			constexpr auto K2Node_CustomEvent_NewTarget2 = 0xf68; // FVector
			constexpr auto K2Node_SwitchEnum_CmpSuccess = 0xf74; // bool
			constexpr auto K2Node_CustomEvent_NewTarget = 0xf78; // FVector
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue = 0xf88; // double
			constexpr auto K2Node_CustomEvent_NewMode2 = 0xf90; // int32_t
			constexpr auto K2Node_CustomEvent_FireMode = 0xf94; // int32_t
			constexpr auto K2Node_CustomEvent_BeamOn = 0xf98; // bool
			constexpr auto CallFunc_NotEqual_IntInt_ReturnValue = 0xf99; // bool
			constexpr auto CallFunc_NotEqual_BoolBool_ReturnValue = 0xf9a; // bool
		}
		// Inheritance: UActorComponent > UObject
		namespace UPrimalCharacterStatusComponent
		{
			constexpr auto MaxStatusValues0xc = 0xd8; // float
			constexpr auto BaseLevelMaxStatusValues0xc = 0x108; // float
			constexpr auto NumberOfLevelUpPointsApplied0xc = 0x138; // char
			constexpr auto NumberOfLevelUpPointsAppliedTamed0xc = 0x144; // char
			constexpr auto TamedIneffectivenessModifier = 0x150; // float
			constexpr auto MovingStaminaRecoveryRateMultiplier = 0x154; // float
			constexpr auto RecoveryRateStatusValue0xc = 0x158; // float
			constexpr auto TimeToRecoverAfterDepletionStatusValue0xc = 0x188; // float
			constexpr auto TimeToRecoverAfterDecreaseStatusValue0xc = 0x1b8; // float
			constexpr auto AmountMaxGainedPerLevelUpValue0xc = 0x1e8; // float
			constexpr auto AmountMaxGainedPerLevelUpValueTamed0xc = 0x218; // float
			constexpr auto MaxGainedPerLevelUpValueIsPercent0xc = 0x248; // char
			constexpr auto RecoveryRateIsPercent0xc = 0x254; // char
			constexpr auto TamingMaxStatMultipliers0xc = 0x260; // float
			constexpr auto TamingMaxStatAdditions0xc = 0x290; // float
			constexpr auto MaxLevelUpMultiplier0xc = 0x2c0; // float
			constexpr auto TamedLandDinoSwimSpeedLevelUpEffectiveness = 0x2f0; // float
			constexpr auto TamingIneffectivenessMultiplier = 0x2f4; // float
			constexpr auto DinoRiderWeightMultiplier = 0x2f8; // float
			constexpr auto CanLevelUpValue0xc = 0x2fc; // char
			constexpr auto DontUseValue0xc = 0x308; // char
			constexpr auto StatusStateThresholds0xc = 0x318; // FPrimalCharacterStatusStateThresholds
			constexpr auto ExperienceAutomaticConsciousIncreaseSpeed = 0x678; // float
			constexpr auto CheatMaxWeight = 0x67c; // float
			constexpr auto CharacterStatusComponentPriority = 0x680; // int32_t
			constexpr auto SuffocationHealthPercentDecreaseSpeed = 0x684; // float
			constexpr auto UnsubmergedOxygenIncreaseSpeed = 0x688; // float
			constexpr auto SubmergedOxygenDecreaseSpeed = 0x68c; // float
			constexpr auto RunningStaminaConsumptionRate = 0x690; // float
			constexpr auto WalkingStaminaConsumptionRate = 0x694; // float
			constexpr auto SwimmingOrFlyingStaminaConsumptionRate = 0x698; // float
			constexpr auto JumpStaminaConsumption = 0x69c; // float
			constexpr auto WindedSpeedModifier = 0x6a0; // float
			constexpr auto WindedSpeedModifierSwimmingOrFlying = 0x6a4; // float
			constexpr auto InjuredSpeedModifier = 0x6a8; // float
			constexpr auto HypothermicHealthDecreaseRateBase = 0x6ac; // float
			constexpr auto HypothermicHealthDecreaseRatePerDegree = 0x6b0; // float
			constexpr auto HyperthermicHealthDecreaseRateBase = 0x6b4; // float
			constexpr auto HyperthermicHealthDecreaseRatePerDegree = 0x6b8; // float
			constexpr auto XPEarnedPerStaminaConsumed = 0x6bc; // float
			constexpr auto KillXPMultiplierPerCharacterLevel = 0x6c0; // float
			constexpr auto bInfiniteFood = 0x6c4; // char : 1
			constexpr auto bConsumeFoodAutomatically = 0x6c4; // char : 1
			constexpr auto bRunningConsumesStamina = 0x6c4; // char : 1
			constexpr auto bUseStamina = 0x6c4; // char : 1
			constexpr auto bWalkingConsumesStamina = 0x6c4; // char : 1
			constexpr auto bCanSuffocateIfTamed = 0x6c4; // char : 1
			constexpr auto bCanSuffocate = 0x6c4; // char : 1
			constexpr auto bCanGetHungry = 0x6c4; // char : 1
			constexpr auto bAllowLevelUps = 0x6c5; // char : 1
			constexpr auto bAllowSharingXPWithTribe = 0x6c5; // char : 1
			constexpr auto bInfiniteStats = 0x6c5; // char : 1
			constexpr auto bUseStatusSpeedModifiers = 0x6c5; // char : 1
			constexpr auto bReplicateGlobalStatusValues = 0x6c5; // char : 1
			constexpr auto bAutomaticallyUpdateTemperature = 0x6c5; // char : 1
			constexpr auto bConsumeWaterAutomatically = 0x6c5; // char : 1
			constexpr auto bAddExperienceAutomatically = 0x6c5; // char : 1
			constexpr auto bStatusSpeedModifierOnlyFullOrNone = 0x6c6; // char : 1
			constexpr auto bIgnoreStatusSpeedModifierIfSwimming = 0x6c6; // char : 1
			constexpr auto bPreventJump = 0x6c6; // char : 1
			constexpr auto bInitializedBaseLevelMaxStatusValues = 0x6c6; // char : 1
			constexpr auto bServerFirstInitialized = 0x6c6; // char : 1
			constexpr auto bRunningUseDefaultSpeed = 0x6c6; // char : 1
			constexpr auto bNeverAllowXP = 0x6c6; // char : 1
			constexpr auto bDontUseSpeedMultipleAsSpeed = 0x6c7; // char : 1
			constexpr auto bHideStaminaStatusFromHUD = 0x6c7; // char : 1
			constexpr auto bUseBPGetStatusNameString = 0x6c7; // char : 1
			constexpr auto bHideFoodStatusFromHUD = 0x6c7; // char : 1
			constexpr auto bForceDefaultSpeed = 0x6c7; // char : 1
			constexpr auto bUseBPAdjustStatusValueModification = 0x6c7; // char : 1
			constexpr auto bPreventTamedStatReplication = 0x6c7; // char : 1
			constexpr auto ShareXPWithTribeRange = 0x6c8; // float
			constexpr auto BaseCharacterLevel = 0x6cc; // int32_t
			constexpr auto ExtraCharacterLevel = 0x6d0; // uint16_t
			constexpr auto ExperiencePoints = 0x6d4; // float
			constexpr auto ReplicatedExperiencePoints = 0x6d8; // float
			constexpr auto LevelExperienceRampType = 0x6dc; // ELevelExperienceRampType
			constexpr auto MaxExperiencePoints = 0x6e0; // float
			constexpr auto BaseFoodConsumptionRate = 0x6e4; // float
			constexpr auto BaseWaterConsumptionRate = 0x6e8; // float
			constexpr auto FortitudeTorpidityDecreaseMultiplier = 0x6ec; // float
			constexpr auto FortitudeTorpidityIncreaseResistance = 0x6f0; // float
			constexpr auto SubmergedWaterIncreaseRate = 0x6f4; // float
			constexpr auto CrouchedWaterFoodConsumptionMultiplier = 0x6f8; // float
			constexpr auto ProneWaterFoodConsumptionMultiplier = 0x6fc; // float
			constexpr auto StaminaRecoveryDecreaseFoodMultiplier = 0x700; // float
			constexpr auto StaminaRecoveryDecreaseWaterMultiplier = 0x704; // float
			constexpr auto HealthRecoveryDecreaseFoodMultiplier = 0x708; // float
			constexpr auto BabyDinoConsumingFoodRateMultiplier = 0x70c; // float
			constexpr auto DinoTamedAdultConsumingFoodRateMultiplier = 0x710; // float
			constexpr auto BabyGestationConsumingFoodRateMultiplier = 0x714; // float
			constexpr auto BabyDinoStarvationHealthDecreaseRateMultiplier = 0x718; // float
			constexpr auto BabyMaxHealthPercent = 0x71c; // float
			constexpr auto CrouchedStaminaConsumptionMultiplier = 0x720; // float
			constexpr auto ProneStaminaConsumptionMultiplier = 0x724; // float
			constexpr auto StarvationHealthConsumptionRate = 0x728; // float
			constexpr auto DehyrdationHealthConsumptionRate = 0x72c; // float
			constexpr auto StaminaConsumptionDecreaseWaterMultiplier = 0x730; // float
			constexpr auto StaminaConsumptionDecreaseFoodMultiplier = 0x734; // float
			constexpr auto HypothermiaDecreaseFoodMultiplierBase = 0x738; // float
			constexpr auto HypothermiaDecreaseFoodMultiplierPerDegree = 0x73c; // float
			constexpr auto HyperthermiaDecreaseWaterMultiplierBase = 0x740; // float
			constexpr auto HyperthermiaDecreaseWaterMultiplierPerDegree = 0x744; // float
			constexpr auto HyperthermiaTemperatureThreshold = 0x748; // float
			constexpr auto HypothermiaTemperatureThreshold = 0x74c; // float
			constexpr auto TorporExitPercentThreshold = 0x750; // float
			constexpr auto KnockedOutTorpidityRecoveryRateMultiplier = 0x754; // float
			constexpr auto DehydrationTorpidityMultiplier = 0x758; // float
			constexpr auto StarvationTorpidityMultuplier = 0x75c; // float
			constexpr auto StarvationTorpidityIncreaseRate = 0x760; // float
			constexpr auto DehyrdationTorpidityIncreaseRate = 0x764; // float
			constexpr auto InjuredTorpidityIncreaseMultiplier = 0x768; // float
			constexpr auto WeightSpeedDecreasePower = 0x76c; // float
			constexpr auto WeightJumpDecreasePower = 0x770; // float
			constexpr auto PoopItemMinFoodConsumptionInterval = 0x774; // float
			constexpr auto PoopItemMaxFoodConsumptionInterval = 0x778; // float
			constexpr auto TheMaxTorporIncreasePerBaseLevel = 0x77c; // float
			constexpr auto CurrentStatusValuesReplicationInterval = 0x780; // float
			constexpr auto InsulationHyperthermiaOffsetExponent = 0x784; // float
			constexpr auto InsulationHyperthermiaOffsetScaler = 0x788; // float
			constexpr auto InsulationHypothermiaOffsetExponent = 0x78c; // float
			constexpr auto InsulationHypothermiaOffsetScaler = 0x790; // float
			constexpr auto HypoCharacterInsulationValue = 0x794; // float
			constexpr auto HyperCharacterInsulationValue = 0x798; // float
			constexpr auto PoopItemFoodConsumptionCache = 0x79c; // float
			constexpr auto LastHypothermalCharacterInsulationValue = 0x7a0; // float
			constexpr auto LastHyperthermalCharacterInsulationValue = 0x7a4; // float
			constexpr auto MaxStatusValueToAutoUpdate = 0x7a8; // EPrimalCharacterStatusValue
			constexpr auto GenericXPMultiplier = 0x7ac; // float
			constexpr auto CraftEarnXPMultiplier = 0x7b0; // float
			constexpr auto MinInventoryWeight = 0x7b4; // float
			constexpr auto KillEarnXPMultiplier = 0x7b8; // float
			constexpr auto GenericEarnXPMultiplier = 0x7bc; // float
			constexpr auto SpecialEarnXPMultiplier = 0x7c0; // float
			constexpr auto HarvestEarnXPMultiplier = 0x7c4; // float
			constexpr auto DefaultHyperthermicInsulation = 0x7c8; // float
			constexpr auto DefaultHypothermicInsulation = 0x7cc; // float
			constexpr auto MaxTamingEffectivenessBaseLevelMultiplier = 0x7d0; // float
			constexpr auto FoodStatusNameOverride = 0x7d8; // FString
			constexpr auto FoodStatusIconBackgroundOverride = 0x7e8; // UTexture2D*
			constexpr auto FoodStatusIconForegroundOverride = 0x7f0; // UTexture2D*
			constexpr auto StatusValueModifierDescriptionIndices = 0x808; // TArray<char>
			constexpr auto CurrentStatusValues0xc = 0x818; // float
			constexpr auto AdditionalStatusValues0xc = 0x848; // float
			constexpr auto ReplicatedCurrentStatusValues0xc = 0x878; // float
			constexpr auto ReplicatedGlobalMaxStatusValues0xc = 0x8a8; // float
			constexpr auto ReplicatedBaseLevelMaxStatusValues0xc = 0x8d8; // float
			constexpr auto ReplicatedGlobalCurrentStatusValues0xc = 0x908; // float
			constexpr auto CurrentStatusStates0xc = 0x938; // uint8_t
			constexpr auto StaminaRecoveryExtraResourceDecreaseMultiplier = 0xac8; // float
			constexpr auto DehydrationStaminaRecoveryRate = 0xacc; // float
			constexpr auto WaterConsumptionMultiplier = 0xad0; // float
			constexpr auto FoodConsumptionMultiplier = 0xad4; // float
			constexpr auto EnteredStatusStateSounds = 0xad8; // TArray<USoundBase*>
			constexpr auto ExitStatusStateSounds = 0xae8; // TArray<USoundBase*>
			constexpr auto ExtraOxygenSpeedStatMultiplier = 0xaf8; // float
			constexpr auto ExtraTamedHealthMultiplier = 0xafc; // float
			constexpr auto WakingTameFoodConsumptionRateMultiplier = 0xb00; // float
			constexpr auto SwimmingStaminaRecoveryRateMultiplier = 0xb04; // float
			constexpr auto MountedDinoDinoWeightMultiplier = 0xb24; // float
			constexpr auto ExtraWildDinoDamageMultiplier = 0xb28; // float
			constexpr auto ExtraTamedDinoDamageMultiplier = 0xb2c; // float
			constexpr auto WeightMultiplierWhenCarriedOrBased = 0xb30; // float
			constexpr auto WeightMultiplierForCarriedPassengers = 0xb34; // float
			constexpr auto WeightMultiplierForPlatformPassengersInventory = 0xb38; // float
			constexpr auto DinoMaxStatAddMultiplierImprinting0xc = 0xb3c; // float
			constexpr auto DinoImprintingQuality = 0xb6c; // float
			constexpr auto bApplyingStatusValueModifiers = 0xb70; // char : 1
			constexpr auto bDontScaleMeleeDamage = 0xb70; // char : 1
			constexpr auto bForceGainOxygen = 0xb70; // char : 1
			constexpr auto bNoStaminaRecoveryWhenStarving = 0xb70; // char : 1
			constexpr auto bUseBPModifyMaxLevel = 0xb70; // char : 1
			constexpr auto bFreezeStatusValues = 0xb70; // char : 1
			constexpr auto TamedBaseHealthMultiplier = 0xb74; // float
			constexpr auto ExtraBabyDinoConsumingFoodRateMultiplier = 0xb78; // float
			constexpr auto StatusValueNameOverrides = 0xb80; // TArray<FString>
			constexpr auto RegainOxygenDamageType = 0xb90; // UDamageType*
			constexpr auto bForceAllowStatusModifierSortingWhenTamed = 0xb98; // bool
		}
		// Inheritance: ADino_Character_BP_C > APrimalDinoCharacter > APrimalCharacter > ACharacter > APawn > AActor > UObject
		namespace ARhino_Character_BP_C
		{
			constexpr auto DinoCharacterStatus_BP_Rhino_C1 = 0x2278; // UDinoCharacterStatusComponent_BP_Rhino_C*
			constexpr auto MaxExtraSpeedAdditionalDamagePercent = 0x2280; // float
		}
		// Inheritance: UActorComponent > UObject
		namespace UPrimalInventoryComponent
		{
			constexpr auto RemoteViewingInventoryPlayerControllers = 0x108; // TArray<TWeakObjectPtr<AShooterPlayerController>>
			constexpr auto InventoryItems = 0x118; // TArray<UPrimalItem*>
			constexpr auto EquippedItems = 0x128; // TArray<UPrimalItem*>
			constexpr auto ItemSlots = 0x138; // TArray<UPrimalItem*>
			constexpr auto ArkTributeItems = 0x148; // TArray<UPrimalItem*>
			constexpr auto AllDyeColorItems = 0x158; // TArray<UPrimalItem*>
			constexpr auto ItemCraftQueueEntries = 0x168; // TArray<FItemCraftQueueEntry>
			constexpr auto OverrideInventoryDefaultTab = 0x178; // int32_t
			constexpr auto bInitializedMe = 0x17c; // char : 1
			constexpr auto bReceivingEquippedItems = 0x17c; // char : 1
			constexpr auto bReceivingInventoryItems = 0x17c; // char : 1
			constexpr auto bReceivingArkInventoryItems = 0x17c; // char : 1
			constexpr auto bFreeCraftingMode = 0x17c; // char : 1
			constexpr auto bCanEquipItems = 0x17c; // char : 1
			constexpr auto bCanUseWeaponAsEquipment = 0x17c; // char : 1
			constexpr auto bCanInventoryItems = 0x17c; // char : 1
			constexpr auto bShowHiddenRemoteInventoryItems = 0x17d; // char : 1
			constexpr auto bUseCraftQueue = 0x17d; // char : 1
			constexpr auto bAllowItemStacking = 0x17d; // char : 1
			constexpr auto bPreventAutoDecreaseDurability = 0x17d; // char : 1
			constexpr auto bConsumeCraftingRepairingRequirementsOnStart = 0x17d; // char : 1
			constexpr auto bAllowRemoteRepairing = 0x17d; // char : 1
			constexpr auto bAllowRemoteCrafting = 0x17d; // char : 1
			constexpr auto bAllowDeactivatedCrafting = 0x17d; // char : 1
			constexpr auto bAddMaxInventoryItemsToDefaultItems = 0x17e; // char : 1
			constexpr auto bCheckForAutoCraftBlueprints = 0x17e; // char : 1
			constexpr auto bEquipmentMustRequireExplicitOwnerClass = 0x17e; // char : 1
			constexpr auto bDataListPadMaxInventoryItems = 0x17e; // char : 1
			constexpr auto bHideDefaultInventoryItemsFromDisplay = 0x17e; // char : 1
			constexpr auto bForceInventoryNonRemovable = 0x17e; // char : 1
			constexpr auto bForceInventoryBlueprints = 0x17e; // char : 1
			constexpr auto bIsTributeInventory = 0x17e; // char : 1
			constexpr auto bEquipmentPlayerForceRequireExplicitOwnerClass = 0x17f; // char : 1
			constexpr auto bEquipmentForceIgnoreExplicitOwnerClass = 0x17f; // char : 1
			constexpr auto bUseBPInventoryRefresh = 0x17f; // char : 1
			constexpr auto bUseBPInitializeInventory = 0x17f; // char : 1
			constexpr auto bUseBPAllowAddInventoryItem = 0x17f; // char : 1
			constexpr auto EquippableItemTypes = 0x180; // TArray<EPrimalEquipmentType>
			constexpr auto bOnlyOneCraftQueueItem = 0x190; // char : 1
			constexpr auto bRemoteInventoryAllowRemoveItems = 0x190; // char : 1
			constexpr auto bOverrideCraftingMinDurabilityRequirement = 0x190; // char : 1
			constexpr auto bRemoteInventoryOnlyAllowTribe = 0x190; // char : 1
			constexpr auto bReplicateComponent = 0x190; // char : 1
			constexpr auto bRepairingEnabled = 0x190; // char : 1
			constexpr auto bCraftingEnabled = 0x190; // char : 1
			constexpr auto bHideSaddleFromInventoryDisplay = 0x190; // char : 1
			constexpr auto bRemoteInventoryAllowAddItems = 0x191; // char : 1
			constexpr auto bAllowRemoteInventory = 0x191; // char : 1
			constexpr auto bUseCheatInventory = 0x191; // char : 1
			constexpr auto bAllowAddingToArkTribute = 0x191; // char : 1
			constexpr auto bRemoteInventoryOnlyAllowSelf = 0x191; // char : 1
			constexpr auto bMaxInventoryWeightUseCharacterStatus = 0x191; // char : 1
			constexpr auto bPreventDropInventoryDeposit = 0x191; // char : 1
			constexpr auto bShowItemDefaultFolders = 0x191; // char : 1
			constexpr auto bDisableDropAllItems = 0x192; // char : 1
			constexpr auto bIgnoreMaxInventoryItems = 0x192; // char : 1
			constexpr auto CraftingItemSpeed = 0x194; // float
			constexpr auto ItemSpoilingTimeMultipliers = 0x198; // TArray<FItemMultiplier>
			constexpr auto bIsSecondaryInventory = 0x1a8; // char : 1
			constexpr auto bRemoteOnlyAllowBlueprintsOrItemClasses = 0x1a8; // char : 1
			constexpr auto bPreventInventoryViewTrace = 0x1a8; // char : 1
			constexpr auto bSpawnActorOnTopOfStructure = 0x1a8; // char : 1
			constexpr auto bDropPhysicalInventoryDeposit = 0x1a8; // char : 1
			constexpr auto bUseExtendedCharacterCraftingFunctionality = 0x1a8; // char : 1
			constexpr auto bUseBPRemoteInventoryGetMaxVisibleSlots = 0x1a9; // char : 1
			constexpr auto bBPNotifyItemAdded = 0x1a9; // char : 1
			constexpr auto bUseBPGetExtraItemDisplay = 0x1a9; // char : 1
			constexpr auto bForceGenerateItemSets = 0x1a9; // char : 1
			constexpr auto bBPRemoteInventoryAllowRemoveItems = 0x1a9; // char : 1
			constexpr auto bGivesAchievementItems = 0x1a9; // char : 1
			constexpr auto bBPHandleAccessInventory = 0x1a9; // char : 1
			constexpr auto bBPAllowUseInInventory = 0x1a9; // char : 1
			constexpr auto bBPForceCustomRemoteInventoryAllowRemoveItems = 0x1aa; // char : 1
			constexpr auto bPreventCraftingResourceConsumption = 0x1aa; // char : 1
			constexpr auto bAllowWorldSettingsInventoryComponentAppends = 0x1aa; // char : 1
			constexpr auto bForceInventoryNotifyCraftingFinished = 0x1aa; // char : 1
			constexpr auto bBPForceCustomRemoteInventoryAllowAddItems = 0x1aa; // char : 1
			constexpr auto bBPOverrideItemMinimumUseInterval = 0x1aa; // char : 1
			constexpr auto bBPNotifyItemQuantityUpdated = 0x1aa; // char : 1
			constexpr auto bBPNotifyItemRemoved = 0x1aa; // char : 1
			constexpr auto bOverrideInventoryDepositClassDontForceDrop = 0x1ab; // char : 1
			constexpr auto bUseBPIsCraftingAllowed = 0x1ab; // char : 1
			constexpr auto bUseBPRemoteInventoryAllowCrafting = 0x1ab; // char : 1
			constexpr auto bNotifyAddedOnClientReceive = 0x1ab; // char : 1
			constexpr auto bIsTaxidermyBase = 0x1ab; // char : 1
			constexpr auto bDeferCheckForAutoCraftBlueprintsOnInventoryChange = 0x1ab; // char : 1
			constexpr auto bShowQuickSlotPanel = 0x1ab; // char : 1
			constexpr auto ExtraItemDisplay = 0x1b0; // UGenericDataListEntry*
			constexpr auto MaxInventoryItems = 0x1b8; // int32_t
			constexpr auto MaxInventoryWeight = 0x1bc; // float
			constexpr auto TribeGroupInventoryRank = 0x1c0; // char
			constexpr auto NumSlots = 0x1c4; // int32_t
			constexpr auto MaxItemCraftQueueEntries = 0x1c8; // int32_t
			constexpr auto RemoteInventoryDescriptionString = 0x1d0; // FString
			constexpr auto EngramRequirementClassOverride = 0x1e0; // UPrimalItem*
			constexpr auto RemoteAddItemOnlyAllowItemClasses = 0x1e8; // TArray<UPrimalItem*>
			constexpr auto RemoteAddItemPreventItemClasses = 0x1f8; // TArray<UPrimalItem*>
			constexpr auto EventItems = 0x208; // TArray<FEventItem>
			constexpr auto DefaultInventoryItems = 0x218; // TArray<UPrimalItem*>
			constexpr auto DefaultInventoryItems2 = 0x228; // TArray<UPrimalItem*>
			constexpr auto DefaultInventoryItems3 = 0x238; // TArray<UPrimalItem*>
			constexpr auto DefaultInventoryItems4 = 0x248; // TArray<UPrimalItem*>
			constexpr auto DefaultInventoryItemsClasses = 0x258; // TArray<UObject*>
			constexpr auto DefaultInventoryItemsRandomCustomStrings = 0x268; // TArray<FString>
			constexpr auto DefaultInventoryItemsRandomCustomStringsWeights = 0x278; // TArray<float>
			constexpr auto CheatInventoryItems = 0x288; // TArray<UPrimalItem*>
			constexpr auto DefaultEquippedItems = 0x298; // TArray<UPrimalItem*>
			constexpr auto DefaultEquippedItemSkins = 0x2a8; // TArray<UPrimalItem*>
			constexpr auto DefaultSlotItems = 0x2b8; // TArray<UPrimalItem*>
			constexpr auto ItemSpawnActorClassOverrides = 0x2c8; // TArray<FItemSpawnActorClassOverride>
			constexpr auto OnlyAllowCraftingItemClasses = 0x2d8; // TArray<UPrimalItem*>
			constexpr auto DefaultEngrams = 0x2e8; // TArray<char>
			constexpr auto DefaultEngrams2 = 0x2f8; // TArray<char>
			constexpr auto DefaultEngrams3 = 0x308; // TArray<char>
			constexpr auto DefaultEngrams4 = 0x318; // TArray<char>
			constexpr auto DefaultInventoryQualities = 0x328; // TArray<float>
			constexpr auto InventoryNameOverride = 0x338; // FString
			constexpr auto MaxRemoteInventoryViewingDistance = 0x348; // float
			constexpr auto ActiveInventoryRefreshInterval = 0x34c; // float
			constexpr auto AbsoluteMaxInventoryItems = 0x350; // int32_t
			constexpr auto LastInventoryRefreshTime = 0x358; // double
			constexpr auto DroppedItemTemplateOverride = 0x360; // ADroppedItem*
			constexpr auto ForceAllowItemStackings = 0x368; // TArray<UPrimalItem*>
			constexpr auto DropItemRotationOffset = 0x378; // FRotator
			constexpr auto ItemCraftingConsumptionReplenishments = 0x388; // TArray<FItemCraftingConsumptionReplenishment>
			constexpr auto MaxItemCooldownTimeClear = 0x398; // float
			constexpr auto MaxItemTemplateQuantities = 0x3a0; // TArray<FItemMultiplier>
			constexpr auto ItemCraftingSoundOverride = 0x3b0; // USoundBase*
			constexpr auto WeaponAsEquipmentAttachmentInfos = 0x3b8; // TArray<FActorClassAttachmentInfo>
			constexpr auto CraftingItems = 0x3c8; // TArray<UPrimalItem*>
			constexpr auto DisplayDefaultItemInventoryCount = 0x3d8; // int32_t
			constexpr auto LastRefreshCheckItemTime = 0x408; // double
			constexpr auto MinItemSets = 0x424; // float
			constexpr auto MaxItemSets = 0x428; // float
			constexpr auto NumItemSetsPower = 0x42c; // float
			constexpr auto bSetCraftingEnabledCheckForAutoCraftBlueprints = 0x430; // char : 1
			constexpr auto bAllDefaultInventoryIsEngrams = 0x430; // char : 1
			constexpr auto bUseBPRemoteInventoryAllowViewing = 0x430; // char : 1
			constexpr auto bUseBPCanGrindItems = 0x430; // char : 1
			constexpr auto bUseParentStructureIsValidCraftingResource = 0x430; // char : 1
			constexpr auto bUseBPIsValidCraftingResource = 0x430; // char : 1
			constexpr auto bForceAllowAllUseInInventory = 0x430; // char : 1
			constexpr auto bSetsRandomWithoutReplacement = 0x430; // char : 1
			constexpr auto bGrinderCanGrindAll = 0x431; // char : 1
			constexpr auto ItemSets = 0x438; // TArray<FSupplyCrateItemSet>
			constexpr auto AdditionalItemSets = 0x448; // TArray<FSupplyCrateItemSet>
			constexpr auto ItemSetsOverride = 0x458; // UPrimalSupplyCrateItemSets*
			constexpr auto SetQuantityWeights = 0x460; // TArray<float>
			constexpr auto SetQuantityValues = 0x470; // TArray<float>
			constexpr auto ItemRemovedBySound = 0x480; // USoundBase*
			constexpr auto OpenInventorySound = 0x488; // USoundBase*
			constexpr auto CloseInventorySound = 0x490; // USoundBase*
			constexpr auto MaxInventoryAccessDistance = 0x498; // float
			constexpr auto CustomFolderItems = 0x4a0; // TArray<FServerCustomFolder>
			constexpr auto ForceAllowCraftingForInventoryComponents = 0x4c0; // TArray<UPrimalInventoryComponent*>
			constexpr auto ItemClassWeightMultipliers = 0x4d0; // TArray<FItemMultiplier>
			constexpr auto GenerateItemSetsQualityMultiplierMin = 0x4e0; // float
			constexpr auto GenerateItemSetsQualityMultiplierMax = 0x4e4; // float
			constexpr auto DefaultCraftingRequirementsMultiplier = 0x4e8; // float
			constexpr auto DefaultCraftingQuantityMultiplier = 0x4ec; // int32_t
			constexpr auto ActionWheelAccessInventoryPriority = 0x4f0; // int32_t
			constexpr auto SavedForceDefaultInventoryRefreshVersion = 0x4f4; // int32_t
			constexpr auto ForceDefaultInventoryRefreshVersion = 0x4f8; // int32_t
			constexpr auto TamedDinoForceConsiderFoodTypes = 0x500; // TArray<UPrimalItem*>
			constexpr auto OverrideCraftingFinishedSound = 0x520; // USoundBase*
			constexpr auto GroundDropTraceLocationOffset = 0x540; // FVector
			constexpr auto OnInventoryItemAdded = 0x550; // FScriptMulticastDelegate
			constexpr auto OnInventoryItemRemoved = 0x560; // FScriptMulticastDelegate
			constexpr auto bHideTributeUploadDinosPanel = 0x570; // char : 1
			constexpr auto bIgnoreDLCEquipRestrictions = 0x570; // char : 1
			constexpr auto bIgnoreEngramEquipRestrictions = 0x570; // char : 1
			constexpr auto bUseBPOnTransferAll = 0x570; // char : 1
			constexpr auto bDisableTransferEquipmentOnTransferAll = 0x570; // char : 1
			constexpr auto MultiUseButtonStyleOverrides = 0x578; // TArray<FOverrideMultiuseButtonStyle>
			constexpr auto bUseCustomSorting = 0x588; // bool
		}
		// Inheritance: UObject
		namespace UPrimalItem
		{
			constexpr auto bCanBuildStructures = 0x50; // char : 1
			constexpr auto bPreventEquipOnTaxidermyBase = 0x50; // char : 1
			constexpr auto bAllowInventoryItem = 0x50; // char : 1
			constexpr auto bIsRepairing = 0x50; // char : 1
			constexpr auto bEquippedItem = 0x50; // char : 1
			constexpr auto bCanSlot = 0x50; // char : 1
			constexpr auto bUseItemColors = 0x50; // char : 1
			constexpr auto bAllowEquppingItem = 0x50; // char : 1
			constexpr auto bAllowCustomColors = 0x51; // char : 1
			constexpr auto bHideFromInventoryDisplay = 0x51; // char : 1
			constexpr auto bAutoCraftBlueprint = 0x51; // char : 1
			constexpr auto bForceAllowRemovalWhenDead = 0x51; // char : 1
			constexpr auto bForceDediAttachments = 0x51; // char : 1
			constexpr auto bUseBPPostAddBuffToGiveOwnerCharacter = 0x51; // char : 1
			constexpr auto bRefreshOnDyeUsed = 0x51; // char : 1
			constexpr auto bUseBPInitItemColors = 0x51; // char : 1
			constexpr auto bUseItemStats = 0x52; // char : 1
			constexpr auto bUseSpawnActorWhenRiding = 0x52; // char : 1
			constexpr auto bUseSpawnActor = 0x52; // char : 1
			constexpr auto bAllowDefaultCharacterAttachment = 0x52; // char : 1
			constexpr auto bUseItemDurability = 0x52; // char : 1
			constexpr auto bNewWeaponAutoFillClipAmmo = 0x52; // char : 1
			constexpr auto bDestroyBrokenItem = 0x52; // char : 1
			constexpr auto bIsMisssionItem = 0x52; // char : 1
			constexpr auto bIsCustomRecipe = 0x53; // char : 1
			constexpr auto bTekItem = 0x53; // char : 1
			constexpr auto bIsFoodRecipe = 0x53; // char : 1
			constexpr auto bIsBlueprint = 0x53; // char : 1
			constexpr auto bIsEngram = 0x53; // char : 1
			constexpr auto bCanBeBlueprint = 0x53; // char : 1
			constexpr auto bThrowOnHotKeyUse = 0x53; // char : 1
			constexpr auto bPreventUpload = 0x53; // char : 1
			constexpr auto bValidCraftingResource = 0x54; // char : 1
			constexpr auto bEquipRequiresDLC_ScorchedEarth = 0x54; // char : 1
			constexpr auto bUseBPSetupHUDIconMaterial = 0x54; // char : 1
			constexpr auto bEquipRequiresDLC_Aberration = 0x54; // char : 1
			constexpr auto bUseInWaterRestoreDurability = 0x54; // char : 1
			constexpr auto bUseBlueprintEquippedNotifications = 0x54; // char : 1
			constexpr auto bAllowRemoteUseInInventory = 0x54; // char : 1
			constexpr auto bAllowUseInInventory = 0x54; // char : 1
			constexpr auto bEquipRequiresDLC_Extinction = 0x55; // char : 1
			constexpr auto bEquipRequiresDLC_Genesis = 0x55; // char : 1
			constexpr auto bDurabilityRequirementIgnoredInWater = 0x55; // char : 1
			constexpr auto bAllowRepair = 0x55; // char : 1
			constexpr auto bCustomBrokenIcon = 0x55; // char : 1
			constexpr auto bAllowRemovalFromInventory = 0x55; // char : 1
			constexpr auto bFromSteamInventory = 0x55; // char : 1
			constexpr auto bIsFromAllClustersInventory = 0x55; // char : 1
			constexpr auto bCanUseSwimming = 0x56; // char : 1
			constexpr auto bRestoreDurabilityWhenColorized = 0x56; // char : 1
			constexpr auto bIsDescriptionOnlyItem = 0x56; // char : 1
			constexpr auto bAppendPrimaryColorToName = 0x56; // char : 1
			constexpr auto bOnlyCanUseInWater = 0x56; // char : 1
			constexpr auto bConsumeItemOnUse = 0x56; // char : 1
			constexpr auto bConfirmBeforeUsing = 0x56; // char : 1
			constexpr auto bUseBPOnItemConsumed = 0x56; // char : 1
			constexpr auto bUseScaleStatEffectivenessByDurability = 0x57; // char : 1
			constexpr auto bUsesCreationTime = 0x57; // char : 1
			constexpr auto bAllowUseWhileRiding = 0x57; // char : 1
			constexpr auto bPreventCraftingResourceAtFullDurability = 0x57; // char : 1
			constexpr auto bGiveItemWhenUsedCopyItemStats = 0x57; // char : 1
			constexpr auto bHideFromRemoteInventoryDisplay = 0x57; // char : 1
			constexpr auto bAutoDecreaseDurabilityOverTime = 0x57; // char : 1
			constexpr auto bPreventDragOntoOtherItemIfSameCustomData = 0x57; // char : 1
			constexpr auto bHideCustomDescription = 0x58; // char : 1
			constexpr auto bPickupEggAlertsDinos = 0x58; // char : 1
			constexpr auto bItemSkinIgnoreSkinIcon = 0x58; // char : 1
			constexpr auto bIsItemSkin = 0x58; // char : 1
			constexpr auto bDontResetAttachmentIfNotUpdatingItem = 0x58; // char : 1
			constexpr auto bSupportDragOntoOtherItem = 0x58; // char : 1
			constexpr auto bUseOnItemWeaponRemoveClipAmmo = 0x58; // char : 1
			constexpr auto bUseOnItemSetIndexAsDestinationItemCustomData = 0x58; // char : 1
			constexpr auto bCopyCustomDescriptionIntoSpoiledItem = 0x59; // char : 1
			constexpr auto bCopyDurabilityIntoSpoiledItem = 0x59; // char : 1
			constexpr auto bCraftedRequestCustomItemDescription = 0x59; // char : 1
			constexpr auto bForceAllowCustomItemDescription = 0x59; // char : 1
			constexpr auto bOnlyCanUseInFalling = 0x5a; // char : 1
			constexpr auto bAllowInvalidItemVersion = 0x5a; // char : 1
			constexpr auto bCanBeArkTributeItem = 0x5a; // char : 1
			constexpr auto bForceDropDestruction = 0x5a; // char : 1
			constexpr auto bPreventItemSkins = 0x5a; // char : 1
			constexpr auto bIsAbstractItem = 0x5a; // char : 1
			constexpr auto bSkinDisableWhenSubmerged = 0x5a; // char : 1
			constexpr auto bUseBPPreventUseOntoItem = 0x5a; // char : 1
			constexpr auto bUseSpawnActorRelativeLoc = 0x5b; // char : 1
			constexpr auto bUseSpawnActorTakeOwnerRotation = 0x5b; // char : 1
			constexpr auto bUseEquippedItemBlueprintTick = 0x5b; // char : 1
			constexpr auto bUseEquippedItemNativeTick = 0x5b; // char : 1
			constexpr auto bSpawnActorOnWaterOnly = 0x5b; // char : 1
			constexpr auto bAutoTameSpawnedActor = 0x5b; // char : 1
			constexpr auto bShowItemRatingAsPercent = 0x5b; // char : 1
			constexpr auto bPreventArmorDurabiltyConsumption = 0x5b; // char : 1
			constexpr auto bItemSkinReceiveOwnerEquippedBlueprintEvents = 0x5c; // char : 1
			constexpr auto bItemSkinKeepOriginalIcon = 0x5c; // char : 1
			constexpr auto bItemSkinKeepOriginalWeaponTemplate = 0x5c; // char : 1
			constexpr auto bDeprecateItem = 0x5c; // char : 1
			constexpr auto bDragClearDyedItem = 0x5c; // char : 1
			constexpr auto bIsCookingIngredient = 0x5c; // char : 1
			constexpr auto bIsEgg = 0x5c; // char : 1
			constexpr auto bItemSkinReceiveOwnerEquippedBlueprintTick = 0x5d; // char : 1
			constexpr auto bItemSkinAllowEquipping = 0x5d; // char : 1
			constexpr auto bForceDisplayInInventory = 0x5d; // char : 1
			constexpr auto bDroppedItemAllowDinoPickup = 0x5d; // char : 1
			constexpr auto bCraftDontActuallyGiveItem = 0x5d; // char : 1
			constexpr auto bPreventUseWhenSleeping = 0x5d; // char : 1
			constexpr auto bOverrideRepairingRequirements = 0x5d; // char : 1
			constexpr auto bScaleOverridenRepairingRequirements = 0x5d; // char : 1
			constexpr auto bDeprecateBlueprint = 0x5e; // char : 1
			constexpr auto bPreventConsumeItemOnDrag = 0x5e; // char : 1
			constexpr auto bForceAllowGrinding = 0x5e; // char : 1
			constexpr auto bForcePreventGrinding = 0x5e; // char : 1
			constexpr auto bOverrideExactClassCraftingRequirement = 0x5e; // char : 1
			constexpr auto bForceUseItemAddCharacterStatsOnDinos = 0x5e; // char : 1
			constexpr auto bForcePreventConsumableWhileHandcuffed = 0x5e; // char : 1
			constexpr auto bOnlyEquipWhenUnconscious = 0x5e; // char : 1
			constexpr auto bIsDinoAutoHealingItem = 0x5f; // char : 1
			constexpr auto bBPAllowRemoteAddToInventory = 0x5f; // char : 1
			constexpr auto bBPAllowRemoteRemoveFromInventory = 0x5f; // char : 1
			constexpr auto bEquipmentHatHideItemHeadHair = 0x5f; // char : 1
			constexpr auto bEquipmentHatHideItemFacialHair = 0x5f; // char : 1
			constexpr auto bEquipmentForceHairHiding = 0x5f; // char : 1
			constexpr auto bAllowRemoveFromSteamInventory = 0x5f; // char : 1
			constexpr auto bPreventDinoAutoConsume = 0x5f; // char : 1
			constexpr auto bPreventUseByHumans = 0x60; // char : 1
			constexpr auto bAllowOverrideItemAutoDecreaseDurability = 0x60; // char : 1
			constexpr auto bBPCanUse = 0x60; // char : 1
			constexpr auto bCheckBPAllowCrafting = 0x60; // char : 1
			constexpr auto bPreventUseByDinos = 0x60; // char : 1
			constexpr auto bPreventItemBlueprint = 0x60; // char : 1
			constexpr auto bUseBPAllowAddToInventory = 0x60; // char : 1
			constexpr auto bBPInventoryNotifyCraftingFinished = 0x60; // char : 1
			constexpr auto bUseBPCustomAutoDecreaseDurabilityPerInterval = 0x61; // char : 1
			constexpr auto bUseBPCustomInventoryWidgetTextColor = 0x61; // char : 1
			constexpr auto bUseBPCustomInventoryWidgetText = 0x61; // char : 1
			constexpr auto bUseBPCustomInventoryWidgetTextForBlueprint = 0x61; // char : 1
			constexpr auto bClearSkinOnInventoryRemoval = 0x61; // char : 1
			constexpr auto bIsInitialItem = 0x61; // char : 1
			constexpr auto bPickupEggForceAggro = 0x61; // char : 1
			constexpr auto bCopyItemDurabilityFromCraftingResource = 0x61; // char : 1
			constexpr auto bUseBPGetItemNetInfo = 0x62; // char : 1
			constexpr auto bPreventUploadingWeaponClipAmmo = 0x62; // char : 1
			constexpr auto bItemSkinKeepOriginalItemName = 0x62; // char : 1
			constexpr auto bUseBPCustomDurabilityText = 0x62; // char : 1
			constexpr auto bUseBPInitializeItem = 0x62; // char : 1
			constexpr auto bUseBPCustomDurabilityTextColor = 0x62; // char : 1
			constexpr auto bUseSkinnedBPCustomInventoryWidgetText = 0x62; // char : 1
			constexpr auto bUseBPInitFromItemNetInfo = 0x62; // char : 1
			constexpr auto bIgnoreMinimumUseIntervalForDinoAutoEatingFood = 0x63; // char : 1
			constexpr auto bHideMoreOptionsIfNonRemovable = 0x63; // char : 1
			constexpr auto bUnappliedItemSkinIgnoreItemAttachments = 0x63; // char : 1
			constexpr auto bUseBPGetItemDescription = 0x63; // char : 1
			constexpr auto bNameForceNoStatQualityRank = 0x63; // char : 1
			constexpr auto bResourcePreventGivingFromDemolition = 0x63; // char : 1
			constexpr auto bPreventNativeItemBroken = 0x63; // char : 1
			constexpr auto bAlwaysLearnedEngram = 0x63; // char : 1
			constexpr auto bUseBPCrafted = 0x64; // char : 1
			constexpr auto bUseBPGetItemName = 0x64; // char : 1
			constexpr auto bPreventUseAtTameLimit = 0x64; // char : 1
			constexpr auto bDivideTimeToCraftByGlobalCropGrowthSpeed = 0x64; // char : 1
			constexpr auto bPreventCheatGive = 0x64; // char : 1
			constexpr auto bUsingRequiresStandingOnSolidGround = 0x64; // char : 1
			constexpr auto bUseBPAddedAttachments = 0x64; // char : 1
			constexpr auto bUseBPConsumeProjectileImpact = 0x64; // char : 1
			constexpr auto bUseBPGetItemIcon = 0x65; // char : 1
			constexpr auto bUseBPForceAllowRemoteAddToInventory = 0x65; // char : 1
			constexpr auto bUseBPDrawItemIcon = 0x65; // char : 1
			constexpr auto bUseSlottedTick = 0x65; // char : 1
			constexpr auto bThrowUsesSecondaryActionDrop = 0x65; // char : 1
			constexpr auto bUseBPNotifyDropped = 0x65; // char : 1
			constexpr auto bUsableWithTekGrenadeLauncher = 0x65; // char : 1
			constexpr auto bUseBPOverrideProjectileType = 0x65; // char : 1
			constexpr auto bSkinAddWeightToSkinnedItem = 0x66; // char : 1
			constexpr auto bUseBPIsValidForCrafting = 0x66; // char : 1
			constexpr auto bUseBPOverrideCraftingConsumption = 0x66; // char : 1
			constexpr auto bMergeCustomDataFromCraftingResources = 0x66; // char : 1
			constexpr auto bIgnoreDrawingItemButtonIcon = 0x66; // char : 1
			constexpr auto bCensoredItemSkin = 0x66; // char : 1
			constexpr auto bUseBPGetItemDurabilityPercentage = 0x66; // char : 1
			constexpr auto bUseBPEquippedItemOnXPEarning = 0x66; // char : 1
			constexpr auto bUseBPGetMaxAmmo = 0x67; // char : 1
			constexpr auto bCustomBrokenOverlayIcon = 0x67; // char : 1
			constexpr auto bIsSPlusItem = 0x67; // char : 1
			constexpr auto bPreventRemovingClipAmmo = 0x67; // char : 1
			constexpr auto bDeferWeaponBeginPlayToAssociatedItemSetTime = 0x67; // char : 1
			constexpr auto bAlwaysTriggerTributeDownloaded = 0x67; // char : 1
			constexpr auto CostumeDinoSaddleOverrideMesh = 0x68; // USkeletalMesh*
			constexpr auto CostumeDinoSaddleOverrideTorchMesh = 0x70; // USkeletalMesh*
			constexpr auto DinoAutoHealingThresholdPercent = 0x78; // float
			constexpr auto DinoAutoHealingUseTimeInterval = 0x7c; // float
			constexpr auto ArkTributeVersion = 0x80; // int32_t
			constexpr auto EquipRequiresExplicitOwnerClasses = 0x88; // TArray<AActor*>
			constexpr auto EquipRequiresExplicitOwnerTags = 0x98; // TArray<FName>
			constexpr auto BuffToGiveOwnerWhenEquipped = 0xa8; // APrimalBuff*
			constexpr auto BuffToGiveOwnerWhenEquipped_BlueprintPath = 0xb0; // FString
			constexpr auto ExpirationTimeUTC = 0xc4; // uint32_t
			constexpr auto BlueprintAllowMaxCraftings = 0xc8; // int32_t
			constexpr auto AbstractItemCraftingDescription = 0xd0; // FString
			constexpr auto ItemSkinUseOnItemClasses = 0xe0; // TArray<UPrimalItem*>
			constexpr auto ItemSkinPreventOnItemClasses = 0xf0; // TArray<UPrimalItem*>
			constexpr auto ItemBrokenSound = 0x100; // USoundBase*
			constexpr auto UseItemSound = 0x108; // USoundCue*
			constexpr auto EquipSound = 0x110; // USoundBase*
			constexpr auto UnEquipSound = 0x118; // USoundBase*
			constexpr auto UsedOnOtherItemSound = 0x120; // USoundBase*
			constexpr auto RemovedFromOtherItemSound = 0x128; // USoundBase*
			constexpr auto RandomChanceToBeBlueprint = 0x130; // float
			constexpr auto ActorClassAttachmentInfos = 0x138; // TArray<FActorClassAttachmentInfo>
			constexpr auto ItemSkinAddItemAttachments = 0x160; // TArray<FItemAttachmentInfo>
			constexpr auto MyItemType = 0x170; // EPrimalItemType
			constexpr auto MyConsumableType = 0x171; // EPrimalConsumableType
			constexpr auto MyEquipmentType = 0x172; // EPrimalEquipmentType
			constexpr auto ExtraItemCategoryFlags = 0x174; // int32_t
			constexpr auto ItemIconScale = 0x178; // float
			constexpr auto BlockingShieldFPVTranslation = 0x17c; // FVector
			constexpr auto BlockingShieldFPVRotation = 0x188; // FRotator
			constexpr auto ShieldBlockDamagePercentage = 0x194; // float
			constexpr auto ShieldDamageToDurabilityRatio = 0x198; // float
			constexpr auto PlayAnimationOnUse = 0x1a0; // UAnimMontage*
			constexpr auto bHideDuringEquipAnimation = 0x1a8; // bool
			constexpr auto ShowAnimationMale = 0x1b0; // UAnimMontage*
			constexpr auto ShowAnimationFemale = 0x1b8; // UAnimMontage*
			constexpr auto HideAnimationMale = 0x1c0; // UAnimMontage*
			constexpr auto HideAnimationFemale = 0x1c8; // UAnimMontage*
			constexpr auto CraftingMinLevelRequirement = 0x1d0; // int32_t
			constexpr auto CraftingCooldownInterval = 0x1d4; // float
			constexpr auto CraftingActorToSpawn = 0x1d8; // AActor*
			constexpr auto BlueprintBackgroundOverrideTexture = 0x1e0; // UTexture2D*
			constexpr auto CraftItemButtonStringOverride = 0x1e8; // FString
			constexpr auto UseSpawnActorClass = 0x1f8; // AActor*
			constexpr auto UseSpawnActorLocOffset = 0x200; // FVector
			constexpr auto SlotIndex = 0x20c; // int32_t
			constexpr auto ItemId = 0x210; // FItemNetID
			constexpr auto ItemCustomData = 0x218; // int32_t
			constexpr auto ItemCustomClass = 0x220; // UPrimalItem*
			constexpr auto ItemSkinTemplateIndex = 0x228; // int32_t
			constexpr auto ItemSkinTemplate = 0x230; // UPrimalItem*
			constexpr auto ItemRating = 0x238; // float
			constexpr auto CraftQueue = 0x23c; // uint16_t
			constexpr auto CraftingSkill = 0x240; // float
			constexpr auto CustomItemName = 0x248; // FString
			constexpr auto CustomItemDescription = 0x258; // FString
			constexpr auto CustomColors = 0x268; // TArray<FColor>
			constexpr auto CustomResourceRequirements = 0x278; // TArray<FCraftingResourceRequirement>
			constexpr auto NextCraftCompletionTime = 0x288; // double
			constexpr auto OwnerInventory = 0x290; // TWeakObjectPtr<UPrimalInventoryComponent>
			constexpr auto ItemQualityIndex = 0x298; // char
			constexpr auto SupportDragOntoItemClass = 0x2a0; // UPrimalItem*
			constexpr auto SupportDragOntoItemClasses = 0x2a8; // TArray<UPrimalItem*>
			constexpr auto SkinWeaponTemplates = 0x2b8; // TArray<AShooterWeapon*>
			constexpr auto SupportAmmoItemForWeaponSkin = 0x2c8; // TArray<UPrimalItem*>
			constexpr auto SkinWeaponTemplatesForAmmo = 0x2d8; // TArray<AShooterWeapon*>
			constexpr auto AmmoSupportDragOntoWeaponItemWeaponTemplate = 0x2e8; // AShooterWeapon*
			constexpr auto AmmoSupportDragOntoWeaponItemWeaponTemplates = 0x2f0; // TArray<AShooterWeapon*>
			constexpr auto UseItemAddCharacterStatusValues = 0x300; // TArray<FUseItemAddCharacterStatusValue>
			constexpr auto Ingredient_WeightIncreasePerQuantity = 0x310; // float
			constexpr auto Ingredient_FoodIncreasePerQuantity = 0x314; // float
			constexpr auto Ingredient_HealthIncreasePerQuantity = 0x318; // float
			constexpr auto Ingredient_WaterIncreasePerQuantity = 0x31c; // float
			constexpr auto Ingredient_StaminaIncreasePerQuantity = 0x320; // float
			constexpr auto DescriptiveNameBase = 0x328; // FString
			constexpr auto ItemDescription = 0x338; // FString
			constexpr auto DurabilityStringShort = 0x348; // FString
			constexpr auto DurabilityString = 0x358; // FString
			constexpr auto CustomRepairText = 0x368; // FString
			constexpr auto DroppedItemLifeSpanOverride = 0x378; // float
			constexpr auto DroppedMeshOverride = 0x380; // UStaticMesh*
			constexpr auto DroppedMeshMaterialOverride = 0x388; // UMaterialInterface*
			constexpr auto DroppedMeshOverrideScale3D = 0x390; // FVector
			constexpr auto SpoilingItem = 0x3a0; // UPrimalItem*
			constexpr auto UseRequiresOwnerActorClasses = 0x3a8; // TArray<AActor*>
			constexpr auto PreservingItemClass = 0x3b8; // UPrimalItem*
			constexpr auto PreservingItemSpoilingTimeMultiplier = 0x3c0; // float
			constexpr auto SpoilingTime = 0x3c4; // float
			constexpr auto CraftingConsumesDurability = 0x3c8; // int32_t
			constexpr auto RepairResourceRequirementMultiplier = 0x3cc; // float
			constexpr auto BaseItemWeight = 0x3d0; // float
			constexpr auto DurabilityIncreaseMultiplier = 0x3d4; // float
			constexpr auto NewItemDurabilityOverride = 0x3d8; // float
			constexpr auto DurabilityDecreaseMultiplier = 0x3dc; // float
			constexpr auto UseDecreaseDurability = 0x3e0; // float
			constexpr auto AutoDurabilityDecreaseInterval = 0x3e4; // float
			constexpr auto AutoDecreaseMinDurability = 0x3e8; // float
			constexpr auto AutoDecreaseDurabilityAmountPerInterval = 0x3ec; // float
			constexpr auto UseDecreaseDurabilityMin = 0x3f0; // float
			constexpr auto UseMinDurabilityRequirement = 0x3f4; // float
			constexpr auto ResourceRarity = 0x3f8; // float
			constexpr auto BlueprintTimeToCraft = 0x3fc; // float
			constexpr auto MinBlueprintTimeToCraft = 0x400; // float
			constexpr auto BlueprintWeight = 0x404; // float
			constexpr auto MinimumUseInterval = 0x408; // float
			constexpr auto TimeForFullRepair = 0x40c; // float
			constexpr auto BaseCraftingXP = 0x410; // float
			constexpr auto BaseRepairingXP = 0x414; // float
			constexpr auto BaseCraftingResourceRequirements = 0x418; // TArray<FCraftingResourceRequirement>
			constexpr auto OverrideRepairingRequirements = 0x428; // TArray<FCraftingResourceRequirement>
			constexpr auto ItemStatInfos0x8 = 0x438; // FItemStatInfo
			constexpr auto ItemStatValues0x8 = 0x558; // uint16_t
			constexpr auto WeaponClipAmmo = 0x568; // uint32_t
			constexpr auto WeaponFrequency = 0x56c; // float
			constexpr auto LastTimeToShowInfo = 0x570; // double
			constexpr auto ItemVersion = 0x578; // char
			constexpr auto ItemDurability = 0x57c; // float
			constexpr auto MinItemDurability = 0x580; // float
			constexpr auto SavedDurability = 0x584; // float
			constexpr auto WeaponTemplate = 0x588; // AShooterWeapon*
			constexpr auto BrokenIcon = 0x590; // UTexture2D*
			constexpr auto CustomBrokenOverlayIcon = 0x598; // UTexture2D*
			constexpr auto ItemIcon = 0x5a0; // UTexture2D*
			constexpr auto AlternateItemIconBelowDurability = 0x5a8; // UTexture2D*
			constexpr auto AlternateItemIconBelowDurabilityValue = 0x5b0; // float
			constexpr auto DurabilityNotifyThresholdValue = 0x5b4; // float
			constexpr auto ItemIconMaterialParent = 0x5b8; // UMaterialInterface*
			constexpr auto ItemColorID0x6 = 0x5c0; // int16_t
			constexpr auto PreSkinItemColorID0x6 = 0x5cc; // int16_t
			constexpr auto bUseItemColor0x6 = 0x5d8; // char
			constexpr auto RandomColorSet = 0x5e0; // UPrimalColorSet*
			constexpr auto ItemIconMaterial = 0x5e8; // UMaterialInstanceDynamic*
			constexpr auto HUDIconMaterial = 0x5f0; // UMaterialInstanceDynamic*
			constexpr auto ItemQuantity = 0x5f8; // int32_t
			constexpr auto MaxItemQuantity = 0x5fc; // int32_t
			constexpr auto EquippedHideOtherEquipmentAttachTypes = 0x600; // TArray<EPrimalEquipmentType>
			constexpr auto SteamItemUserIDs = 0x610; // TArray<uint64_t>
			constexpr auto StructureToBuild = 0x620; // APrimalStructure*
			constexpr auto GiveItemWhenUsed = 0x628; // UPrimalItem*
			constexpr auto CraftingRequiresInventoryComponent = 0x630; // TArray<UPrimalInventoryComponent*>
			constexpr auto DroppedItemTemplateOverride = 0x640; // ADroppedItem*
			constexpr auto DroppedItemTemplateForSecondryAction = 0x648; // ADroppedItem*
			constexpr auto BuffToGiveOwnerCharacter = 0x650; // APrimalBuff*
			constexpr auto PreviewCameraRotation = 0x658; // FRotator
			constexpr auto PreviewCameraPivotOffset = 0x664; // FVector
			constexpr auto PreviewCameraDistanceScaleFactor = 0x670; // float
			constexpr auto PreviewCameraDefaultZoomMultiplier = 0x674; // float
			constexpr auto PreviewCameraMaxZoomMultiplier = 0x678; // float
			constexpr auto CreationTime = 0x6c0; // double
			constexpr auto LastAutoDurabilityDecreaseTime = 0x6c8; // double
			constexpr auto LastUseTime = 0x6d0; // double
			constexpr auto MaxCustomItemDescriptionLength = 0x6e0; // int32_t
			constexpr auto TempSlotIndex = 0x6e4; // int32_t
			constexpr auto LastSlotIndex = 0x6e8; // int32_t
			constexpr auto AssociatedWeapon = 0x6ec; // TWeakObjectPtr<AShooterWeapon>
			constexpr auto MyItemSkin = 0x6f8; // UPrimalItem*
			constexpr auto SkinnedOntoItem = 0x700; // UPrimalItem*
			constexpr auto LastOwnerPlayer = 0x708; // TWeakObjectPtr<AShooterCharacter>
			constexpr auto CropPhasesData = 0x710; // TArray<FCropItemPhaseData>
			constexpr auto CropGrowingFertilizerConsumptionRate = 0x720; // float
			constexpr auto CropMaxFruitFertilizerConsumptionRate = 0x724; // float
			constexpr auto CropGrowingWaterConsumptionRate = 0x728; // float
			constexpr auto CropMaxFruitWaterConsumptionRate = 0x72c; // float
			constexpr auto CropMaxFruits = 0x730; // int32_t
			constexpr auto CropNoFertilizerOrWaterCacheReductionRate = 0x734; // float
			constexpr auto FertilizerEffectivenessMultiplier = 0x738; // float
			constexpr auto EggAlertDinosAggroAmount = 0x73c; // float
			constexpr auto EggAlertDinosAggroRadius = 0x740; // float
			constexpr auto EggAlertDinosAggroTags = 0x748; // TArray<FName>
			constexpr auto EggAlertDinosForcedAggroTime = 0x758; // float
			constexpr auto EggMaximumDistanceFromOriginalDropToAlertDinos = 0x75c; // float
			constexpr auto BrokenGiveItemClass = 0x760; // UPrimalItem*
			constexpr auto ClearColorDurabilityThreshold = 0x768; // float
			constexpr auto ItemClassToUseAsInitialCustomData = 0x770; // UPrimalItem*
			constexpr auto OriginalItemDropLocation = 0x778; // FVector
			constexpr auto DurabilityBarColorForeground = 0x784; // FLinearColor
			constexpr auto DurabilityBarColorBackground = 0x794; // FLinearColor
			constexpr auto OverrideCooldownTimeItemClass = 0x7a8; // UPrimalItem*
			constexpr auto MinDurabilityForCraftingResource = 0x7b0; // float
			constexpr auto ResourceRequirementIncreaseRatingPower = 0x7b4; // float
			constexpr auto ResourceRequirementRatingScale = 0x7b8; // float
			constexpr auto ResourceRequirementRatingIncreasePercentage = 0x7bc; // float
			constexpr auto NextSpoilingTime = 0x7c0; // double
			constexpr auto LastSpoilingTime = 0x7c8; // double
			constexpr auto DefaultFolderPaths = 0x7d0; // TArray<FString>
			constexpr auto ItemRatingString = 0x7e0; // FString
			constexpr auto DefaultWeaponMeshName = 0x7f0; // FName
			constexpr auto EngramRequirementItemClassOverride = 0x800; // UPrimalItem*
			constexpr auto ExtraThrowItemSound = 0x818; // USoundBase*
			constexpr auto SpawnOnWaterEncroachmentBoxExtent = 0x820; // FVector
			constexpr auto OnlyUsableOnSpecificClasses = 0x830; // TArray<AActor*>
			constexpr auto SaddlePassengerSeats = 0x840; // TArray<FSaddlePassengerSeatDefinition>
			constexpr auto SaddleOverrideRiderSocketName = 0x850; // FName
			constexpr auto EggDinoClassToSpawn = 0x858; // APrimalDinoCharacter*
			constexpr auto EggNumberOfLevelUpPointsApplied0xc = 0x860; // char
			constexpr auto EggTamedIneffectivenessModifier = 0x86c; // float
			constexpr auto EggColorSetIndices0x6 = 0x870; // char
			constexpr auto EggGenderOverride = 0x878; // int32_t
			constexpr auto EggLoseDurabilityPerSecond = 0x87c; // float
			constexpr auto ExtraEggLoseDurabilityPerSecondMultiplier = 0x880; // float
			constexpr auto EggMinTemperature = 0x884; // float
			constexpr auto EggMaxTemperature = 0x888; // float
			constexpr auto EggDroppedInvalidTempLoseItemRatingSpeed = 0x88c; // float
			constexpr auto ShieldHitSound = 0x890; // USoundBase*
			constexpr auto RecipeCraftingSkillScale = 0x898; // float
			constexpr auto CustomItemID = 0x89c; // int32_t
			constexpr auto AddDinoTargetingRange = 0x8a0; // float
			constexpr auto DamageTorpidityArmorRating = 0x8a4; // float
			constexpr auto IndirectTorpidityArmorRating = 0x8a8; // float
			constexpr auto UseParticleEffect = 0x8b0; // APrimalEmitterSpawnable*
			constexpr auto UseParticleEffectSocketName = 0x8b8; // FName
			constexpr auto UseGiveDinoTameAffinityPercent = 0x8c0; // float
			constexpr auto CraftingAdditionalItemsToGive = 0x8c8; // TArray<UPrimalItem*>
			constexpr auto LastValidItemVersion = 0x8d8; // int32_t
			constexpr auto GlobalTameAffinityMultiplier = 0x8dc; // float
			constexpr auto CraftingGiveItemCount = 0x8e0; // int32_t
			constexpr auto CraftingGivesItemQuantityOverride = 0x8e4; // int32_t
			constexpr auto UseItemOnItemSound = 0x8e8; // USoundBase*
			constexpr auto UseUnlocksEmoteName = 0x8f0; // FName
			constexpr auto EggDinoAncestors = 0x900; // TArray<FDinoAncestorsEntry>
			constexpr auto EggDinoAncestorsMale = 0x910; // TArray<FDinoAncestorsEntry>
			constexpr auto EggRandomMutationsFemale = 0x920; // int32_t
			constexpr auto EggRandomMutationsMale = 0x924; // int32_t
			constexpr auto EquippingRequiresEngrams = 0x928; // TArray<UPrimalItem*>
			constexpr auto CustomItemDatas = 0x938; // TArray<FCustomItemData>
			constexpr auto OverrideUseString = 0x948; // FString
			constexpr auto SendToClientClassOverride = 0x958; // UPrimalItem*
			constexpr auto CrafterCharacterName = 0x960; // FString
			constexpr auto CrafterTribeName = 0x970; // FString
			constexpr auto CraftedSkillBonus = 0x980; // float
			constexpr auto CraftingSkillQualityMultiplierMin = 0x984; // float
			constexpr auto CraftingSkillQualityMultiplierMax = 0x988; // float
			constexpr auto SinglePlayerCraftingSpeedMultiplier = 0x98c; // float
			constexpr auto NoLevelEngramSortingPriority = 0x990; // int32_t
			constexpr auto CustomFlags = 0x994; // int32_t
			constexpr auto CustomTag = 0x998; // FName
			constexpr auto EquippedReduceDurabilityInterval = 0x9a0; // float
			constexpr auto LastEquippedReduceDurabilityTime = 0x9a8; // double
			constexpr auto EquippedReduceDurabilityPerInterval = 0x9b0; // float
			constexpr auto ItemStatClampsMultiplier = 0x9b4; // float
			constexpr auto MaxDurabiltiyOverride = 0x9b8; // float
			constexpr auto NextRepairPercentage = 0x9d0; // float
			constexpr auto NetDroppedMeshOverride = 0x9d8; // UStaticMesh*
			constexpr auto NetDroppedMeshMaterialOverride = 0x9e0; // UMaterialInterface*
			constexpr auto NetDroppedMeshOverrideScale3D = 0x9e8; // FVector
			constexpr auto bNonBlockingShield = 0x9f4; // char : 1
			constexpr auto bNetInfoFromClient = 0x9f4; // char : 1
			constexpr auto bForceAllowSkinColorization = 0x9f4; // char : 1
			constexpr auto bDisableItemUITooltip = 0x9f4; // char : 1
			constexpr auto bPreventDepositDropping = 0x9f4; // char : 1
			constexpr auto bEquipAddTekExtendedInfo = 0x9f4; // char : 1
			constexpr auto bAllowCraftingWithStarterAmmo = 0x9f4; // char : 1
			constexpr auto WidgetCustomBrokenOverlayStyleBrush = 0x9f8; // FSlateBrush
			constexpr auto CustomBrokenBorderColor = 0xa70; // FColor
			constexpr auto DyePreviewMeshOverrideSK = 0xa78; // USkeletalMesh*
			constexpr auto DyePreviewMeshOverrideSM = 0xa80; // UStaticMesh*
			constexpr auto AccessoryActivatedIconOverride = 0xa88; // UTexture2D*
			constexpr auto CustomItemTooltipOverride = 0xa90; // UUserWidget*
			constexpr auto bUseBlueprintAnimNotifications = 0xa98; // bool
			constexpr auto bUseBPPreventUpload = 0xa99; // bool
			constexpr auto EquippingCosmeticRequiresUnlockedEmoteName = 0xa9c; // FName
			constexpr auto CustomInventoryWidgetTextVerticalOffset = 0xaa4; // float
			constexpr auto bUseCustomContextMenuOptions = 0xaa8; // bool
			constexpr auto TopLevelCustomContextMenuOptions = 0xab0; // TArray<FName>
			constexpr auto CustomContextSubMenus = 0xac0; // TArray<FCustomContextSubmenu>
			constexpr auto CustomContextOptionData = 0xad0; // TArray<FCustomContextMenuData>
			constexpr auto bPreventModifyArmorValue = 0xae0; // bool
		}
		// Inheritance: AShooterWeapon_Projectile > AShooterWeapon > AActor > UObject
		namespace APrimalWeaponBow
		{
			constexpr auto MinimumInitialSpeed = 0xe30; // float
			constexpr auto MaximumInitialSpeed = 0xe34; // float
			constexpr auto PullingTimeForMaximumSpeed = 0xe38; // float
			constexpr auto DamageFactorForSlowArrows = 0xe3c; // float
			constexpr auto DamageFactorForFastArrows = 0xe40; // float
			constexpr auto MinimumPullingTimeToFire = 0xe44; // float
			constexpr auto bDisablePullingOnCrouch = 0xe48; // char : 1
			constexpr auto bDisablePullingOnProne = 0xe48; // char : 1
			constexpr auto MaxPullCameraShake = 0xe50; // UCameraShake*
			constexpr auto ArrowBoneName = 0xe58; // FName
			constexpr auto PullStringAnim = 0xe60; // FWeaponAnim
			constexpr auto bHideWeaponOnLaunch = 0xe70; // char : 1
			constexpr auto bUseArrowMesh1P = 0xe70; // char : 1
			constexpr auto bHideOriginalArrowBone1P = 0xe70; // char : 1
			constexpr auto bAttachArrowToWeaponMesh3P = 0xe70; // char : 1
			constexpr auto bReloadOnEmptyClip = 0xe70; // char : 1
			constexpr auto ArrowOnWeaponAttachPoint3P = 0xe74; // FName
			constexpr auto ArrowMesh3P = 0xe80; // UStaticMeshComponent*
			constexpr auto ArrowAttachPoint3P = 0xe88; // FName
			constexpr auto ArrowMesh1P = 0xe90; // UStaticMeshComponent*
			constexpr auto ArrowAttachPoint1P = 0xe98; // FName
			constexpr auto bPendingPullString = 0xea0; // char : 1
			constexpr auto bNewPullStringEvent = 0xea0; // char : 1
			constexpr auto bIsPullingString = 0xea0; // char : 1
			constexpr auto bIsPlayingPullStringAnim = 0xea0; // char : 1
			constexpr auto bDidFireWeapon = 0xea0; // char : 1
			constexpr auto bIsLastArrow = 0xea0; // char : 1
			constexpr auto bDontRequireIdleForReload = 0xea0; // char : 1
			constexpr auto bUseBPCanStartFire = 0xea0; // char : 1
			constexpr auto bForceServerCheckPullingTime = 0xea1; // char : 1
			constexpr auto PullingTime = 0xea4; // float
			constexpr auto ProjectileSpeed = 0xea8; // float
		}
		// Inheritance: ABuff_TekArmor_C > ABuff_OverrideVelocity_C > APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_TekArmor_Shirt_Rework_C
		{
			constexpr auto BoostReadySound = 0xb30; // UAudioComponent*
			constexpr auto ThrusterBoostSound = 0xb38; // UAudioComponent*
			constexpr auto JetpackExhaust = 0xb40; // UParticleSystemComponent*
			constexpr auto ThrusterBoostFX = 0xb48; // UParticleSystemComponent*
			constexpr auto JetpackActivationSounds = 0xb50; // UAudioComponent*
			constexpr auto bCanBoost = 0xb58; // bool
			constexpr auto ThrusterSocketName = 0xb5c; // FName
			constexpr auto VFX_BoostFX_Air = 0xb68; // UParticleSystem*
			constexpr auto VFX_BoostFX_Water = 0xb70; // UParticleSystem*
			constexpr auto VFX_GroundBoostCloud = 0xb78; // UParticleSystem*
			constexpr auto Ref_BoostSound = 0xb80; // USoundCue*
			constexpr auto BoostVelocityZ = 0xb88; // float
			constexpr auto lastJumpPressTime = 0xb90; // double
			constexpr auto CurrentThrusterState = 0xb98; // E_TekThrusterState
			constexpr auto PreviousThrusterState = 0xb99; // E_TekThrusterState
			constexpr auto bWantsToThrust = 0xb9a; // bool
			constexpr auto ElementCost_Thrust = 0xb9c; // int32_t
			constexpr auto boostCooldownTime = 0xba0; // float
			constexpr auto lastBoostTime = 0xba8; // double
			constexpr auto MovementInput = 0xbb0; // FVector
			constexpr auto ElementCost_Boost = 0xbbc; // int32_t
			constexpr auto BoostAnim_Air = 0xbc0; // UAnimMontage*
			constexpr auto BoostAnim_Water = 0xbc8; // UAnimMontage*
			constexpr auto bThrusterJetDisabledForFPV = 0xbd0; // bool
			constexpr auto ThrusterSoundFadeDuration = 0xbd4; // float
			constexpr auto Ref_TekShirt = 0xbd8; // UPrimalItemArmor_TekShirt_C*
			constexpr auto TimeAfterGroundedJumpToExtendBoostPressInterval = 0xbe0; // float
			constexpr auto JetpackSound_Air_On = 0xbe8; // USoundCue*
			constexpr auto JetpackSound_Air_Loop = 0xbf0; // USoundCue*
			constexpr auto JetpackSound_Air_Off = 0xbf8; // USoundCue*
			constexpr auto BoostGroundFXCheckDistance = 0xc00; // float
			constexpr auto ThrusterImpulseZ_Hover = 0xc04; // float
			constexpr auto ThrusterImpulseZ_Thrust = 0xc08; // float
			constexpr auto ThrusterImpulseZ_StopFalling = 0xc0c; // float
			constexpr auto TerminalVelocity = 0xc10; // float
			constexpr auto ThrustDelay_Current = 0xc14; // float
			constexpr auto ThrustDelay_Ground = 0xc18; // float
			constexpr auto ThrustDelay_Air = 0xc1c; // float
			constexpr auto airControl_hover = 0xc20; // float
			constexpr auto airControl_thrust = 0xc24; // float
			constexpr auto MinJumpPressTimeForBoost_current = 0xc28; // float
			constexpr auto MinJumpPressTimeForBoost_ground = 0xc2c; // float
			constexpr auto MinJumpPressTimeForBoost_air = 0xc30; // float
			constexpr auto BoostDuration = 0xc34; // float
			constexpr auto EndStoppingImpulseVelocityZ = 0xc38; // float
			constexpr auto ThrustingAirFriction = 0xc3c; // float
			constexpr auto GroundedHoverStartImpulseZ = 0xc40; // float
			constexpr auto maxHoverStabilizeImpulse = 0xc44; // float
			constexpr auto minThrustingStopImpulse = 0xc48; // float
			constexpr auto bJumpPressed = 0xc4c; // bool
			constexpr auto bSprintPressed = 0xc4d; // bool
			constexpr auto bCreateRipplesOnWater = 0xc4e; // bool
			constexpr auto bIsUnderwater = 0xc4f; // bool
			constexpr auto JetImpulse_Up = 0xc50; // float
			constexpr auto JetImpulse_Forward = 0xc54; // float
			constexpr auto ElementCost_Hover = 0xc58; // int32_t
			constexpr auto JetImpulse_Boost = 0xc5c; // float
			constexpr auto Impulse_EscapeWater = 0xc60; // float
			constexpr auto maxNonBoostingVelocity = 0xc64; // float
			constexpr auto maxLeavingWaterVelocity_boosting = 0xc68; // float
			constexpr auto aboveWater_ThrusterSocketOffset = 0xc6c; // FVector
			constexpr auto Ref_AboveWaterVolume = 0xc78; // APhysicsVolume*
			constexpr auto ThrusterCameraShakeScale = 0xc80; // float
			constexpr auto VFX_ThrusterJet_Air = 0xc88; // UParticleSystem*
			constexpr auto VFX_ThrusterJet_Water = 0xc90; // UParticleSystem*
			constexpr auto FX_ThrusterBoost_Water = 0xc98; // UParticleSystem*
			constexpr auto FX_ThrusterBoost_Air = 0xca0; // UParticleSystem*
			constexpr auto VFX_ThrusterExhaust_Air = 0xca8; // UParticleSystem*
			constexpr auto VFX_ThrusterExhaust_Water = 0xcb0; // UParticleSystem*
			constexpr auto distanceFromWaterSurfaceToEscape = 0xcb8; // float
			constexpr auto bIsChargeThrusting = 0xcbc; // bool
			constexpr auto Anim_ChargeThrust_TPV = 0xcc0; // UAnimMontage*
			constexpr auto Anim_ChargeThrust_FPV = 0xcc8; // UAnimMontage*
			constexpr auto underwaterThrusterScale = 0xcd0; // float
			constexpr auto underwaterServerTickInterval = 0xcd4; // float
			constexpr auto thrusterLightRadius_Swimming = 0xcd8; // float
			constexpr auto thrusterLightRadius_hover = 0xcdc; // float
			constexpr auto thrusterLightRadius_thrust = 0xce0; // float
			constexpr auto JetpackSound_Water_On = 0xce8; // USoundCue*
			constexpr auto JetpackSound_Water_Loop = 0xcf0; // USoundCue*
			constexpr auto JetpackSound_Water_Off = 0xcf8; // USoundCue*
			constexpr auto aboveWaterClientTickInterval = 0xd00; // float
			constexpr auto bRightFoot = 0xd04; // bool
			constexpr auto maxLeavingWaterVelocity_thrusting = 0xd08; // float
			constexpr auto underwaterThrusterSoundPitch = 0xd0c; // float
			constexpr auto bEscapingFromWaterRunning = 0xd10; // bool
			constexpr auto injuredThrustImpulse = 0xd14; // float
			constexpr auto LastWaterParticleTime = 0xd18; // double
			constexpr auto LastPunchedTime = 0xd20; // double
			constexpr auto LastEscapedTime = 0xd28; // double
			constexpr auto LastJumpReleased = 0xd30; // double
			constexpr auto bIsDoubleTapJump = 0xd38; // bool
			constexpr auto DoubleTapTolerance = 0xd3c; // float
			constexpr auto JetPackVFXOffset = 0xd40; // FTransform
			constexpr auto LastJetpackVFXOffset = 0xd70; // FTransform
			constexpr auto K2Node_CustomEvent_NewOffset = 0xda0; // FTransform
			constexpr auto CallFunc_GetGameTimeInSeconds_ReturnValue = 0xdd0; // double
			constexpr auto K2Node_CustomEvent_NewState = 0xdd8; // E_TekThrusterState
			constexpr auto K2Node_SwitchEnum_CmpSuccess = 0xdd9; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue = 0xde0; // UWorld*
			constexpr auto CallFunc_IsPlayerGrounded_result = 0xde8; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue = 0xde9; // bool
			constexpr auto CallFunc_EqualEqual_ByteByte_ReturnValue = 0xdea; // bool
			constexpr auto CallFunc_EqualEqual_ByteByte_ReturnValue2 = 0xdeb; // bool
			constexpr auto CallFunc_EqualEqual_ByteByte_ReturnValue3 = 0xdec; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue2 = 0xded; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue3 = 0xdee; // bool
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue = 0xdf0; // float
			constexpr auto CallFunc_IsPlayerInjured_result = 0xdf4; // bool
			constexpr auto CallFunc_SelectFloat_ReturnValue = 0xdf8; // float
			constexpr auto CallFunc_IsPlayerGrounded_result2 = 0xdfc; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue4 = 0xdfd; // bool
			constexpr auto CallFunc_GetRef_OwningPlayer_player = 0xe00; // AShooterCharacter*
			constexpr auto CallFunc_CanUseTekAbility_bResult = 0xe08; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue5 = 0xe09; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue6 = 0xe0a; // bool
			constexpr auto CallFunc_CanUseTekAbility_bResult2 = 0xe0b; // bool
			constexpr auto CallFunc_CanUseTekAbility_bResult3 = 0xe0c; // bool
			constexpr auto CallFunc_Is_Restricted_Because_Of_Genesis_Map_restricted = 0xe0d; // bool
			constexpr auto CallFunc_IsPlayerGrounded_result3 = 0xe0e; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue7 = 0xe0f; // bool
			constexpr auto CallFunc_Is_Restricted_Because_Of_Genesis_Map_restricted2 = 0xe10; // bool
			constexpr auto CallFunc_GetOwner_ReturnValue = 0xe18; // AActor*
			constexpr auto K2Node_DynamicCast_AsShooterCharacter = 0xe20; // AShooterCharacter*
			constexpr auto K2Node_DynamicCast_CastSuccess = 0xe28; // bool
			constexpr auto CallFunc_GetGameTimeInSeconds_ReturnValue2 = 0xe30; // double
			constexpr auto CallFunc_Not_PreBool_ReturnValue8 = 0xe38; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue = 0xe39; // bool
			constexpr auto CallFunc_TimeSince_ReturnValue = 0xe3c; // float
			constexpr auto CallFunc_K2_GetWorld_ReturnValue2 = 0xe40; // UWorld*
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue = 0xe48; // bool
			constexpr auto CallFunc_GreaterEqual_FloatFloat_ReturnValue = 0xe49; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue2 = 0xe4a; // bool
			constexpr auto CallFunc_TimeSince_ReturnValue2 = 0xe4c; // float
			constexpr auto CallFunc_LessEqual_FloatFloat_ReturnValue = 0xe50; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue3 = 0xe51; // bool
			constexpr auto CallFunc_LineTraceSingleForObjects_ActorsToIgnore_RefProperty = 0xe58; // TArray<AActor*>
		}
		// Inheritance: ABuff_TekArmor_C > ABuff_OverrideVelocity_C > APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_TekArmor_Boots_C
		{
			constexpr auto ParticleSystemLeft = 0xb30; // UParticleSystemComponent*
			constexpr auto ElementCost_bootSlam = 0xb38; // int32_t
			constexpr auto DamageAbsorbedParticle = 0xb40; // UParticleSystem*
			constexpr auto DamageAbsorbedSound = 0xb48; // USoundBase*
			constexpr auto TimesTotalHealthIsBlockable = 0xb50; // float
			constexpr auto MaxAmmo = 0xb54; // int32_t
			constexpr auto Ref_TekBoots = 0xb58; // UPrimalItemArmor_TekBoots_C*
			constexpr auto ElementDamageAbsorptionScale = 0xb60; // float
			constexpr auto Ref_LandingAnim_Male = 0xb68; // UAnimMontage*
			constexpr auto Ref_LandingAnim_Female = 0xb70; // UAnimMontage*
			constexpr auto NewWalkableFoorZ = 0xb78; // float
			constexpr auto DefaultWalkableFloorZ = 0xb7c; // float
			constexpr auto NewWalkableZIsActive = 0xb80; // bool
			constexpr auto Accumulation = 0xb84; // float
			constexpr auto AccumulationMultiplier = 0xb88; // float
			constexpr auto IsParticleActive = 0xb8c; // bool
			constexpr auto ActivatedFootstepSoundCue = 0xb90; // USoundCue*
			constexpr auto MinInsulationTime = 0xb98; // float
			constexpr auto MaxInsulationTime = 0xb9c; // float
			constexpr auto TimeToWaitToCheck = 0xba0; // float
			constexpr auto TimeOfLastInsulationCheck = 0xba8; // double
			constexpr auto BuffsToLookFor = 0xbb0; // TArray<ABuff_TekArmor_C*>
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue = 0xbc0; // FVector
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue = 0xbcc; // FVector
			constexpr auto CallFunc_MakeTransform_ReturnValue = 0xbe0; // FTransform
		}
		// Inheritance: ABuff_TekArmor_C > ABuff_OverrideVelocity_C > APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_TekArmor_Helmet_C
		{
			constexpr auto LoopingSound = 0xb30; // UAudioComponent*
			constexpr auto FadeOut_alphaFadeOut_9904A2EE443FCE625B16F68F921084E3 = 0xb38; // float
			constexpr auto FadeOut__Direction_9904A2EE443FCE625B16F68F921084E3 = 0xb3c; // ETimelineDirection
			constexpr auto FadeOut = 0xb40; // UTimelineComponent*
			constexpr auto FadeIn_alphaFadeIn_E990A9D4421B52BE8BFEADA96BC9B5EE = 0xb48; // float
			constexpr auto FadeIn__Direction_E990A9D4421B52BE8BFEADA96BC9B5EE = 0xb4c; // ETimelineDirection
			constexpr auto FadeIn = 0xb50; // UTimelineComponent*
			constexpr auto helmet_initialPress = 0xb58; // bool
			constexpr auto postprocessBuffs = 0xb60; // TArray<APrimalBuff*>
			constexpr auto isESPActive = 0xb70; // bool
			constexpr auto elementConsumptionRate = 0xb74; // float
			constexpr auto initialElementConsumption = 0xb78; // int32_t
			constexpr auto accumulatedElement = 0xb7c; // float
			constexpr auto toggleState = 0xb80; // int32_t
			constexpr auto handUpDelay = 0xb84; // float
			constexpr auto tapTime = 0xb88; // float
			constexpr auto helmetOverlayPostprocess = 0xb90; // UMaterialInstanceDynamic*
			constexpr auto Ref_TekHelmet = 0xb98; // UPrimalItemArmor_TekHelmet_C*
			constexpr auto delayBeforeSound = 0xba0; // float
			constexpr auto FadeInDuration = 0xba4; // float
			constexpr auto FadeOutDuration = 0xba8; // float
			constexpr auto fadePreDelay = 0xbac; // float
			constexpr auto waitBetweenInOut = 0xbb0; // float
			constexpr auto toggleTints = 0xbb8; // TArray<FLinearColor>
			constexpr auto currentTintColor = 0xbc8; // FLinearColor
			constexpr auto isTransitioning = 0xbd8; // bool
			constexpr auto timeToHoldForTurnOff = 0xbdc; // float
			constexpr auto hasReleased = 0xbe0; // bool
			constexpr auto savedToggleState = 0xbe4; // int32_t
			constexpr auto underwaterAdditionalConsumptionRate = 0xbe8; // float
			constexpr auto lastOxygenLevel = 0xbec; // float
			constexpr auto TekSuitItems = 0xbf0; // TArray<UPrimalItem*>
			constexpr auto MonitorBuffClasses = 0xc00; // TArray<APrimalBuff*>
			constexpr auto bFromExternalToggle = 0xc10; // bool
			constexpr auto CallFunc_IsSplitscreen_ReturnValue = 0xc11; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue = 0xc12; // bool
			constexpr auto K2Node_CustomEvent_NewState = 0xc14; // int32_t
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue2 = 0xc18; // bool
			constexpr auto CallFunc_Subtract_IntInt_ReturnValue = 0xc1c; // int32_t
			constexpr auto CallFunc_Not_PreBool_ReturnValue = 0xc20; // bool
			constexpr auto CallFunc_Percent_IntInt_ReturnValue = 0xc24; // int32_t
			constexpr auto K2Node_MakeStruct_WeaponAnim = 0xc28; // FWeaponAnim
			constexpr auto CallFunc_Get_Ref_Owning_PlayerMovement_movement = 0xc38; // UCharacterMovementComponent*
			constexpr auto CallFunc_PlayWeaponAnimation_ReturnValue = 0xc40; // float
			constexpr auto CallFunc_EqualEqual_ByteByte_ReturnValue = 0xc44; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue2 = 0xc45; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue3 = 0xc46; // bool
			constexpr auto CallFunc_CanUseTekAbility_bResult = 0xc47; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue = 0xc48; // bool
			constexpr auto K2Node_CustomEvent_Montage2 = 0xc50; // UAnimMontage*
			constexpr auto K2Node_CustomEvent_montage = 0xc58; // UAnimMontage*
			constexpr auto CallFunc_PlayAnimEx_ReturnValue = 0xc60; // float
			constexpr auto K2Node_SwitchInteger_CmpSuccess = 0xc64; // bool
			constexpr auto K2Node_SwitchInteger2_CmpSuccess = 0xc65; // bool
			constexpr auto CallFunc_FMax_ReturnValue = 0xc68; // float
			constexpr auto CallFunc_FMax_ReturnValue2 = 0xc6c; // float
			constexpr auto CallFunc_Divide_FloatFloat_ReturnValue = 0xc70; // float
			constexpr auto CallFunc_Divide_FloatFloat_ReturnValue2 = 0xc74; // float
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue4 = 0xc78; // bool
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue = 0xc7c; // float
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue5 = 0xc80; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue6 = 0xc81; // bool
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue2 = 0xc84; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue3 = 0xc88; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue4 = 0xc8c; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue5 = 0xc90; // float
			constexpr auto CallFunc_Not_PreBool_ReturnValue3 = 0xc94; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue2 = 0xc95; // bool
			constexpr auto CallFunc_Array_Length_ReturnValue = 0xc98; // int32_t
			constexpr auto CallFunc_Greater_IntInt_ReturnValue = 0xc9c; // bool
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue6 = 0xca0; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue7 = 0xca4; // float
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue7 = 0xca8; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue8 = 0xca9; // bool
			constexpr auto CallFunc_CanUseTekAbility_bResult2 = 0xcaa; // bool
			constexpr auto Temp_int_Loop_Counter_Variable = 0xcac; // int32_t
			constexpr auto CallFunc_Add_IntInt_ReturnValue = 0xcb0; // int32_t
			constexpr auto CallFunc_Array_Length_ReturnValue2 = 0xcb4; // int32_t
			constexpr auto CallFunc_Greater_IntInt_ReturnValue2 = 0xcb8; // bool
			constexpr auto K2Node_SwitchInteger3_CmpSuccess = 0xcb9; // bool
			constexpr auto CallFunc_Can_Element_Decrease_CanDecrease = 0xcba; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue = 0xcbb; // bool
			constexpr auto CallFunc_Array_Get_Item = 0xcc0; // APrimalBuff*
			constexpr auto CallFunc_HasBuff_ReturnValue = 0xcc8; // bool
			constexpr auto CallFunc_NotEqual_IntInt_ReturnValue = 0xcc9; // bool
			constexpr auto CallFunc_GetHUD_ReturnValue = 0xcd0; // AHUD*
			constexpr auto K2Node_DynamicCast_AsShooterHUD = 0xcd8; // AShooterHUD*
			constexpr auto K2Node_DynamicCast_CastSuccess = 0xce0; // bool
			constexpr auto CallFunc_IsValid_ReturnValue = 0xce1; // bool
			constexpr auto CallFunc_Array_Length_ReturnValue3 = 0xce4; // int32_t
			constexpr auto CallFunc_Greater_IntInt_ReturnValue3 = 0xce8; // bool
			constexpr auto CallFunc_Can_Element_Decrease_CanDecrease2 = 0xce9; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue2 = 0xcea; // bool
			constexpr auto K2Node_CustomEvent_buffIndex2 = 0xcec; // int32_t
			constexpr auto K2Node_CustomEvent_buffIndex = 0xcf0; // int32_t
			constexpr auto CallFunc_GetRef_OwningPlayer_player = 0xcf8; // AShooterCharacter*
			constexpr auto CallFunc_Array_Get_Item2 = 0xd00; // APrimalBuff*
			constexpr auto CallFunc_StaticAddBuff_ReturnValue = 0xd08; // APrimalBuff*
			constexpr auto CallFunc_Array_Length_ReturnValue4 = 0xd10; // int32_t
			constexpr auto CallFunc_Less_IntInt_ReturnValue = 0xd14; // bool
			constexpr auto CallFunc_Array_Get_Item3 = 0xd18; // APrimalBuff*
			constexpr auto K2Node_CustomEvent_index = 0xd20; // int32_t
			constexpr auto CallFunc_CanUseTekAbility_bResult3 = 0xd24; // bool
			constexpr auto CallFunc_Array_Get_Item4 = 0xd28; // APrimalBuff*
			constexpr auto CallFunc_HasBuff_ReturnValue2 = 0xd30; // bool
			constexpr auto K2Node_SwitchInteger4_CmpSuccess = 0xd31; // bool
			constexpr auto CallFunc_IsSplitscreen_ReturnValue2 = 0xd32; // bool
		}
		// Inheritance: ABuff_TekArmor_C > ABuff_OverrideVelocity_C > APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_TekArmor_Pants_C
		{
			constexpr auto Ref_TekPants = 0xb30; // UPrimalItemArmor_TekPants_C*
			constexpr auto bIsTEKRunCharging = 0xb38; // bool
			constexpr auto CurrentPlayerRunSpeed = 0xb3c; // float
			constexpr auto MaxAllowedTexRunVelocity = 0xb40; // float
			constexpr auto RunSpeedMult_AdditionRate = 0xb44; // float
			constexpr auto TEKRunDamageType = 0xb48; // UDamageType*
			constexpr auto TEKRunFoliageDamageType = 0xb50; // UDamageType*
			constexpr auto TEKRunBaseDamage = 0xb58; // float
			constexpr auto TEKRunDamageRadius = 0xb5c; // float
			constexpr auto TEKRunImpulseStrength = 0xb60; // float
			constexpr auto TEKRunImpulseWeightLimit = 0xb64; // float
			constexpr auto TEKRunningDamageUpdateRate = 0xb68; // float
			constexpr auto TEKRunningSecondsPerElementConsumed = 0xb6c; // float
			constexpr auto TEKRunningHitPawnRefreshRate = 0xb70; // float
			constexpr auto AdditionalRunSpeedMult = 0xb74; // float
			constexpr auto ForwardLocRelativeToSpeed = 0xb78; // FVector
			constexpr auto TekRunDamage_current = 0xb84; // float
			constexpr auto ChargeHitPawns = 0xb88; // TArray<APrimalCharacter*>
			constexpr auto ChargeHitStructures = 0xb98; // TArray<APrimalStructure*>
			constexpr auto bDebug = 0xba8; // bool
			constexpr auto StructureBoxTraceZModifier = 0xbac; // float
			constexpr auto PawnBoxTraceModifier = 0xbb0; // float
			constexpr auto damageStructureElementCost = 0xbb4; // int32_t
			constexpr auto WallUnbrokenImpactParticle = 0xbb8; // UParticleSystem*
			constexpr auto WallUnbrokenImpactSound = 0xbc0; // USoundBase*
			constexpr auto TEKRunningPostProcessIntensityScale = 0xbc8; // float
			constexpr auto WallUnbrokenImpactDamage = 0xbcc; // float
			constexpr auto WallUnbrokenBounceImpulse = 0xbd0; // float
			constexpr auto RunSpeedMult_Base = 0xbd4; // float
			constexpr auto bWantsToCharge = 0xbd8; // bool
			constexpr auto currentPlayerVelocityLength = 0xbdc; // float
			constexpr auto PreviousTekRunDir = 0xbe0; // FVector
			constexpr auto bPreventVelocityConservationThisFrame = 0xbec; // bool
			constexpr auto interpControlRotation_target = 0xbf0; // FRotator
			constexpr auto interpControlRotation_speed = 0xbfc; // float
			constexpr auto accumulatedRunningTimeForElementCost = 0xc00; // float
			constexpr auto runningTimeForElementCost = 0xc04; // float
			constexpr auto damageEnemyElementCost = 0xc08; // int32_t
			constexpr auto runningElementCost = 0xc0c; // int32_t
			constexpr auto HitPawn_Particle = 0xc10; // UParticleSystem*
			constexpr auto HitPawn_Sound = 0xc18; // USoundBase*
			constexpr auto lastStructureImpactNormal = 0xc20; // FVector
			constexpr auto DustParticleIntensity = 0xc2c; // float
			constexpr auto bIsDustTrailActive = 0xc30; // bool
			constexpr auto bAltFirePressed = 0xc31; // bool
			constexpr auto TekRunServerTickInterval = 0xc34; // float
			constexpr auto CurrentTekRunState = 0xc38; // E_TekRunningState
			constexpr auto PreviousTekRunState = 0xc39; // E_TekRunningState
			constexpr auto requiredTekRunMaxVelocityRatio = 0xc3c; // float
			constexpr auto Anim_WaterRun_TPV = 0xc40; // UAnimMontage*
			constexpr auto runOnWaterImpulse = 0xc48; // float
			constexpr auto Ref_AboveWaterVolume = 0xc50; // APhysicsVolume*
			constexpr auto aboveWaterClientTickInterval = 0xc58; // float
			constexpr auto lastCheckForWaterTime = 0xc60; // double
			constexpr auto waterCheckInterval = 0xc68; // float
			constexpr auto bRightFoot = 0xc6c; // bool
			constexpr auto footSplashOffset = 0xc70; // float
			constexpr auto lastFootSplashTime = 0xc78; // double
			constexpr auto footSplashInterval = 0xc80; // float
			constexpr auto bWasRunningOnWater = 0xc84; // bool
			constexpr auto Ref_WaterRun_FPV = 0xc88; // UAnimMontage*
			constexpr auto waterRunDownCheckDistance = 0xc90; // float
			constexpr auto bCanRunOnWater = 0xc94; // bool
			constexpr auto bAllowRunningOnWater = 0xc95; // bool
			constexpr auto NewVar_1 = 0xc98; // float
			constexpr auto MoveSpeedModifierScale = 0xc9c; // float
			constexpr auto TekRunningWaterSubmergedThreshold = 0xca0; // float
			constexpr auto RestoreFullTekSpeedVelocityRatio = 0xca4; // float
			constexpr auto bShouldSonicBoom = 0xca8; // bool
			constexpr auto bIsTooSlowForTekRun = 0xca9; // bool
			constexpr auto lastTooSlowForTekRunStartTime = 0xcb0; // double
			constexpr auto timeAfterTooSlowToCancelTekRun = 0xcb8; // float
			constexpr auto bAllowJetpackStartTekRun = 0xcbc; // bool
			constexpr auto JetpackThrustImpulse = 0xcc0; // float
			constexpr auto sonicBoomTekVelocityRatio = 0xcc4; // float
			constexpr auto SonicBoomRequiredVelocityForwardDot = 0xcc8; // float
			constexpr auto startRunningElementCost = 0xccc; // int32_t
			constexpr auto waterRunRequiredForwardVelocityDot = 0xcd0; // float
			constexpr auto WaterImpactTemplate = 0xcd8; // UParticleSystem*
			constexpr auto K2Node_CustomEvent_newRunState = 0xce0; // E_TekRunningState
			constexpr auto K2Node_CustomEvent_newModifier = 0xce4; // float
			constexpr auto CallFunc_CanStartTekRun_result = 0xce8; // bool
			constexpr auto CallFunc_AreGlovesEquippedAndActive_result = 0xce9; // bool
			constexpr auto CallFunc_AreGlovesEquippedAndActive_glovesRef = 0xcf0; // ABuff_TekArmor_Gloves_C*
			constexpr auto CallFunc_IsPlayerGrappled_result = 0xcf8; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue = 0xcf9; // bool
			constexpr auto CallFunc_PlayerHasFistsEquipped_result = 0xcfa; // bool
			constexpr auto CallFunc_GetRef_OwningPlayer_player = 0xd00; // AShooterCharacter*
			constexpr auto CallFunc_Not_PreBool_ReturnValue2 = 0xd08; // bool
		}
		// Inheritance: ABuff_Base_PointOfInterest_C > ABuff_Base_C > APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_TekPistol_Kill_C
		{
			constexpr auto Damagers = 0xad8; // TArray<AActor*>
			constexpr auto MaxDamagers = 0xae8; // int32_t
			constexpr auto ChargeWeight = 0xaec; // float
			constexpr auto ChargeWeightPerHit = 0xaf0; // float
			constexpr auto ChargeWeightDecay = 0xaf4; // float
			constexpr auto RequiredChargeWeight = 0xaf8; // float
			constexpr auto LastChargeTime = 0xb00; // double
			constexpr auto DelayBeforeChargeDecay = 0xb08; // float
			constexpr auto StartTime = 0xb10; // double
			constexpr auto MinimumDamageMultiplier = 0xb18; // float
			constexpr auto MaximumDamageMultiplier = 0xb1c; // float
			constexpr auto AdditionalMultiplierAtMaxCharge = 0xb20; // float
			constexpr auto POIActorBoundsMult = 0xb24; // float
			constexpr auto POIOffsetZClose = 0xb28; // float
			constexpr auto POIOffsetZFar = 0xb2c; // float
			constexpr auto MinimumImpactScale = 0xb30; // float
			constexpr auto MaximumImpactScale = 0xb34; // float
			constexpr auto AdditionalScaleAtMaxCharge = 0xb38; // float
			constexpr auto LastHurtAnimTime = 0xb40; // double
			constexpr auto MinimumTimeBetweenHurtAnims = 0xb48; // float
			constexpr auto BossDamageMultiplier = 0xb4c; // float
		}
		// Inheritance: ABuff_Base_C > APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_TekPistol_Heal_C
		{
			constexpr auto Damagers = 0x978; // TArray<AActor*>
			constexpr auto LastDamageTime = 0x988; // TArray<double>
			constexpr auto HealerTimeOut = 0x998; // float
			constexpr auto HalfPowerCount = 0x99c; // float
			constexpr auto LastDamageMultiplier = 0x9a0; // float
			constexpr auto DebugHealModifier = 0x9a4; // bool
		}

		enum EPrimalEquipmentType : uint8_t
		{
			Hat = 0,
			Shirt = 1,
			Pants = 2,
			Boots = 3,
			Gloves = 4,
			DinoSaddle = 5,
			Trophy = 6,
			Costume = 7,
			Shield = 8,
			Weapon = 9,
			Snapshot = 10,
			MAX = 11,
			EPrimalEquipmentType_MAX = 12,
		};
		enum class EMovementMode
		{
			MOVE_None = 0,
			MOVE_Walking = 1,
			MOVE_Falling = 2,
			MOVE_Swimming = 3,
			MOVE_Flying = 4,
			MOVE_Custom = 5,
			MOVE_MAX = 6,
		};
		enum class E_TekGlovePunchState
		{
			NewEnumerator0 = 0,
			Charging = 1,
			NewEnumerator4 = 2,
			FinishingPunch = 3,
			Done = 4,
			E_MAX = 5,
		};
		// Inheritance: APawn > AActor > UObject
		namespace ACharacter
		{
			constexpr auto Mesh = 0x4f8; // USkeletalMeshComponent*
			constexpr auto CharacterMovement = 0x500; // UCharacterMovementComponent*
			constexpr auto CapsuleComponent = 0x508; // UCapsuleComponent*
			constexpr auto BasedMovement = 0x510; // FBasedMovementInfo
			constexpr auto ReplicatedBasedMovement = 0x540; // FBasedMovementInfo
			constexpr auto BaseTranslationOffset = 0x570; // FVector
			constexpr auto ReplicatedMovementMode = 0x57c; // char
			constexpr auto CrouchedEyeHeight = 0x584; // float
			constexpr auto ProneEyeHeight = 0x588; // float
			constexpr auto bReplicateDesiredRotation = 0x58c; // char : 1
			constexpr auto bPressedJump = 0x58c; // char : 1
			constexpr auto bUseBPOverrideCharacterParticle = 0x58c; // char : 1
			constexpr auto bCanEverCrouch = 0x58c; // char : 1
			constexpr auto bCanEverProne = 0x58c; // char : 1
			constexpr auto bIsProne = 0x58c; // char : 1
			constexpr auto bIsCrouched = 0x58c; // char : 1
			constexpr auto bUseBPOverrideCharacterSound = 0x58c; // char : 1
			constexpr auto bClientUpdating = 0x58d; // char : 1
			constexpr auto bIsPlayingTurningAnim = 0x58d; // char : 1
			constexpr auto bClientWasFalling = 0x58d; // char : 1
			constexpr auto bClientResimulateRootMotion = 0x58d; // char : 1
			constexpr auto bSimGravityDisabled = 0x58d; // char : 1
			constexpr auto bIsBigPusher = 0x58d; // char : 1
			constexpr auto bCanBePushed = 0x58d; // char : 1
			constexpr auto bCanPushOthers = 0x58d; // char : 1
			constexpr auto bOverrideFlyingVelocity = 0x58e; // char : 1
			constexpr auto bUsesRootMotion = 0x58e; // char : 1
			constexpr auto bPreventWaterHopCorrectionVelChange = 0x58e; // char : 1
			constexpr auto bOverrideSwimmingAcceleration = 0x58e; // char : 1
			constexpr auto bOverrideNewFallVelocity = 0x58e; // char : 1
			constexpr auto bOverrideSwimmingVelocity = 0x58e; // char : 1
			constexpr auto bOverrideWalkingVelocity = 0x58e; // char : 1
			constexpr auto bBasedUsesFastPathSMCTick = 0x58f; // char : 1
			constexpr auto bBasedUsesFastPathMoveTick = 0x58f; // char : 1
			constexpr auto bForceUnfreezeIkNextFrame = 0x58f; // char : 1
			constexpr auto bForceReplicationWithoutController = 0x58f; // char : 1
			constexpr auto bUse_ModifySavedMoveAcceleration_PreRep = 0x58f; // char : 1
			constexpr auto bUse_ModifySavedMoveAcceleration_PostRep = 0x58f; // char : 1
			constexpr auto bUseBPValidateStoredClientMovementInputs = 0x58f; // char : 1
			constexpr auto HarvestingDestructionMeshRangeMultipler = 0x590; // float
			constexpr auto CharacterOverrideSoundFrom = 0x598; // TArray<USoundBase*>
			constexpr auto CharacterOverrideSoundTo = 0x5a8; // TArray<USoundBase*>
			constexpr auto CharacterOverrideParticleFrom = 0x5b8; // TArray<UParticleSystem*>
			constexpr auto CharacterOverrideParticleTo = 0x5c8; // TArray<UParticleSystem*>
			constexpr auto bInBaseReplication = 0x5d8; // bool
			constexpr auto JumpKeyHoldTime = 0x5dc; // float
			constexpr auto JumpMaxHoldTime = 0x5e0; // float
			constexpr auto LastMovementDesiredRotation = 0x5e4; // FRotator_NetQuantizeSmartPitch
			constexpr auto OnCharacterMovementUpdated = 0x600; // FScriptMulticastDelegate
			constexpr auto ClientRootMotionParams = 0x610; // FRootMotionMovementParams
			constexpr auto RootMotionRepMoves = 0x650; // TArray<FSimulatedRootMotionReplicatedMove>
			constexpr auto RepRootMotion = 0x660; // FRepRootMotionMontage
			constexpr auto ExtraMaxAccelerationModifier = 0x6a0; // float
			constexpr auto ExtraFrictionModifier = 0x6a4; // float
			constexpr auto ForceUnfreezeSkeletalDynamicsUntilTime = 0x6b0; // double
		}
		namespace UAnimMontage
		{
			constexpr auto BlendInTime = 0x68; // float
			constexpr auto BlendOutTime = 0x6c; // float
			constexpr auto bClientPlayWhenNotRendered = 0x70; // bool
			constexpr auto bForceTickPoseAndServerUpdateMesh = 0x71; // bool
			constexpr auto bAnimPauseOnFinish = 0x72; // bool
			constexpr auto CompositeSections = 0x78; // TArray<FCompositeSection>
			constexpr auto SlotAnimTracks = 0x88; // TArray<FSlotAnimationTrack>
			constexpr auto BranchingPoints = 0x98; // TArray<FBranchingPoint>
			constexpr auto bEnableRootMotionTranslation = 0xa8; // bool
			constexpr auto bEnableRootMotionRotation = 0xa9; // bool
			constexpr auto RootMotionRootLock = 0xaa; // ERootMotionRootLock
		}
		// Inheritance: 
		namespace FWeaponAnim
		{
			constexpr auto Pawn1P = 0x0; // UAnimMontage*
			constexpr auto Pawn3P = 0x8; // UAnimMontage*
		}
		// Inheritance: UObject
		namespace UCameraShake
		{
			constexpr auto bSingleInstance = 0x28; // char : 1
			constexpr auto OscillationDuration = 0x2c; // float
			constexpr auto OscillationBlendInTime = 0x30; // float
			constexpr auto OscillationBlendOutTime = 0x34; // float
			constexpr auto RotOscillation = 0x38; // FROscillator
			constexpr auto LocOscillation = 0x5c; // FVOscillator
			constexpr auto FOVOscillation = 0x80; // FFOscillator
			constexpr auto Anim = 0x90; // UCameraAnim*
			constexpr auto AnimPlayRate = 0x98; // float
			constexpr auto AnimScale = 0x9c; // float
			constexpr auto AnimBlendInTime = 0xa0; // float
			constexpr auto AnimBlendOutTime = 0xa4; // float
			constexpr auto bIgnoreWhenBasedOnDino = 0xa8; // char : 1
			constexpr auto bRandomAnimSegment = 0xa8; // char : 1
			constexpr auto bIgnoreWorldShakeScaling = 0xa8; // char : 1
			constexpr auto bForceUseCameraShakeScale = 0xa8; // char : 1
			constexpr auto RandomAnimSegmentDuration = 0xac; // float
		}
		// Inheritance: AGameState > AInfo > AActor > UObject
		namespace AShooterGameState
		{
			constexpr auto NumNPC = 0x538; // int32_t
			constexpr auto NumHibernatedNPC = 0x53c; // int32_t
			constexpr auto NumActiveNPC = 0x540; // int32_t
			constexpr auto NumDeadNPC = 0x544; // int32_t
			constexpr auto NumPlayerActors = 0x548; // int32_t
			constexpr auto NumPlayerConnected = 0x54c; // int32_t
			constexpr auto bServerUseLocalizedChat = 0x550; // bool
			constexpr auto LocalizedChatRadius = 0x554; // float
			constexpr auto VoiceSuperRangeRadius = 0x558; // float
			constexpr auto VoiceWhisperRangeRadius = 0x55c; // float
			constexpr auto LocalizedChatRadiusUnconsiousScale = 0x560; // float
			constexpr auto VivoxAttenuationModel = 0x564; // uint32_t
			constexpr auto VivoxMinDistance = 0x568; // float
			constexpr auto VivoxRolloff = 0x56c; // float
			constexpr auto ServerFramerate = 0x570; // float
			constexpr auto NewStructureDestructionTag = 0x578; // FString
			constexpr auto DayNumber = 0x588; // int32_t
			constexpr auto DayTime = 0x58c; // float
			constexpr auto NetworkTime = 0x590; // double
			constexpr auto TimeUTC = 0x598; // uint32_t
			constexpr auto bIsOfficialServer = 0x59c; // bool
			constexpr auto bIsListenServer = 0x59d; // bool
			constexpr auto bIsDediServer = 0x59e; // bool
			constexpr auto bIsServerRunningOnConsole = 0x59f; // bool
			constexpr auto bIsArkTributeAvailable = 0x5a0; // bool
			constexpr auto bIsArkDownloadsAllowed = 0x5a1; // bool
			constexpr auto bAllowThirdPersonPlayer = 0x5a2; // bool
			constexpr auto bServerHardcore = 0x5a3; // bool
			constexpr auto bServerPVE = 0x5a4; // bool
			constexpr auto bAutoPvE = 0x5a5; // bool
			constexpr auto bServerCrosshair = 0x5a6; // bool
			constexpr auto bServerForceNoHUD = 0x5a7; // bool
			constexpr auto bFlyerPlatformAllowUnalignedDinoBasing = 0x5a8; // bool
			constexpr auto bMapPlayerLocation = 0x5a9; // bool
			constexpr auto bPvEDisableFriendlyFire = 0x5aa; // bool
			constexpr auto bPvEAllowTribeWar = 0x5ab; // bool
			constexpr auto bPvEAllowTribeWarCancel = 0x5ac; // bool
			constexpr auto bEnablePvPGamma = 0x5ad; // bool
			constexpr auto bDisablePvEGamma = 0x5ae; // bool
			constexpr auto NumTamedDinos = 0x5b0; // int32_t
			constexpr auto MaxStructuresInRange = 0x5b4; // int32_t
			constexpr auto DayCycleSpeedScale = 0x5b8; // float
			constexpr auto DayTimeSpeedScale = 0x5bc; // float
			constexpr auto NightTimeSpeedScale = 0x5c0; // float
			constexpr auto PvEStructureDecayPeriodMultiplier = 0x5c4; // float
			constexpr auto PvEDinoDecayPeriodMultiplier = 0x5c8; // float
			constexpr auto PerPlatformMaxStructuresMultiplier = 0x5cc; // float
			constexpr auto bDisableStructureDecayPvE = 0x5d0; // bool
			constexpr auto bDisableDinoDecayPvE = 0x5d1; // bool
			constexpr auto bAllowCaveBuildingPvE = 0x5d2; // bool
			constexpr auto bAllowCaveBuildingPvP = 0x5d3; // bool
			constexpr auto bPreventDownloadSurvivors = 0x5d4; // bool
			constexpr auto bReachedPlatformStructureLimit = 0x5d5; // bool
			constexpr auto bAdminLogging = 0x5d6; // bool
			constexpr auto bPvPStructureDecay = 0x5d7; // bool
			constexpr auto bPreventDownloadDinos = 0x5d8; // bool
			constexpr auto bPreventDownloadItems = 0x5d9; // bool
			constexpr auto bPreventUploadDinos = 0x5da; // bool
			constexpr auto bPreventUploadItems = 0x5db; // bool
			constexpr auto bPreventUploadSurvivors = 0x5dc; // bool
			constexpr auto bPreventMateBoost = 0x5dd; // bool
			constexpr auto bPreventStructurePainting = 0x5de; // bool
			constexpr auto bAllowCharacterCreation = 0x5df; // bool
			constexpr auto bAllowSpawnPointSelection = 0x5e0; // bool
			constexpr auto MaxTamedDinos = 0x5e4; // int32_t
			constexpr auto bDisableSpawnAnimations = 0x5e8; // bool
			constexpr auto PlayerListString = 0x5f0; // FString
			constexpr auto GlobalSpoilingTimeMultiplier = 0x600; // float
			constexpr auto GlobalItemDecompositionTimeMultiplier = 0x604; // float
			constexpr auto MaxNumberOfPlayersInTribe = 0x608; // int32_t
			constexpr auto TribeSlotReuseCooldown = 0x60c; // float
			constexpr auto GlobalCorpseDecompositionTimeMultiplier = 0x610; // float
			constexpr auto EggHatchSpeedMultiplier = 0x614; // float
			constexpr auto ActiveEvent = 0x618; // FName
			constexpr auto bAllowPaintingWithoutResources = 0x620; // bool
			constexpr auto bEnableExtraStructurePreventionVolumes = 0x621; // bool
			constexpr auto OverrideItemCraftingCosts = 0x628; // TArray<FItemCraftingCostOverride>
			constexpr auto OverrideItemMaxQuantity = 0x638; // TArray<FItemMaxItemQuantityOverride>
			constexpr auto LastServerSaveTime = 0x698; // double
			constexpr auto ServerSaveInterval = 0x6a0; // float
			constexpr auto TribeNameChangeCooldown = 0x6a4; // float
			constexpr auto PlatformSaddleBuildAreaBoundsMultiplier = 0x6a8; // float
			constexpr auto bAlwaysAllowStructurePickup = 0x6ac; // bool
			constexpr auto StructurePickupTimeAfterPlacement = 0x6b0; // float
			constexpr auto StructurePickupHoldDuration = 0x6b4; // float
			constexpr auto bAllowIntegratedSPlusStructures = 0x6b8; // bool
			constexpr auto bAllowHideDamageSourceFromLogs = 0x6b9; // bool
			constexpr auto DynamicMusicAudioComponent = 0x6d8; // UAudioComponent*
			constexpr auto DynamicMusicAudioComponent2 = 0x6e0; // UAudioComponent*
			constexpr auto LevelExperienceRampOverrides = 0x6f0; // TArray<FLevelExperienceRamp>
			constexpr auto OverrideEngramEntries = 0x700; // TArray<FEngramEntryOverride>
			constexpr auto CustomGameUITemplate = 0x710; // UPrimalUI*
			constexpr auto PreventDinoTameClassNames = 0x718; // TArray<FString>
			constexpr auto ListenServerTetherDistanceMultiplier = 0x728; // float
			constexpr auto PGMapName = 0x730; // FString
			constexpr auto SupportedSpawnRegions = 0x740; // TArray<int32_t>
			constexpr auto PaintingCache = 0x750; // UPaintingCache*
			constexpr auto StaticOverrideMusic = 0x758; // USoundBase*
			constexpr auto bEnableDeathTeamSpectator = 0x760; // bool
			constexpr auto PlayerFloatingHUDOffset = 0x764; // FVector
			constexpr auto PlayerFloatingHUDOffsetScreenY = 0x770; // float
			constexpr auto StructureDamageRepairCooldown = 0x774; // float
			constexpr auto bForceAllStructureLocking = 0x778; // bool
			constexpr auto bAllowCustomRecipes = 0x779; // bool
			constexpr auto bAllowRaidDinoFeeding = 0x77a; // bool
			constexpr auto CustomRecipeEffectivenessMultiplier = 0x77c; // float
			constexpr auto CustomRecipeSkillMultiplier = 0x780; // float
			constexpr auto OverrideAreaMusic = 0x788; // USoundBase*
			constexpr auto OverrideAreaMusicPosition = 0x790; // FVector
			constexpr auto OverrideAreaMusicRange = 0x79c; // float
			constexpr auto bAllowUnclaimDinos = 0x7a0; // bool
			constexpr auto FloatingHUDRange = 0x7a4; // float
			constexpr auto FloatingChatRange = 0x7a8; // float
			constexpr auto ExtinctionEventTimeInterval = 0x7ac; // int32_t
			constexpr auto RTSModeNumSelectableDinosScale = 0x7b0; // float
			constexpr auto RTSMaxRangeFromPlayerCharacterScale = 0x7b4; // float
			constexpr auto ExtinctionEventPercent = 0x7b8; // float
			constexpr auto ExtinctionEventSecondsRemaining = 0x7bc; // int32_t
			constexpr auto bDoExtinctionEvent = 0x7c0; // bool
			constexpr auto DestroyTamesOverLevelClamp = 0x7c4; // int32_t
			constexpr auto InventoryComponentAppends = 0x7c8; // TArray<FInventoryComponentDefaultItemsAppend>
			constexpr auto bPreventOfflinePvP = 0x7d8; // bool
			constexpr auto bPvPDinoDecay = 0x7d9; // bool
			constexpr auto bAllowUnclaimDinosConfig = 0x7da; // bool
			constexpr auto bForceUseInventoryAppends = 0x7db; // bool
			constexpr auto bOverideStructurePlatformPrevention = 0x7dc; // bool
			constexpr auto ItemStackSizeMultiplier = 0x7e0; // float
			constexpr auto PreventOfflinePvPLiveTeams = 0x7e8; // TArray<int32_t>
			constexpr auto PreventOfflinePvPExpiringTeams = 0x7f8; // TArray<int32_t>
			constexpr auto PreventOfflinePvPExpiringTimes = 0x808; // TArray<double>
			constexpr auto bAllowAnyoneBabyImprintCuddle = 0x8b8; // bool
			constexpr auto bDisableImprintDinoBuff = 0x8b9; // bool
			constexpr auto MaxPersonalTamedDinos = 0x8bc; // int32_t
			constexpr auto ClusterId = 0x8d8; // FString
			constexpr auto ServerSessionName = 0x918; // FString
			constexpr auto bPreventTribeAlliances = 0x928; // bool
			constexpr auto bServerUseDinoList = 0x942; // bool
			constexpr auto bPvEAllowStructuresAtSupplyDrops = 0x943; // bool
			constexpr auto bAllowForceNetUpdate = 0x944; // bool
			constexpr auto MinimumDinoReuploadInterval = 0x948; // float
			constexpr auto HairGrowthSpeedMultiplier = 0x94c; // float
			constexpr auto FastDecayInterval = 0x950; // float
			constexpr auto OnHTTPGetResponse = 0x958; // FScriptMulticastDelegate
			constexpr auto OnHTTPPostResponse = 0x968; // FScriptMulticastDelegate
			constexpr auto bAllowMultipleAttachedC4 = 0x978; // bool
			constexpr auto bCrossARKAllowForeignDinoDownloads = 0x979; // bool
			constexpr auto bUseCorpseLocator = 0x990; // bool
			constexpr auto bDisableStructurePlacementCollision = 0x991; // bool
			constexpr auto bUseSingleplayerSettings = 0x992; // bool
			constexpr auto bAllowPlatformSaddleMultiFloors = 0x993; // bool
			constexpr auto bPreventSpawnAnimations = 0x994; // bool
			constexpr auto MaxAlliancesPerTribe = 0x998; // int32_t
			constexpr auto MaxTribesPerAlliance = 0x99c; // int32_t
			constexpr auto bIsLegacyServer = 0x9a0; // bool
			constexpr auto bDisableDinoDecayClaiming = 0x9a1; // bool
			constexpr auto UseStructurePreventionVolumeTag = 0x9a4; // FName
			constexpr auto MaxStructuresInSmallRadius = 0x9ac; // int32_t
			constexpr auto RadiusStructuresInSmallRadius = 0x9b0; // float
			constexpr auto bUseTameLimitForStructuresOnly = 0x9b4; // bool
			constexpr auto bLimitTurretsInRange = 0x9b5; // bool
			constexpr auto LimitTurretsRange = 0x9b8; // float
			constexpr auto LimitTurretsNum = 0x9bc; // int32_t
			constexpr auto bForceAllowAllStructures = 0x9c0; // bool
			constexpr auto bShowCreativeMode = 0x9c1; // bool
			constexpr auto PassiveTameIntervalMultiplier = 0x9e8; // float
			constexpr auto UniqueDinos = 0x9f0; // TArray<APrimalDinoCharacter*>
			constexpr auto ActiveMissionTags = 0xa00; // TArray<FName>
			constexpr auto MinimumUniqueDownloadInterval = 0xa10; // uint32_t
			constexpr auto MaximumUniqueDownloadInterval = 0xa14; // uint32_t
			constexpr auto bIgnoreStructuresPreventionVolumes = 0xa18; // bool
			constexpr auto bPreventOutOfTribePinCodeUse = 0xa19; // bool
			constexpr auto UniqueDownloads = 0xa20; // TArray<FDinoDownloadData>
			constexpr auto GameDataSets = 0xa30; // TArray<FDataSet>
			constexpr auto ActiveEventOverrides = 0xa40; // UPrimalWorldSettingsEventOverrides*
			constexpr auto bIgnoreLimitMaxStructuresInRangeTypeFlag = 0xa48; // bool
			constexpr auto MassTeleportQueue = 0xa50; // TArray<FMassTeleportData>
			constexpr auto bAllowLowGravitySpin = 0xa80; // bool
			constexpr auto OnDinoDownloaded = 0xa98; // FScriptMulticastDelegate
			constexpr auto OnDinoUploaded = 0xaa8; // FScriptMulticastDelegate
			constexpr auto WorldBuffPersistantDatas = 0xab8; // TArray<FWorldBuffPersistantData>
			constexpr auto TurretCopySettingsCooldown = 0xac8; // float
			constexpr auto BaseHexagonRewardMultiplier = 0xacc; // float
			constexpr auto HexagonRewardMultiplier = 0xad0; // float
			constexpr auto HexagonCostMultiplier = 0xad4; // float
			constexpr auto bDisableHexagonStore = 0xad8; // bool
			constexpr auto bHexStoreAllowOnlyEngramTradeOption = 0xad9; // bool
			constexpr auto bAllowFlyerSpeedLeveling = 0xada; // bool
			constexpr auto PreventBreedingForClassNames = 0xae0; // TArray<FString>
			constexpr auto PreventTransferForClassNames = 0xaf0; // TArray<FString>
			constexpr auto LiveTuningReplicatedChunkSize = 0xb00; // int32_t
			constexpr auto LiveTuningOverloadChunks = 0xb08; // TArray<FString>
			constexpr auto EnvironmentIndex = 0xb1c; // int32_t
			constexpr auto NextEnvironmentIndex = 0xb20; // int32_t
			constexpr auto NextMutagenTime = 0xb28; // double
		}
		// Inheritance: APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace APrimalBuff_Grappled
		{
			constexpr auto CurrentGrappleTethers = 0x978; // TArray<FGrappleTether>
			constexpr auto LastSyncedGrappleTethers = 0x988; // TArray<FGrappleTether>
			constexpr auto ReplicatedGrappleTethers = 0x998; // TArray<FReplicatedGrappleTetherData>
			constexpr auto MyOwner = 0x9a8; // APrimalCharacter*
			constexpr auto MyOwnerCDO = 0x9b0; // APrimalCharacter*
			constexpr auto GrappleState_Current = 0x9b8; // EGrappleState
			constexpr auto GrappleState_Previous = 0x9b9; // EGrappleState
			constexpr auto WantsGrappleState = 0x9ba; // EGrappleState
			constexpr auto DefaultGrappledBuffClass = 0x9c0; // APrimalBuff_Grappled*
			constexpr auto PullingSoundCue = 0x9c8; // USoundCue*
			constexpr auto ReleasingSoundCue = 0x9d0; // USoundCue*
			constexpr auto GrappleTetherMesh = 0x9d8; // UStaticMesh*
			constexpr auto bDetachGrappledChars = 0x9e0; // char : 1
			constexpr auto bDebugGrappling = 0x9e0; // char : 1
			constexpr auto bDebugGrappling_AgainstSurface = 0x9e0; // char : 1
			constexpr auto bAllowGrappleLogicOnRemoteClients = 0x9e0; // char : 1
			constexpr auto bForceIdleGrappleState = 0x9e0; // char : 1
			constexpr auto bHasGrappleBuffInitialized = 0x9e0; // char : 1
			constexpr auto bIsOwnerAgainstSurface = 0x9e0; // char : 1
			constexpr auto bOwnerMovementAffectedByGrappleTethers = 0x9e0; // char : 1
			constexpr auto bDidOverrideVelocityThisFrame = 0x9e1; // char : 1
			constexpr auto bHasAnyTethersAttachedToDynamicActors = 0x9e1; // char : 1
			constexpr auto bHasAnyGrappledChars = 0x9e1; // char : 1
			constexpr auto bBrokeAnyTethersThisFrame = 0x9e1; // char : 1
			constexpr auto bHasValidReservedTethers = 0x9e1; // char : 1
			constexpr auto bHasAnyValidTethers = 0x9e1; // char : 1
			constexpr auto bLastIsOwnerSwinging = 0x9e1; // char : 1
			constexpr auto bLastIsOwnerSubmerged = 0x9e1; // char : 1
			constexpr auto bShouldResetOwnerVars = 0x9e2; // char : 1
			constexpr auto MaxAllowedGrappleTethers = 0x9e4; // int32_t
			constexpr auto ForceFallingWhenDirToTetherAboveUpDot = 0x9e8; // float
			constexpr auto ForceFallingWhenAboveVelocityAwayFromAnchor = 0x9ec; // float
			constexpr auto ForceFallingBelowTetherToOwnerDeltaZ = 0x9f0; // float
			constexpr auto ReduceFallDamageUnderAngleToAnchor = 0x9f4; // float
			constexpr auto GrappledFallDamageMult_MIN = 0x9f8; // float
			constexpr auto OwnerInput_SwingSpeed = 0x9fc; // float
			constexpr auto SwingingVelocityDampingRate_Idle = 0xa00; // float
			constexpr auto SwingingVelocityDampingRate_Pulling = 0xa04; // float
			constexpr auto SwingingVelocityDampingRateAxisMults_Pulling = 0xa08; // FVector2D
			constexpr auto SwingingVelocityDampingRate_Releasing = 0xa10; // float
			constexpr auto SwingingVelocityDampingRate_OwnerInput = 0xa14; // float
			constexpr auto TetherTensionVelocityDampingRate = 0xa18; // float
			constexpr auto GrappleVelocityMAX = 0xa1c; // float
			constexpr auto SwingingClientPositionErrorOverride_Player = 0xa20; // float
			constexpr auto SwingingClientPositionErrorOverride_Dino_MovingFlying = 0xa24; // float
			constexpr auto SwingingClientPositionErrorOverride_Dino_Stopped = 0xa28; // float
			constexpr auto SwingingClientLocationInterpSpeed = 0xa2c; // float
			constexpr auto SwingingClientRotationInterpSpeed = 0xa30; // float
			constexpr auto SyncGrappleTetherLengthInterval = 0xa34; // float
			constexpr auto PullableWeightLimit = 0xa38; // float
			constexpr auto TetherMaxLength = 0xa3c; // float
			constexpr auto TetherMinLength = 0xa40; // float
			constexpr auto TetherAutoDetachUnderLength = 0xa44; // float
			constexpr auto TetherBreakLimit_OwnerPastCurrentLengthDelta = 0xa48; // float
			constexpr auto TetherBreakLimit_OwnerPastCurrentLengthForTime = 0xa4c; // float
			constexpr auto TetherBreakLimit_GrappledActorAboveVelocity = 0xa50; // float
			constexpr auto TetherWidth = 0xa54; // float
			constexpr auto LastGrappleTetherLengthSyncTime = 0xa58; // double
			constexpr auto OwnerInput_CurrentSwingingVelocity = 0xa60; // FVector
			constexpr auto OwnerInput_CurrentSynced = 0xa6c; // FVector2D
			constexpr auto OwnerInput_LastSynced = 0xa74; // FVector2D
			constexpr auto OwnerInput_LastSyncTime = 0xa80; // double
			constexpr auto OwnerInput_SyncInverval = 0xa88; // float
			constexpr auto DirToAgainstSurface = 0xa8c; // FVector
			constexpr auto LastDirToAgainstSurface = 0xa98; // FVector
			constexpr auto RequiredDirToSurfaceDotDeltaToUpdate = 0xaa4; // float
			constexpr auto AgainstSurfaceNormal = 0xaa8; // FVector
			constexpr auto TetherPullMaxVelocity = 0xab4; // float
			constexpr auto TetherPullAcceleration = 0xab8; // float
			constexpr auto TetherPullMaxVelocity_GrappledChar = 0xabc; // float
			constexpr auto TetherPullAcceleration_GrappledChar = 0xac0; // float
			constexpr auto TetherReleaseMaxVelocity = 0xac4; // float
			constexpr auto TetherReleaseMaxVelocity_GrappledChar = 0xac8; // float
			constexpr auto CurrentTetherMoveVelocity = 0xacc; // FVector
			constexpr auto AvgParentCharVelocity = 0xad8; // FVector
			constexpr auto ClientSuggestTetherLength_AllowedDelta = 0xae4; // float
			constexpr auto ClientSuggestTetherLength_AllowedInterval = 0xae8; // float
			constexpr auto ClientSuggestTetherLength_LastReceivedTime = 0xaf0; // double
			constexpr auto ValidHitSurface_DistanceFromCapsuleEdge = 0xaf8; // float
			constexpr auto ValidHitSurface_UpVectorAngleRange = 0xafc; // FVector2D
			constexpr auto LastProjectedOwnerInputs = 0xb04; // FVector2D
			constexpr auto OwnerCapsuleRadius = 0xb0c; // float
			constexpr auto OwnerCapsuleHalfHeight = 0xb10; // float
			constexpr auto PreviousOwnerVelocity = 0xb14; // FVector
			constexpr auto TetherTensionStrength = 0xb20; // float
			constexpr auto TetherTensionExponent = 0xb24; // float
			constexpr auto ForceFallingStateImpulse = 0xb28; // float
			constexpr auto ReservedTetherTags = 0xb30; // TArray<FString>
			constexpr auto TetherTagOwnerConnectorString = 0xb40; // FString
			constexpr auto GrappledGravityScaleRange = 0xb50; // FVector2D
			constexpr auto GrappledGravityScaleMult_Idle = 0xb58; // float
			constexpr auto GrappledGravityScaleMult_Pulling = 0xb5c; // float
			constexpr auto GrappledGravityScaleMult_Releasing = 0xb60; // float
			constexpr auto AtTetherLimitBelowDistFromEnd = 0xb64; // float
			constexpr auto LastGravity = 0xb68; // FVector
			constexpr auto LookingAtAgainstSurfaceAngle = 0xb74; // float
			constexpr auto VelocityOverrideMaxDeltaTime = 0xb78; // float
		}
		// Inheritance: UObject
		namespace AActor
		{
			constexpr auto PrimaryActorTick = 0x28; // FActorTickFunction
			constexpr auto bNetTemporary = 0x80; // char : 1
			constexpr auto bIsMapActor = 0x80; // char : 1
			constexpr auto bHasHighVolumeRPCs = 0x80; // char : 1
			constexpr auto bNetStartup = 0x80; // char : 1
			constexpr auto bPreventCharacterBasing = 0x80; // char : 1
			constexpr auto bPreventCharacterBasingAllowSteppingUp = 0x80; // char : 1
			constexpr auto bOnlyRelevantToOwner = 0x80; // char : 1
			constexpr auto bHidden = 0x80; // char : 1
			constexpr auto bClimbable = 0x81; // char : 1
			constexpr auto bAttachmentReplicationUseNetworkParent = 0x81; // char : 1
			constexpr auto bIgnoredByCharacterEncroachment = 0x81; // char : 1
			constexpr auto bUseBPChangedActorTeam = 0x81; // char : 1
			constexpr auto bForceHiddenReplication = 0x81; // char : 1
			constexpr auto bAlwaysRelevant = 0x81; // char : 1
			constexpr auto bUnstreamComponentsUseEndOverlap = 0x82; // char : 1
			constexpr auto bUseBPOverrideUILocation = 0x82; // char : 1
			constexpr auto bForceBasedActorsOutOfFastTick = 0x82; // char : 1
			constexpr auto bUseBPGetShowDebugAnimationComponents = 0x82; // char : 1
			constexpr auto bWantsServerThrottledTick = 0x82; // char : 1
			constexpr auto CustomTimeDilation = 0x84; // float
			constexpr auto bUseBPOverrideTargetingLocation = 0x88; // char : 1
			constexpr auto bPreventNPCSpawnFloor = 0x88; // char : 1
			constexpr auto bUseBPGetHUDDrawLocationOffset = 0x88; // char : 1
			constexpr auto bWantsPerformanceThrottledTick = 0x88; // char : 1
			constexpr auto bPreventRegularForceNetUpdate = 0x88; // char : 1
			constexpr auto bForceInfiniteDrawDistance = 0x88; // char : 1
			constexpr auto bUseBPCheckForErrors = 0x88; // char : 1
			constexpr auto bNetCritical = 0x89; // char : 1
			constexpr auto bUseBPCustomIsRelevantForClient = 0x89; // char : 1
			constexpr auto bUseStasisGrid = 0x89; // char : 1
			constexpr auto bPreventCliffPlatforms = 0x89; // char : 1
			constexpr auto ClientReplicationSendNowThreshold = 0x8c; // float
			constexpr auto bTearOff = 0x90; // char : 1
			constexpr auto bStasised = 0x90; // char : 1
			constexpr auto bExchangedRoles = 0x90; // char : 1
			constexpr auto bSuppressDestroyedEvent = 0x90; // char : 1
			constexpr auto bReplicateMovement = 0x90; // char : 1
			constexpr auto bUseOnlyPointForLevelBounds = 0x90; // char : 1
			constexpr auto bReplicateInstigator = 0x90; // char : 1
			constexpr auto bHibernateChange = 0x91; // char : 1
			constexpr auto bAutoStasis = 0x91; // char : 1
			constexpr auto bBlockInput = 0x91; // char : 1
			constexpr auto bPendingNetUpdate = 0x91; // char : 1
			constexpr auto bDoNotCook = 0x91; // char : 1
			constexpr auto bNetUseOwnerRelevancy = 0x91; // char : 1
			constexpr auto bNetLoadOnClient = 0x91; // char : 1
			constexpr auto bNetUseClientRelevancy = 0x91; // char : 1
			constexpr auto bMultiUseCenterHUD = 0x92; // char : 1
			constexpr auto bUseNetworkSpatialization = 0x92; // char : 1
			constexpr auto bUseAttachmentReplication = 0x92; // char : 1
			constexpr auto bOnlyInitialReplication = 0x92; // char : 1
			constexpr auto bPreventSaving = 0x92; // char : 1
			constexpr auto bUseBPGetMultiUseCenterText = 0x92; // char : 1
			constexpr auto bEnableMultiUse = 0x92; // char : 1
			constexpr auto bBlueprintMultiUseEntries = 0x92; // char : 1
			constexpr auto bNetworkSpatializationForceRelevancyCheck = 0x93; // char : 1
			constexpr auto bReplicates = 0x93; // char : 1
			constexpr auto bActorEnableCollision = 0x93; // char : 1
			constexpr auto bForceAllowNetMulticast = 0x94; // bool
			constexpr auto RemoteRole = 0x95; // ENetRole
			constexpr auto Owner = 0x98; // AActor*
			constexpr auto ReplicatedMovement = 0xbc; // FRepMovement
			constexpr auto AttachmentReplication = 0xf0; // FRepAttachment
			constexpr auto Role = 0x130; // ENetRole
			constexpr auto NetDormancy = 0x131; // ENetDormancy
			constexpr auto ReplicatedComponents = 0x138; // TArray<TWeakObjectPtr<UActorComponent>>
			constexpr auto AutoReceiveInput = 0x150; // EAutoReceiveInput
			constexpr auto DefaultStasisComponentOctreeFlags = 0x154; // int32_t
			constexpr auto StasisCheckComponent = 0x158; // UPrimitiveComponent*
			constexpr auto NetworkSpatializationChildren = 0x160; // TArray<AActor*>
			constexpr auto NetworkSpatializationParent = 0x170; // AActor*
			constexpr auto NetworkAndStasisRangeMultiplier = 0x178; // float
			constexpr auto UnstasisLastInRangeTime = 0x180; // double
			constexpr auto LastPreReplicationTime = 0x188; // double
			constexpr auto LastEnterStasisTime = 0x190; // double
			constexpr auto LastExitStasisTime = 0x198; // double
			constexpr auto CustomTag = 0x1a0; // FName
			constexpr auto CustomData = 0x1a8; // int32_t
			constexpr auto ReplicationIntervalMultiplier = 0x1ac; // float
			constexpr auto StasisUnRegisteredComponents = 0x1c8; // TArray<TWeakObjectPtr<UActorComponent>>
			constexpr auto InputComponent = 0x1d8; // UInputComponent*
			constexpr auto InputConsumeOption = 0x1e0; // EInputConsumeOptions
			constexpr auto NetCullDistanceSquared = 0x1e4; // float
			constexpr auto NetCullDistanceSquaredDormant = 0x1e8; // float
			constexpr auto NetTag = 0x1ec; // int32_t
			constexpr auto NetUpdateTime = 0x1f0; // double
			constexpr auto NetUpdateFrequency = 0x1f8; // float
			constexpr auto NetPriority = 0x1fc; // float
			constexpr auto LastNetUpdateTime = 0x200; // double
			constexpr auto NetDriverName = 0x208; // FName
			constexpr auto bCollideWhenPlacing = 0x210; // char : 1
			constexpr auto bPreventOnDedicatedServer = 0x210; // char : 1
			constexpr auto bPendingKillPending = 0x210; // char : 1
			constexpr auto bAutoDestroyWhenFinished = 0x210; // char : 1
			constexpr auto bCanBeDamaged = 0x210; // char : 1
			constexpr auto bAllowReceiveTickEventOnDedicatedServer = 0x211; // char : 1
			constexpr auto bLoadedFromSaveGame = 0x211; // char : 1
			constexpr auto bPreventLevelBoundsRelevant = 0x211; // char : 1
			constexpr auto bForceReplicateDormantChildrenWithoutSpatialRelevancy = 0x211; // char : 1
			constexpr auto bFindCameraComponentWhenViewTarget = 0x211; // char : 1
			constexpr auto bBPPreInitializeComponents = 0x211; // char : 1
			constexpr auto bBPInventoryItemUsedHandlesDurability = 0x212; // char : 1
			constexpr auto bAlwaysCreatePhysicsState = 0x212; // char : 1
			constexpr auto bUseBPForceAllowsInventoryUse = 0x212; // char : 1
			constexpr auto bBPPostInitializeComponents = 0x212; // char : 1
			constexpr auto bUseBPInventoryItemDropped = 0x212; // char : 1
			constexpr auto bUseBPInventoryItemUsed = 0x212; // char : 1
			constexpr auto bStasisComponentRadiusForceDistanceCheck = 0x212; // char : 1
			constexpr auto bForceNetworkSpatialization = 0x212; // char : 1
			constexpr auto bReplicateRotationHighQuality = 0x213; // char : 1
			constexpr auto bReplicateVelocityHighQuality = 0x213; // char : 1
			constexpr auto bOnlyReplicateOnNetForcedUpdate = 0x213; // char : 1
			constexpr auto bActorInitialized = 0x213; // char : 1
			constexpr auto bActorSeamlessTraveled = 0x213; // char : 1
			constexpr auto bIgnoresOriginShifting = 0x213; // char : 1
			constexpr auto bReplicateHidden = 0x213; // char : 1
			constexpr auto bPreventActorStasis = 0x213; // char : 1
			constexpr auto bUseBPGetBonesToHideOnAllocation = 0x214; // char : 1
			constexpr auto TargetingTeam = 0x218; // int32_t
			constexpr auto OverrideStasisComponentRadius = 0x21c; // float
			constexpr auto Instigator = 0x220; // APawn*
			constexpr auto CreationTime = 0x228; // double
			constexpr auto OriginalCreationTime = 0x230; // double
			constexpr auto Children = 0x238; // TArray<AActor*>
			constexpr auto AnimUpdateRateShiftTag = 0x248; // uint32_t
			constexpr auto AnimUpdateRateFrameCount = 0x24c; // uint32_t
			constexpr auto RootComponent = 0x250; // USceneComponent*
			constexpr auto ControllingMatineeActors = 0x258; // TArray<AMatineeActor*>
			constexpr auto InitialLifeSpan = 0x268; // float
			constexpr auto Layers = 0x270; // TArray<FName>
			constexpr auto ParentComponentActor = 0x280; // TWeakObjectPtr<AActor>
			constexpr auto LastRenderTime = 0x288; // double
			constexpr auto LastRenderTimeIgnoreShadow = 0x290; // double
			constexpr auto Tags = 0x298; // TArray<FName>
			constexpr auto HiddenEditorViews = 0x2a8; // uint64_t
			constexpr auto OnTakeAnyDamage = 0x2b0; // FScriptMulticastDelegate
			constexpr auto OnTakePointDamage = 0x2c0; // FScriptMulticastDelegate
			constexpr auto OnActorBeginOverlap = 0x2d0; // FScriptMulticastDelegate
			constexpr auto OnActorEndOverlap = 0x2e0; // FScriptMulticastDelegate
			constexpr auto OnBeginCursorOver = 0x2f0; // FScriptMulticastDelegate
			constexpr auto OnEndCursorOver = 0x300; // FScriptMulticastDelegate
			constexpr auto OnClicked = 0x310; // FScriptMulticastDelegate
			constexpr auto OnReleased = 0x320; // FScriptMulticastDelegate
			constexpr auto OnInputTouchBegin = 0x330; // FScriptMulticastDelegate
			constexpr auto OnInputTouchEnd = 0x340; // FScriptMulticastDelegate
			constexpr auto OnInputTouchEnter = 0x350; // FScriptMulticastDelegate
			constexpr auto OnInputTouchLeave = 0x360; // FScriptMulticastDelegate
			constexpr auto OnActorHit = 0x370; // FScriptMulticastDelegate
			constexpr auto OnTargetingTeamChanged = 0x380; // FScriptMulticastDelegate
			constexpr auto DefaultActorLocation = 0x390; // FVector
			constexpr auto UniqueGuidId = 0x39c; // FGuid
			constexpr auto OnDestroyed = 0x3b0; // FScriptMulticastDelegate
			constexpr auto OnActorCustomEvent = 0x3c0; // FScriptMulticastDelegate
			constexpr auto OnEndPlay = 0x3d0; // FScriptMulticastDelegate
			constexpr auto OnMatineeUpdated = 0x3e8; // FScriptMulticastDelegate
			constexpr auto OnSemaphoreTaken = 0x418; // FScriptMulticastDelegate
			constexpr auto ForceMaximumReplicationRateUntilTime = 0x428; // float
			constexpr auto LastActorForceReplicationTime = 0x430; // double
			constexpr auto SerializedComponents = 0x448; // TArray<UActorComponent*>
			constexpr auto bUseBPPreventAttachments = 0x464; // bool
			constexpr auto bForceNonBlockingHits = 0x465; // bool
		}
		// Inheritance: AActor > UObject
		namespace ADroppedItem
		{
			constexpr auto MyItemInfo = 0x470; // FItemNetInfo
			constexpr auto MyItem = 0x620; // UPrimalItem*
			constexpr auto bApplyImpulseOnSpawn = 0x628; // char : 1
			constexpr auto bDestroyOnStasis = 0x628; // char : 1
			constexpr auto bUseCollisionTrace = 0x628; // char : 1
			constexpr auto bPreventPickup = 0x628; // char : 1
			constexpr auto bDestroyOutOfWater = 0x628; // char : 1
			constexpr auto bUseClientDroppedItemPhysics = 0x628; // char : 1
			constexpr auto bIsUnderwater = 0x628; // char : 1
			constexpr auto bNotifyPreviousOwnerOfPickup = 0x628; // char : 1
			constexpr auto bAssignedToTribePickupOnly = 0x629; // char : 1
			constexpr auto AssignedToTribeID = 0x62c; // int32_t
			constexpr auto bLowQuality = 0x630; // char : 1
			constexpr auto ImpulseMagnitude = 0x634; // float
			constexpr auto ForceSleepTimer = 0x638; // float
			constexpr auto DroppedItemScale = 0x63c; // FVector
			constexpr auto OverlayTooltipPadding = 0x648; // FVector2D
			constexpr auto OverlayTooltipScale = 0x650; // FVector2D
			constexpr auto HUDOverlayToolTipWidget = 0x658; // UPrimalItemToolTipWidget*
			constexpr auto DroppedByName = 0x660; // FString
			constexpr auto DroppedByPlayerID = 0x670; // uint64_t
			constexpr auto DroppedItemDestructionTime = 0x678; // double
			constexpr auto DroppedItemInterpTarget = 0x680; // FVector
			constexpr auto bClientDisablePhysics = 0x68c; // bool
			constexpr auto NetDroppedMeshOverride = 0x690; // UStaticMesh*
			constexpr auto NetDroppedMeshMaterialOverride = 0x698; // UMaterialInterface*
			constexpr auto NetDroppedMeshOverrideScale3D = 0x6a0; // FVector
			constexpr auto SpawnDropSoundTime = 0x6b8; // double
			constexpr auto DroppedByActor = 0x6cc; // TWeakObjectPtr<AActor>
			constexpr auto FreezePhysicsAfterTime = 0x6f0; // float
			constexpr auto PickupAllRange = 0x6f4; // float
			constexpr auto bBPOnItemPickedUp = 0x6fc; // char : 1
		}
		// Inheritance: AHUD > AActor > UObject
		namespace AShooterHUD
		{
			constexpr auto HurtCameraShake = 0x550; // UCameraShake*
			constexpr auto MaxDamageCameraShakeScale = 0x560; // float
			constexpr auto MaxDamageCameraShakeSpeedInverse = 0x564; // float
			constexpr auto bShowAllPlayersWhenSpectating = 0x568; // bool
			constexpr auto bShowAllPlayersWhenSpectatingLocal = 0x569; // bool
			constexpr auto PlayerInfoRequestTimeInterval = 0x578; // float
			constexpr auto MyPlayerHUD = 0x590; // UPlayerHUDUI*
			constexpr auto MyPlayerCustomStatusHUD = 0x598; // UHUDCustomStatusWidget*
			constexpr auto MyPlayerActiveMissionHUD = 0x5a0; // UHUDActiveMissionWidget*
			constexpr auto MyPlayerPointsOfInterestHUD = 0x5a8; // UHUDPointsOfInterestContainer*
			constexpr auto MyPlayerPingHUD = 0x5b0; // UHUDPingsContainer*
			constexpr auto MyPlayerLeaderboardHUD = 0x5b8; // UUI_LeaderboardWidget*
			constexpr auto MySubtitlesHUD = 0x5c0; // UUI_Subtitles*
			constexpr auto MyOverlayHUD = 0x5c8; // UUI_HudOverlay*
			constexpr auto MyTopOverlayHUD = 0x5d0; // UUI_HudOverlay*
			constexpr auto ChatBoxUI = 0x5d8; // UUI_ChatBox*
			constexpr auto HubUITemplate = 0x5e0; // UUI_Hub*
			constexpr auto SurvivorProfileUITemplate = 0x5e8; // UUI_SurvivorProfile*
			constexpr auto ChangeFrequencyUITemplate = 0x5f0; // UUI_ChangeTransponderFreqencyEntry*
			constexpr auto PlayerHUDUITemplate = 0x5f8; // UPlayerHUDUI*
			constexpr auto PlayerHUDCustomStatusTemplate = 0x600; // UHUDCustomStatusWidget*
			constexpr auto PlayerHUDActiveMissionTemplate = 0x608; // UHUDActiveMissionWidget*
			constexpr auto PlayerHUDPointsOfInterestTemplate = 0x610; // UHUDPointsOfInterestContainer*
			constexpr auto LeaderboardsUITemplate = 0x618; // UUI_LeaderboardWidget*
			constexpr auto SubtitlesUITemplate = 0x620; // UUI_Subtitles*
			constexpr auto SavingOverlayUITemplate = 0x628; // UUI_SavingOverlay*
			constexpr auto OverlayHUDUITemplate = 0x630; // UUI_HudOverlay*
			constexpr auto TopOverlayHUDUITemplate = 0x638; // UUI_HudOverlay*
			constexpr auto InventoryUITemplate = 0x640; // UUI_Inventory*
			constexpr auto MissionListUITemplate = 0x648; // UUI_MissionList*
			constexpr auto AdminMangmentUITemplate = 0x650; // UUI_AdminMangment*
			constexpr auto TribeManagerUITemplate = 0x658; // UUI_TribeManager*
			constexpr auto TribeWarUITemplate = 0x660; // UUI_TribeWarEntry*
			constexpr auto PinEntryUITemplate = 0x668; // UUI_PinEntry*
			constexpr auto TextEntryUITemplate = 0x670; // UUI_TextEntry*
			constexpr auto MapMarkersUITemplate = 0x678; // UUI_MapMarkersEntry*
			constexpr auto SpawnUITemplate = 0x680; // UUI_Spawn*
			constexpr auto AllPlayersListTemplate = 0x688; // UUI_AllPlayersList*
			constexpr auto ChatBoxUITemplate = 0x690; // UUI_ChatBox*
			constexpr auto TutorialUITemplate = 0x698; // UPrimalUI*
			constexpr auto bShowChatBoxByDefault = 0x6a0; // bool
			constexpr auto InventoryRadialSelectorTemplate = 0x6a8; // URadialSelectorHUD_Inventory*
			constexpr auto MultiUseRadialSelectorTemplate = 0x6b0; // URadialSelectorHUD_MultiUse*
			constexpr auto PlayerActionRadialSelectorTemplate = 0x6b8; // URadialSelectorHUD_PlayerAction*
			constexpr auto WhistleRadialSelectorTemplate = 0x6c0; // URadialSelectorHUD_PlayerAction*
			constexpr auto EmoteRadialSelectorTemplate = 0x6c8; // URadialSelectorHUD_PlayerAction*
			constexpr auto CustomRadialSelectorTemplate = 0x6d0; // URadialSelectorHUD_Custom*
			constexpr auto CurrentRadialSelector = 0x6d8; // URadialSelectorHUD*
			constexpr auto InventoryRadialSelector = 0x6e0; // URadialSelectorHUD_Inventory*
			constexpr auto MultiUseRadialSelector = 0x6e8; // URadialSelectorHUD_MultiUse*
			constexpr auto PlayerActionRadialSelector = 0x6f0; // URadialSelectorHUD_PlayerAction*
			constexpr auto WhistleRadialSelector = 0x6f8; // URadialSelectorHUD_PlayerAction*
			constexpr auto EmoteRadialSelector = 0x700; // URadialSelectorHUD_PlayerAction*
			constexpr auto CustomRadialSelector = 0x708; // URadialSelectorHUD_Custom*
			constexpr auto BigFont = 0x718; // UFont*
			constexpr auto NormalFont = 0x720; // UFont*
			constexpr auto SmallFont = 0x728; // UFont*
			constexpr auto HitNotifyTexture = 0x730; // UTexture2D*
			constexpr auto HUDMainTextureAtlas = 0x738; // UTexture2D*
			constexpr auto HUDAssets02TextureAtlas = 0x740; // UTexture2D*
			constexpr auto LowHealthOverlayTexture = 0x748; // UTexture2D*
			constexpr auto HitMarkerTexture = 0x750; // UTexture2D*
			constexpr auto MultiUseUITemplate = 0x758; // UUI_MultiUse*
			constexpr auto TimeToHideChat = 0x760; // float
			constexpr auto DeathIcon = 0x768; // UTexture2D*
			constexpr auto KilledIcon = 0x770; // UTexture2D*
			constexpr auto ChatPopupInterval = 0x778; // float
			constexpr auto SpeechBubble = 0x780; // UTexture2D*
			constexpr auto HitNotifyIcon0x8 = 0x7b8; // FCanvasIcon
			constexpr auto Crosshair0x5 = 0x878; // FCanvasIcon
			constexpr auto HitNotifyCrosshair = 0x8f0; // FCanvasIcon
			constexpr auto bHudHidden = 0xa58; // bool
			constexpr auto bShowChatPopup = 0xa59; // bool
			constexpr auto CurrentOpenedInventory = 0xa88; // UUI_Inventory*
			constexpr auto CurrentlyOpenedHubUI = 0xa90; // UUI_Hub*
			constexpr auto bMultiUseIsDrawingUIHUD = 0xa98; // bool
			constexpr auto LastTargetedActor = 0xaa8; // TWeakObjectPtr<AActor>
			constexpr auto GenericGamepadReplacementsForKeyboardControls = 0xab0; // TArray<FHintReplacementKeysForKeyboardControls>
			constexpr auto TutorialUI = 0xb38; // UUI_Tutorial*
		}
		// Inheritance: ADino_Character_BP_C > APrimalDinoCharacter > APrimalCharacter > ACharacter > APawn > AActor > UObject
		namespace ASpaceDolphin_Character_BP_C
		{
			constexpr auto UnderwaterSound = 0x2278; // UAudioComponent*
			constexpr auto ChargingHomingLaserSound = 0x2280; // UAudioComponent*
			constexpr auto FPVSkelMesh = 0x2288; // USkeletalMeshComponent*
			constexpr auto TailTrailLeftVFX = 0x2290; // UParticleSystemComponent*
			constexpr auto TailTrailCenterVFX = 0x2298; // UParticleSystemComponent*
			constexpr auto TailTrailRightVFX = 0x22a0; // UParticleSystemComponent*
			constexpr auto ChaffFireworks = 0x22a8; // UParticleSystemComponent*
			constexpr auto WaterSurfaceFX = 0x22b0; // UParticleSystemComponent*
			constexpr auto TailTrail = 0x22b8; // UParticleSystemComponent*
			constexpr auto BarrelRollTrailRight = 0x22c0; // UParticleSystemComponent*
			constexpr auto BarrelRollTrailLeft = 0x22c8; // UParticleSystemComponent*
			constexpr auto Rotating = 0x22d0; // URotatingMovementComponent*
			constexpr auto TurboJetLeftLow = 0x22d8; // UParticleSystemComponent*
			constexpr auto OffGasLeftLow = 0x22e0; // UParticleSystemComponent*
			constexpr auto JetLeftLow = 0x22e8; // UParticleSystemComponent*
			constexpr auto TurboJetRightLow = 0x22f0; // UParticleSystemComponent*
			constexpr auto OffGasRightLow = 0x22f8; // UParticleSystemComponent*
			constexpr auto JetRightLow = 0x2300; // UParticleSystemComponent*
			constexpr auto TurboJetLeftHigh = 0x2308; // UParticleSystemComponent*
			constexpr auto OffGasLeftHigh = 0x2310; // UParticleSystemComponent*
			constexpr auto JetLeftHigh = 0x2318; // UParticleSystemComponent*
			constexpr auto RightJet = 0x2320; // UParticleSystemComponent*
			constexpr auto LeftJet = 0x2328; // UParticleSystemComponent*
			constexpr auto Smoke = 0x2330; // UParticleSystemComponent*
			constexpr auto ChargedLaserVFX = 0x2338; // UParticleSystemComponent*
			constexpr auto DinoCharacterStatus_BP_SpaceDolphin_C1 = 0x2340; // UDinoCharacterStatusComponent_BP_SpaceDolphin_C*
			constexpr auto AfterburnerLoop = 0x2348; // UAudioComponent*
			constexpr auto ThrusterLoop = 0x2350; // UAudioComponent*
			constexpr auto MuzzleFlash = 0x2358; // UParticleSystemComponent*
			constexpr auto Right = 0x2360; // UParticleSystemComponent*
			constexpr auto Left = 0x2368; // UParticleSystemComponent*
			constexpr auto TurboJetRightHigh = 0x2370; // UParticleSystemComponent*
			constexpr auto OffGasRightHigh = 0x2378; // UParticleSystemComponent*
			constexpr auto JetRightHigh = 0x2380; // UParticleSystemComponent*
			constexpr auto RightTail = 0x2388; // UParticleSystemComponent*
			constexpr auto LeftTail = 0x2390; // UParticleSystemComponent*
			constexpr auto TargetLatchingLoc = 0x2398; // FVector
			constexpr auto LatchAnimStarted = 0x23a4; // bool
			constexpr auto LatchStartTime = 0x23a8; // double
			constexpr auto IsUnLatchingComplete = 0x23b0; // bool
			constexpr auto LatchingDirection = 0x23b4; // FVector
			constexpr auto LatchingSurfaceNormal = 0x23c0; // FVector
			constexpr auto CanLatchOnGround = 0x23cc; // bool
			constexpr auto StartControllerRotation = 0x23cd; // bool
			constexpr auto MaxLatchingAngle = 0x23d0; // float
			constexpr auto UnlatchingStartTime = 0x23d8; // double
			constexpr auto LatchingOffset = 0x23e0; // float
			constexpr auto bWasFirstPerson = 0x23e4; // bool
			constexpr auto LatchInCameraTransitionDuration = 0x23e8; // float
			constexpr auto LatchOutCameraTransitionDuration = 0x23ec; // float
			constexpr auto bBrakeDinoPressed = 0x23f0; // bool
			constexpr auto SuperFlight = 0x23f1; // bool
			constexpr auto PrevCameraLoc = 0x23f4; // FVector
			constexpr auto ServerRightAxisInput = 0x2400; // float
			constexpr auto SuperFlightRightAxisInput = 0x2404; // float
			constexpr auto SuperFlightRollInterpSpeed = 0x2408; // float
			constexpr auto LastFrameInterceptMoveRight = 0x240c; // int32_t
			constexpr auto SuperFlightMaxRollAngle = 0x2410; // float
			constexpr auto CameraLookDeltaForSuperFlihtQuickTurn = 0x2414; // float
			constexpr auto LastTimeRequestedSuperFlightQuickTurn = 0x2418; // double
			constexpr auto SuperFlightQuickTurnCooldown = 0x2420; // float
			constexpr auto LastSuperFlightQuickTurn = 0x2428; // double
			constexpr auto LastSuperFlightQuickTurnStartTime = 0x2430; // double
			constexpr auto DefaultFOV = 0x2438; // float
			constexpr auto DotProductForDiving = 0x243c; // float
			constexpr auto MinPercentDiveSpeedForDiving = 0x2440; // float
			constexpr auto fovInterpSpeed = 0x2444; // float
			constexpr auto CurrentFOV = 0x2448; // float
			constexpr auto TimeStartedDive = 0x2450; // double
			constexpr auto DivingCameraShakeScale = 0x2458; // float
			constexpr auto DivingCameraShakeSpeed = 0x245c; // float
			constexpr auto TimeStoppedDiving = 0x2460; // double
			constexpr auto TamedWalkingSpeedMultiplierDiving = 0x2468; // float
			constexpr auto TPVOffsetDiving = 0x246c; // FVector
			constexpr auto RiderBuffs = 0x2478; // TArray<APrimalBuff*>
			constexpr auto WindGustRadius = 0x2488; // float
			constexpr auto DebugWindGust = 0x248c; // bool
			constexpr auto WindGustStructureSettingsClassForDamage = 0x2490; // UObject*
			constexpr auto WindGustTargetBuff = 0x2498; // APrimalBuff*
			constexpr auto WindGustForwardOffset = 0x24a0; // float
			constexpr auto WindGustWindEmitter = 0x24a8; // UParticleSystem*
			constexpr auto WindGustMontage = 0x24b0; // UAnimMontage*
			constexpr auto LastTimeRequestShootFlakCannon = 0x24b8; // double
			constexpr auto LastTimeTriggeredFlakCannon = 0x24c0; // double
			constexpr auto FlakCannonProj = 0x24c8; // AShooterProjectile*
			constexpr auto FlakCannonProjSpawnSocket = 0x24d0; // FName
			constexpr auto LastTimeAllyAOECheck = 0x24d8; // double
			constexpr auto AllyAOERadius = 0x24e0; // float
			constexpr auto PercentOfMaxSpeedForAllyAOE = 0x24e4; // float
			constexpr auto AllyAOEBuff = 0x24e8; // APrimalBuff*
			constexpr auto AllyAOECheckCooldown = 0x24f0; // float
			constexpr auto DebugAllyAOE = 0x24f4; // bool
			constexpr auto TamedWalkingSpeedModifierNormalFlight = 0x24f8; // float
			constexpr auto WindGustScale = 0x24fc; // FVector
			constexpr auto SuperFlightAccelerationScale = 0x2508; // float
			constexpr auto FlightDraftingRadius = 0x250c; // float
			constexpr auto IsDrafting = 0x2510; // bool
			constexpr auto IsFlightDraftingDotProduct = 0x2514; // float
			constexpr auto LastDraftingUpdateTime = 0x2518; // double
			constexpr auto SuperSaddleCustomTag = 0x2520; // FName
			constexpr auto DebugDrawDrafting = 0x2528; // bool
			constexpr auto CarriedTargetBuff = 0x2530; // APrimalBuff*
			constexpr auto SaddleFuelItem = 0x2538; // UPrimalItem*
			constexpr auto LastConsumeFuelTime = 0x2540; // double
			constexpr auto FuelConsumeFrequency = 0x2548; // float
			constexpr auto DefaultJetScale = 0x254c; // FVector
			constexpr auto CurrentZScale = 0x2558; // float
			constexpr auto LastTimePlayedStruggleAnim = 0x2560; // double
			constexpr auto LastWindGustRequestTime = 0x2568; // double
			constexpr auto OnStruggleAnim = 0x2570; // UAnimMontage*
			constexpr auto LastForwardInputTime = 0x2578; // double
			constexpr auto RotationRateInterpSpeed = 0x2580; // float
			constexpr auto RotationRateMultSuperBoost = 0x2584; // float
			constexpr auto SuperBoostCameraShakeSpeed = 0x2588; // float
			constexpr auto SuperBoostCameraShakeScale = 0x258c; // float
			constexpr auto TPVOffsetSuperBoost = 0x2590; // FVector
			constexpr auto SuperBoostMaxRollAngle = 0x259c; // float
			constexpr auto SuperFlightToggleEndDelay = 0x25a0; // float
			constexpr auto SuperFlightStartEndTime = 0x25a8; // double
			constexpr auto FuelConsumeFrequencySuperBoost = 0x25b0; // float
			constexpr auto DraftingParticle = 0x25b8; // UParticleSystem*
			constexpr auto SpeedRequirementForDrafting = 0x25c0; // float
			constexpr auto UpdateDraftingInterval = 0x25c4; // float
			constexpr auto DraftingEmitterOffset = 0x25c8; // FVector
			constexpr auto DraftingParticleRotationOffset = 0x25d4; // FRotator
			constexpr auto LastWindGustStart = 0x25e0; // double
			constexpr auto WindGustCooldown = 0x25e8; // float
			constexpr auto WindGust180EndDelay = 0x25ec; // float
			constexpr auto WindGust180StartTime = 0x25f0; // double
			constexpr auto WindGust180UpVelocityCurve = 0x25f8; // UCurveFloat*
			constexpr auto WindGust180UpVelocityScalar = 0x2600; // float
			constexpr auto WindGust180ForwardVelocityScalar = 0x2604; // float
			constexpr auto WindGust180TargetRotation = 0x2608; // FRotator
			constexpr auto RollAngleForTrailVisibility = 0x2614; // float
			constexpr auto GroundGrindAnim = 0x2618; // UAnimMontage*
			constexpr auto FlyingGrindAnim = 0x2620; // UAnimMontage*
			constexpr auto FlakCannonCooldown = 0x2628; // float
			constexpr auto DebugChargedLaser = 0x262c; // bool
			constexpr auto WindGust180Boost = 0x2630; // float
			constexpr auto FlakCannonRecoilAnim = 0x2638; // UAnimMontage*
			constexpr auto FlakCannonAmmo = 0x2640; // UPrimalItem*
			constexpr auto CurrentCrosshairX = 0x2648; // float
			constexpr auto CurrentCrosshairY = 0x264c; // float
			constexpr auto CrosshairInterpSpeed = 0x2650; // float
			constexpr auto NormalFlightTPVOffsetMultiplierZ = 0x2654; // float
			constexpr auto _180Montage = 0x2658; // UAnimMontage*
			constexpr auto Last180Time = 0x2660; // double
			constexpr auto _180CooldownTime = 0x2668; // float
			constexpr auto RunningSpeedModNormalFlight = 0x266c; // float
			constexpr auto LastTimePressedGamepadRightStick = 0x2670; // double
			constexpr auto LastTimeStartedRightThumbstickPress = 0x2678; // double
			constexpr auto GamepadToggledSuperFlight = 0x2680; // bool
			constexpr auto ReplicatedControlRotation = 0x2684; // FRotator
			constexpr auto DebugAllowFireWeapons = 0x2690; // bool
			constexpr auto LastTimePressedJump = 0x2698; // double
			constexpr auto LastTimeReleasedJump = 0x26a0; // double
			constexpr auto IsDraftingDotProductForwardsMatching = 0x26a8; // float
			constexpr auto BlockingAnim = 0x26b0; // TArray<UAnimMontage*>
			constexpr auto StartTamingBuff = 0x26c0; // FName
			constexpr auto StartTamingBuffDurationMultAdd = 0x26c8; // float
			constexpr auto StartedRunningTime = 0x26d0; // double
			constexpr auto StoppedRunningTime = 0x26d8; // double
			constexpr auto AfterburnerOnSound = 0x26e0; // USoundBase*
			constexpr auto AfterburnerOffSound = 0x26e8; // USoundBase*
			constexpr auto ThrusterOnSound = 0x26f0; // USoundBase*
			constexpr auto ThrusterOffSound = 0x26f8; // USoundBase*
			constexpr auto ThrusterAttenuationSettings = 0x2700; // USoundAttenuation*
			constexpr auto TPVOffset180 = 0x2708; // FVector
			constexpr auto CapsuleHalfHeightForDrafting = 0x2714; // float
			constexpr auto ThrusterVFXScaleAdditive = 0x2718; // float
			constexpr auto JetFXScaleInterpSpeed = 0x271c; // float
			constexpr auto InitialThrusterVFXScaleAdditive = 0x2720; // float
			constexpr auto Tameable = 0x2724; // bool
			constexpr auto AdditiveAccelerationOnDrafting = 0x2728; // float
			constexpr auto FuelConsumeFrequencyForwardInput = 0x272c; // float
			constexpr auto SaddleDMIC = 0x2730; // UMaterialInstanceDynamic*
			constexpr auto DebugSaddle = 0x2738; // bool
			constexpr auto LaserCooldown = 0x273c; // float
			constexpr auto LastTimeTriggerLaserFire = 0x2740; // double
			constexpr auto LaserAmmo = 0x2748; // UPrimalItem*
			constexpr auto LaserFireAnim = 0x2750; // UAnimMontage*
			constexpr auto DebugLasers = 0x2758; // bool
			constexpr auto LaserRange = 0x275c; // float
			constexpr auto LaserDamage = 0x2760; // float
			constexpr auto LaserDamageType = 0x2768; // UDamageType*
			constexpr auto LaserTrailVFX = 0x2770; // UParticleSystem*
			constexpr auto LastRequestFireLasers = 0x2778; // double
			constexpr auto LaserFireSocket = 0x2780; // FName
			constexpr auto TimeStartedCharge = 0x2788; // double
			constexpr auto MaxChargeTime = 0x2790; // float
			constexpr auto ChargedLaserProjectile0 = 0x2798; // AShooterProjectile*
			constexpr auto ChargedLaserTarget = 0x27a0; // AActor*
			constexpr auto ChargedLaserChargeTime = 0x27a8; // float
			constexpr auto MinTimeForChargedLaser = 0x27ac; // float
			constexpr auto ChargedLaserBaseScale = 0x27b0; // float
			constexpr auto ChargedLaserRange = 0x27b4; // float
			constexpr auto ChargedLaserCrossHairRadius = 0x27b8; // float
			constexpr auto NumPressedFwdCount = 0x27bc; // int32_t
			constexpr auto IsLooping = 0x27c0; // bool
			constexpr auto LoopLocationCurve = 0x27c8; // UCurveVector*
			constexpr auto TimeStartLoop = 0x27d0; // double
			constexpr auto LoopRadius = 0x27d8; // float
			constexpr auto LoopSpeed = 0x27dc; // float
			constexpr auto DebugLoop = 0x27e0; // bool
			constexpr auto LoopStartLocation = 0x27e4; // FVector
			constexpr auto StartLoopRotation = 0x27f0; // FRotator
			constexpr auto IsImmelmann = 0x27fc; // bool
			constexpr auto ImmelmannLocationCurve = 0x2800; // UCurveVector*
			constexpr auto ImmelmannRotationCurve = 0x2808; // UCurveVector*
			constexpr auto ImmelmannSpeed = 0x2810; // float
			constexpr auto ImmelmannEndTime = 0x2814; // float
			constexpr auto CurrentCrosshairSpread = 0x2818; // float
			constexpr auto CrosshairSpreadInterpSpeed = 0x281c; // float
			constexpr auto CurrentChargedLaserTarget = 0x2820; // AActor*
			constexpr auto TargetHUDAnchor = 0x2828; // FAnchors
			constexpr auto LaserLevel = 0x2838; // int32_t
			constexpr auto LastTimePlayedTerrainHitVFX = 0x2840; // double
			constexpr auto DistanceThresholdForLaserUpgradeSpawn = 0x2848; // float
			constexpr auto ChanceToGetLaserUpgradeSpawn = 0x284c; // float
			constexpr auto LastTimeSpawnedLaserUpgrade = 0x2850; // double
			constexpr auto LaserUpgradeSpawnCooldown = 0x2858; // float
			constexpr auto MaxLaserLevel = 0x285c; // int32_t
			constexpr auto Damaged = 0x2860; // bool
			constexpr auto StarFoxModeSplineTag = 0x2864; // FName
			constexpr auto StarFoxModeRadius = 0x286c; // float
			constexpr auto CurrentSpline = 0x2870; // AMissionSpline*
			constexpr auto CursorPlaneCameraOffset = 0x2878; // float
			constexpr auto StarFoxExtraRotationRateMult = 0x287c; // float
			constexpr auto DebugStarFox = 0x2880; // bool
			constexpr auto FiredProjectile = 0x2888; // AShooterProjectile*
			constexpr auto CurrentChargedLaserHUDElement = 0x2890; // FHUDElement
			constexpr auto FiredFlakCannonProjectile = 0x29e0; // AShooterProjectile*
			constexpr auto SpinningOffsetStarFoxMode = 0x29e8; // float
			constexpr auto RotationRateMultSpinning = 0x29ec; // float
			constexpr auto DefaultCrosshairSpread = 0x29f0; // float
			constexpr auto MinCrosshairSpread = 0x29f4; // float
			constexpr auto MaxCrossHairSpread = 0x29f8; // float
			constexpr auto IsBraking = 0x29fc; // bool
			constexpr auto JetFXScaleBraking = 0x2a00; // float
			constexpr auto BrakingSpeedMult = 0x2a04; // float
			constexpr auto LastPressedBrake = 0x2a08; // double
			constexpr auto RotationRateMultSpinningAndBraking = 0x2a10; // float
			constexpr auto RotationRateMultBraking = 0x2a14; // float
			constexpr auto StartedBrakingEmitter = 0x2a18; // UParticleSystem*
			constexpr auto BrakingFOV = 0x2a20; // float
			constexpr auto TimeStartedBraking = 0x2a28; // double
			constexpr auto TPVOffsetStarFoxMode = 0x2a30; // FVector
			constexpr auto RotationRateStarFoxMode = 0x2a3c; // FRotator
			constexpr auto TPVOffsetLooping = 0x2a48; // FVector
			constexpr auto TPVOffsetImmelmann = 0x2a54; // FVector
			constexpr auto MaxAccelerationStarFoxMode = 0x2a60; // float
			constexpr auto BarrelRollLeftMontage = 0x2a68; // UAnimMontage*
			constexpr auto BarrelRollCooldown = 0x2a70; // float
			constexpr auto LastBarrelRollTime = 0x2a78; // double
			constexpr auto BarrelRollSpeed = 0x2a80; // float
			constexpr auto InfiniteFuel = 0x2a84; // bool
			constexpr auto LasersTargetingRadius = 0x2a88; // float
			constexpr auto LoopingHitWall = 0x2a8c; // bool
			constexpr auto StarFoxModeCameraYOffsetScalar = 0x2a90; // float
			constexpr auto PrevClipX = 0x2a94; // float
			constexpr auto StructureBaseDamage = 0x2a98; // float
			constexpr auto StarFoxModeCameraRotationInterpSpeed = 0x2a9c; // float
			constexpr auto StarFoxCameraCollisionOffsetScalar = 0x2aa0; // float
			constexpr auto StarFoxModeCameraDebugging = 0x2aa4; // bool
			constexpr auto StarFoxCameraCollisionScalarY = 0x2aa8; // float
			constexpr auto StarFoxCameraCollisionRadius = 0x2aac; // float
			constexpr auto LastTimeChangedSpline = 0x2ab0; // double
			constexpr auto PrevCamRotation = 0x2ab8; // FRotator
			constexpr auto PrevSpline = 0x2ac8; // AMissionSpline*
			constexpr auto StarFoxModeDamageCollisionProfile = 0x2ad0; // FName
			constexpr auto StarFoxModePushCollisionProfile = 0x2ad8; // FName
			constexpr auto NumStarFoxCollisions = 0x2ae0; // int32_t
			constexpr auto LastTimeDidCollisionDamage = 0x2ae8; // double
			constexpr auto StarFoxCollisionDotDamage = 0x2af0; // float
			constexpr auto StarFoxModeZInterp = 0x2af4; // float
			constexpr auto RiderSetTime = 0x2af8; // double
			constexpr auto RiderWarmupTime = 0x2b00; // float
			constexpr auto DamageOnTerrainCollision = 0x2b04; // float
			constexpr auto DriftMovementInput = 0x2b08; // FVector
			constexpr auto DriftSpeedBase = 0x2b14; // float
			constexpr auto DriftingInterpSpeed = 0x2b18; // float
			constexpr auto DriftAngleBase = 0x2b1c; // float
			constexpr auto RotationRateMultSuperFlight = 0x2b20; // float
			constexpr auto SpinningOffset = 0x2b24; // float
			constexpr auto DriftingMeshYawCurrent = 0x2b28; // float
			constexpr auto DriftingMeshInterpSpeed = 0x2b2c; // float
			constexpr auto DebugDrifting = 0x2b30; // bool
			constexpr auto DriftJetMaxScale = 0x2b34; // float
			constexpr auto DriftJetMinScale = 0x2b38; // float
			constexpr auto DriftBoostBaseSpeed = 0x2b3c; // float
			constexpr auto DriftStartTime = 0x2b40; // double
			constexpr auto DriftBoostMaxSpeed = 0x2b48; // float
			constexpr auto DriftEndTime = 0x2b50; // double
			constexpr auto MostRecentDriftSpeed = 0x2b58; // float
			constexpr auto DriftingAllowedBoost = 0x2b5c; // bool
			constexpr auto LastLaserLevelChangedTime = 0x2b60; // double
			constexpr auto LaserLevelDowngradeTime = 0x2b68; // float
			constexpr auto NewEventDispatcher = 0x2b70; // FScriptMulticastDelegate
			constexpr auto SplineClass = 0x2b80; // AActor*
			constexpr auto AddSuperBoostFOV = 0x2b88; // float
			constexpr auto BarrelRollRightMontage = 0x2b90; // UAnimMontage*
			constexpr auto LastFrameMoveRightWasRight = 0x2b98; // bool
			constexpr auto CurrentDesiredRotation = 0x2b9c; // FRotator
			constexpr auto MaxRotationRateDrifting = 0x2ba8; // float
			constexpr auto DriftingRotationRateMultCurve = 0x2bb0; // UCurveVector*
			constexpr auto AverageDriftingRotationDelta = 0x2bb8; // float
			constexpr auto DriftingTailWiggleCurve = 0x2bc0; // UCurveVector*
			constexpr auto TailWiggleAmount = 0x2bc8; // float
			constexpr auto TailWhipSpeed = 0x2bcc; // float
			constexpr auto RotatingMotionRotationRateCurrent = 0x2bd0; // FRotator
			constexpr auto MaxExtraRotationRate = 0x2bdc; // float
			constexpr auto CurrentStarFoxCameraLoc = 0x2be0; // FVector
			constexpr auto PrevBarrelRollVelocity = 0x2bec; // FVector
			constexpr auto AllowBrakingInStarFoxMode = 0x2bf8; // bool
			constexpr auto AllowLoopInStarFoxMode = 0x2bf9; // bool
			constexpr auto StarFoxModeCameraDirection = 0x2bfc; // FVector
			constexpr auto StarFoxModeBarrelRollForwardSpeedMult = 0x2c08; // float
			constexpr auto StarFoxModeChargedLaserRange = 0x2c0c; // float
			constexpr auto PrevMissionSpline = 0x2c10; // AMissionSpline*
			constexpr auto DisableStarFoxModeAfterLosingSplineTheFirstTime = 0x2c18; // bool
			constexpr auto StarFoxModeDisabled = 0x2c19; // bool
			constexpr auto MinFoV = 0x2c1c; // float
			constexpr auto MaxFoV = 0x2c20; // float
			constexpr auto LastFrameWasStarFoxCamera = 0x2c24; // bool
			constexpr auto LastKnownUnCollidedLocStarFox = 0x2c28; // FVector
			constexpr auto StarFoxCollisionImpulseDirectionOffset = 0x2c34; // float
			constexpr auto StarFoxCollisionImpulseStrength = 0x2c38; // float
			constexpr auto StarFoxPushCollisionImpulseStrength = 0x2c3c; // float
			constexpr auto LastTimeDidStarFoxCollisionImpulse = 0x2c40; // double
			constexpr auto DebugStarFoxCollision = 0x2c48; // bool
			constexpr auto StarFoxCollisionImpulseCooldown = 0x2c4c; // float
			constexpr auto DebugBarrelRoll = 0x2c50; // bool
			constexpr auto LaserHitRadius = 0x2c54; // float
			constexpr auto CrosshairAimStart = 0x2c58; // FVector
			constexpr auto CrosshairAimEnd = 0x2c64; // FVector
			constexpr auto GroundFXOffset = 0x2c70; // float
			constexpr auto LastTimeTickedGroundFx = 0x2c78; // double
			constexpr auto DebugGroundFX = 0x2c80; // bool
			constexpr auto WaterSurfaceTooHighThreshold = 0x2c84; // float
			constexpr auto GroundFXScaleCurve = 0x2c88; // UCurveVector*
			constexpr auto LastTimeSplashVFXPlayed = 0x2c90; // double
			constexpr auto SplashVFXScale = 0x2c98; // float
			constexpr auto SpashVFXDistanceThreshold = 0x2c9c; // float
			constexpr auto EchoLocationRadius = 0x2ca0; // float
			constexpr auto EchoLocationEmitter = 0x2ca8; // AActor*
			constexpr auto LastTimeEchoLocation = 0x2cb0; // double
			constexpr auto EchoLocationCooldown = 0x2cb8; // float
			constexpr auto ChaffDetectRadiusBase = 0x2cbc; // float
			constexpr auto NumChaffsToSpawn = 0x2cc0; // int32_t
			constexpr auto ChaffAnim = 0x2cc8; // UAnimMontage*
			constexpr auto ChaffExplosionScale = 0x2cd0; // float
			constexpr auto LastTimeChaff = 0x2cd8; // double
			constexpr auto ChaffCooldown = 0x2ce0; // float
			constexpr auto WaveMovementScale = 0x2ce4; // float
			constexpr auto WaveMovementSpeed = 0x2ce8; // float
			constexpr auto NudgeImpulseWalking = 0x2cec; // float
			constexpr auto NudgeImpulseFalling = 0x2cf0; // float
			constexpr auto WildPetMultiUseEntry = 0x2cf8; // FMultiUseEntry
			constexpr auto ForceFlee = 0x2d40; // bool
			constexpr auto FleeFromPettingTime = 0x2d44; // float
			constexpr auto TimeToWildAnger = 0x2d48; // float
			constexpr auto AngerMontage = 0x2d50; // UAnimMontage*
			constexpr auto BlowHoleEmitterScale = 0x2d58; // FVector
			constexpr auto AngerRadius = 0x2d64; // float
			constexpr auto AngryDolphinTarget = 0x2d68; // AShooterCharacter*
			constexpr auto AngryDolphinBlowHoleTriggered = 0x2d70; // bool
			constexpr auto TimeToDropAngryDinoAggro = 0x2d74; // float
			constexpr auto DistanceToAngryBlowHole = 0x2d78; // float
			constexpr auto MaxWildsToAnger = 0x2d7c; // int32_t
			constexpr auto NumPetsWanted = 0x2d80; // int32_t
			constexpr auto NumFoodWanted = 0x2d84; // int32_t
			constexpr auto WildDemandLevel = 0x2d88; // int32_t
			constexpr auto MaxWildDemandLevel = 0x2d8c; // int32_t
			constexpr auto WildDemandsCurve = 0x2d90; // UCurveVector*
			constexpr auto WildFoodMultiUseEntry = 0x2d98; // FMultiUseEntry
			constexpr auto LastTimeMetDemands = 0x2de0; // double
			constexpr auto WildFoodItem = 0x2de8; // UObject*
			constexpr auto LoopInterpSpeed = 0x2df0; // float
			constexpr auto ChanceToSpawnSpaceWhale = 0x2df4; // float
			constexpr auto SpaceWhaleSpawnOffset = 0x2df8; // float
			constexpr auto SpaceWhaleIntroActorInstance = 0x2e00; // AActor*
			constexpr auto AngerTime = 0x2e08; // float
			constexpr auto WildAngry = 0x2e0c; // bool
			constexpr auto WildSatisfiedAnim = 0x2e10; // UAnimMontage*
			constexpr auto MaxDinoLevel = 0x2e18; // float
			constexpr auto UntamedRunningSpeedModifierHasDemands = 0x2e1c; // float
			constexpr auto DebugSpaceWhale = 0x2e20; // bool
			constexpr auto LastTimeLoweredDino = 0x2e28; // double
			constexpr auto LastTimeRaisedDino = 0x2e30; // double
			constexpr auto IsLoopingWithIncreasedRotationRate = 0x2e38; // bool
			constexpr auto AffinityGainedOnElementFed = 0x2e3c; // float
			constexpr auto TameIneffectivenessOnDamaged = 0x2e40; // float
			constexpr auto ChargedLaserProjectile1 = 0x2e48; // AShooterProjectile*
			constexpr auto ChargedLaserProjectile2 = 0x2e50; // AShooterProjectile*
			constexpr auto LaserLevelDowngradeTimeMax = 0x2e58; // float
			constexpr auto TamedWalkingSpeedModifierLaserLevel0 = 0x2e5c; // float
			constexpr auto TamedWalkingSpeedModifierLaserLevel2 = 0x2e60; // float
			constexpr auto LaserSockets = 0x2e68; // TArray<FName>
			constexpr auto BarrelRollDamageRadius = 0x2e78; // float
			constexpr auto BarrelRollDamageBase = 0x2e7c; // float
			constexpr auto ChargedLaserRightSide = 0x2e80; // bool
			constexpr auto NewEventDispatcher0 = 0x2e88; // FScriptMulticastDelegate
			constexpr auto CurrentSuperFlightTransitionMaterialParam = 0x2e98; // float
			constexpr auto FPVFoV = 0x2e9c; // float
			constexpr auto BarrelRollStaminaCost = 0x2ea0; // float
			constexpr auto LastTimeChargedLaserHit = 0x2ea8; // double
			constexpr auto ChargedLaserProgress = 0x2eb0; // float
			constexpr auto CurrentPowerMatParam = 0x2eb4; // float
			constexpr auto DefaultCrosshairColor = 0x2eb8; // FLinearColor
			constexpr auto CurrentLockOnMatParam = 0x2ec8; // float
			constexpr auto CurrentEchoLocationMatParam = 0x2ecc; // float
			constexpr auto EchoLocationAnim = 0x2ed0; // UAnimMontage*
			constexpr auto PercentOfScreenToClampFPVCrosshair = 0x2ed8; // float
			constexpr auto FPVCrosshairClampRadius = 0x2edc; // float
			constexpr auto CurrentHasTargetMatParam = 0x2ee0; // float
			constexpr auto CurrentClipX = 0x2ee4; // float
			constexpr auto CurrentClipY = 0x2ee8; // float
			constexpr auto CurrentMouseX = 0x2eec; // float
			constexpr auto CurrentMouseY = 0x2ef0; // float
			constexpr auto DebugDrawMouseCursor = 0x2ef4; // bool
			constexpr auto CurrentLocalFPVCamLoc = 0x2ef8; // FVector
			constexpr auto FPVLocalCamInterpSpeedX = 0x2f04; // float
			constexpr auto FPVLocalCamInterpSpeedY = 0x2f08; // float
			constexpr auto CurrentAimOffsetFromCenter = 0x2f0c; // FLinearColor
			constexpr auto AllowFlakCannonBackwardsFiring = 0x2f1c; // bool
			constexpr auto GamepadMouseCursorInterpSpeed = 0x2f20; // float
			constexpr auto PreOrbitCamDesiredRotation = 0x2f24; // FRotator
			constexpr auto LastFrameWasOrbitCam = 0x2f30; // bool
			constexpr auto BrakingInStarFoxModeEnablesOrbitCam = 0x2f31; // bool
			constexpr auto ResetStarFoxModeCamRotationAfterOrbitCam = 0x2f32; // bool
			constexpr auto ImpactTerrainCameraShakeScale = 0x2f34; // float
			constexpr auto ImpactTerrainCamerShakeSpeed = 0x2f38; // float
			constexpr auto RunningCameraShakeScale = 0x2f3c; // float
			constexpr auto RunningCameraShakeSpeed = 0x2f40; // float
			constexpr auto WindGustCamerShakeScale = 0x2f44; // float
			constexpr auto WindGustCameraShakeSpeed = 0x2f48; // float
			constexpr auto DriftingBoostCameraShakeScale = 0x2f4c; // float
			constexpr auto DriftingBoostCamerShakeSpeed = 0x2f50; // float
			constexpr auto StarFoxCollisionPushNeeded = 0x2f54; // bool
			constexpr auto HideHUDinFPV = 0x2f55; // bool
			constexpr auto FuelPercent = 0x2f58; // float
			constexpr auto SaddleActivationRichTextOverlay = 0x2f60; // FHUDRichTextOverlayData
			constexpr auto SaddleActivationTextDisplayTime = 0x2fc0; // float
			constexpr auto RiderHUD = 0x2fc8; // AShooterHUD*
			constexpr auto HasSaddleActivationRichTextOverlay = 0x2fd0; // bool
			constexpr auto ReadyToDisplaySaddleActivationText = 0x2fd1; // bool
			constexpr auto LastSaddleActivationAddedTime = 0x2fd8; // double
			constexpr auto bChachedIsSubmerged = 0x2fe0; // bool
			constexpr auto ImmelmanEndTime = 0x2fe8; // double
			constexpr auto PostImmelmanCameraControlTime = 0x2ff0; // float
			constexpr auto PostImmelmanCameraRotInterpSpeed = 0x2ff4; // float
			constexpr auto ImmelmanCameraLocation = 0x2ff8; // FVector
			constexpr auto ImmelmannCameraLocationCurve = 0x3008; // UCurveVector*
			constexpr auto ImmelmanCameraStartLocation = 0x3010; // FVector
			constexpr auto ReactivateJetFXOneFrame = 0x301c; // bool
			constexpr auto TamingTarget = 0x3020; // AShooterCharacter*
			constexpr auto SparksCooldown = 0x3028; // float
			constexpr auto LastTimeTriggeredSparksVFX = 0x3030; // double
			constexpr auto HUDChargedLaserTargetPosition = 0x3038; // FVector
			constexpr auto HUDChargedLaserTargetPositionInterp = 0x3044; // float
			constexpr auto LocalDesiredRotation = 0x3048; // FRotator
			constexpr auto FPVMeshOffset = 0x3054; // FVector
			constexpr auto FPVMeshRotOffset = 0x3060; // FRotator
			constexpr auto LaserMuzzleVFX = 0x3070; // UParticleSystem*
			constexpr auto FPVSaddleMeshOffset = 0x3078; // FVector
			constexpr auto FPVSaddleRotOffset = 0x3084; // FRotator
			constexpr auto GamepadLeftTriggerPressed = 0x3090; // bool
			constexpr auto PrevCamRot = 0x3094; // FRotator
			constexpr auto FPVMeshRotInterpSpeed = 0x30a0; // float
			constexpr auto MaxFPVMeshRotDelta = 0x30a4; // float
			constexpr auto FPVMeshInterpOffset = 0x30a8; // FVector
			constexpr auto FPVShakeScalar = 0x30b4; // float
			constexpr auto ThrusterOnSoundComp = 0x30b8; // UAudioComponent*
			constexpr auto AfterburnerOnSoundComp = 0x30c0; // UAudioComponent*
			constexpr auto SpinningPitch = 0x30c8; // float
			constexpr auto TimeUntilAffinityDrain = 0x30cc; // float
			constexpr auto LastTimeDrainedCurrentAffinity = 0x30d0; // double
			constexpr auto PercentOfRequiredTameAffinityToTrainAffinity = 0x30d8; // float
			constexpr auto TameIneffectivenessOnMetDemands = 0x30dc; // float
			constexpr auto LastBarrelRollEndTime = 0x30e0; // double
			constexpr auto LastLoopEndTime = 0x30e8; // double
			constexpr auto ChargedLaserCooldownBarrelRoll = 0x30f0; // float
			constexpr auto ChargedLaserCooldownImmelmann = 0x30f4; // float
			constexpr auto ChargedLaserCooldownLoop = 0x30f8; // float
			constexpr auto bIsInStarFoxMode = 0x30fc; // bool
			constexpr auto bJustEnteredStarFoxMode = 0x30fd; // bool
			constexpr auto StarFoxGamePadX = 0x3100; // float
			constexpr auto StarFoxGamePadY = 0x3104; // float
			constexpr auto StarFoxGamePadClipX = 0x3108; // float
			constexpr auto StarFoxGamePadClipY = 0x310c; // float
			constexpr auto SaddleMatIndex = 0x3110; // int32_t
			constexpr auto IsLockOnMePrevented = 0x3114; // bool
			constexpr auto LargeCircleInterpSpeedX = 0x3118; // float
			constexpr auto LargeCircleInterpSpeedY = 0x311c; // float
			constexpr auto LargeCircleScale = 0x3120; // float
			constexpr auto HasTargetInterpSpeed = 0x3124; // float
			constexpr auto DebugForceMouseCursorOn = 0x3128; // bool
			constexpr auto SilenceImmunityTag = 0x312c; // FName
			constexpr auto LockOnInterpSpeed = 0x3134; // float
			constexpr auto FiredChargedLaserAtTarget = 0x3138; // bool
			constexpr auto LaserTraceChannel = 0x3139; // ECollisionChannel
			constexpr auto ClientCustomTimeDilation = 0x313c; // float
			constexpr auto NewVar = 0x3140; // float
			constexpr auto CustomTimeDilationThreshold = 0x3144; // float
			constexpr auto LastResetVelocityErrorHitsTime = 0x3148; // double
			constexpr auto ResetVelocityErrorHitsInterval = 0x3150; // float
			constexpr auto LastLocation = 0x3154; // FVector
			constexpr auto VelocityErrorHits = 0x3160; // int32_t
			constexpr auto MaxVelocityErrorHits = 0x3164; // int32_t
			constexpr auto VelocityErrorToleranceSquared = 0x3168; // float
			constexpr auto ConsoleGamepadMouseCursorInterpSpeed = 0x316c; // float
			constexpr auto ChargedLaserCooldown = 0x3170; // float
			constexpr auto LockOnReleaseInterpSpeed = 0x3174; // float
			constexpr auto LastTimeTriggeredChargedLaser = 0x3178; // double
			constexpr auto CallFunc_GetController_ReturnValue = 0x3180; // AController*
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController = 0x3188; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast_CastSuccess = 0x3190; // bool
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue = 0x3191; // bool
			constexpr auto CallFunc_EqualEqual_BoolBool_ReturnValue = 0x3192; // bool
			constexpr auto CallFunc_EqualEqual_BoolBool_ReturnValue2 = 0x3193; // bool
			constexpr auto CallFunc_EqualEqual_BoolBool_ReturnValue3 = 0x3194; // bool
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue = 0x3198; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue = 0x31a4; // FVector
			constexpr auto K2Node_CustomEvent_DeltaSeconds2 = 0x31b0; // float
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue = 0x31b4; // FVector
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue = 0x31c0; // FVector
			constexpr auto CallFunc_GetMovementComponent_ReturnValue = 0x31d0; // UPawnMovementComponent*
			constexpr auto CallFunc_VSize_ReturnValue = 0x31d8; // float
			constexpr auto CallFunc_GetGameTimeInSeconds_ReturnValue = 0x31e0; // double
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue = 0x31e8; // FRotator
			constexpr auto CallFunc_NegateVector_ReturnValue = 0x31f4; // FVector
			constexpr auto CallFunc_GetController_ReturnValue2 = 0x3200; // AController*
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue = 0x3208; // FRotator
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue2 = 0x3214; // FRotator
			constexpr auto CallFunc_BreakRot_Pitch = 0x3220; // float
			constexpr auto CallFunc_BreakRot_Yaw = 0x3224; // float
			constexpr auto CallFunc_BreakRot_Roll = 0x3228; // float
			constexpr auto CallFunc_NegateVector_ReturnValue2 = 0x322c; // FVector
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue3 = 0x3238; // FRotator
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue2 = 0x3244; // FRotator
			constexpr auto CallFunc_BreakRot_Pitch2 = 0x3250; // float
			constexpr auto CallFunc_BreakRot_Yaw2 = 0x3254; // float
			constexpr auto CallFunc_BreakRot_Roll2 = 0x3258; // float
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue3 = 0x325c; // FRotator
			constexpr auto CallFunc_Subtract_FloatFloat_ReturnValue = 0x3268; // float
			constexpr auto CallFunc_SetActorRotation_ReturnValue = 0x326c; // bool
			constexpr auto CallFunc_Abs_ReturnValue = 0x3270; // float
			constexpr auto CallFunc_Greater_FloatFloat_ReturnValue = 0x3274; // bool
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue = 0x3275; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue = 0x3276; // bool
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue4 = 0x3278; // FRotator
			constexpr auto CallFunc_BreakRot_Pitch3 = 0x3284; // float
			constexpr auto CallFunc_BreakRot_Yaw3 = 0x3288; // float
			constexpr auto CallFunc_BreakRot_Roll3 = 0x328c; // float
			constexpr auto CallFunc_NegateVector_ReturnValue3 = 0x3290; // FVector
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue4 = 0x329c; // FRotator
			constexpr auto CallFunc_BreakRot_Pitch4 = 0x32a8; // float
			constexpr auto CallFunc_BreakRot_Yaw4 = 0x32ac; // float
			constexpr auto CallFunc_BreakRot_Roll4 = 0x32b0; // float
			constexpr auto CallFunc_Subtract_FloatFloat_ReturnValue2 = 0x32b4; // float
			constexpr auto CallFunc_Abs_ReturnValue2 = 0x32b8; // float
			constexpr auto CallFunc_NegateVector_ReturnValue4 = 0x32bc; // FVector
			constexpr auto CallFunc_Greater_FloatFloat_ReturnValue2 = 0x32c8; // bool
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue5 = 0x32cc; // FRotator
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue2 = 0x32d8; // bool
			constexpr auto CallFunc_BreakRot_Pitch5 = 0x32dc; // float
			constexpr auto CallFunc_BreakRot_Yaw5 = 0x32e0; // float
			constexpr auto CallFunc_BreakRot_Roll5 = 0x32e4; // float
			constexpr auto CallFunc_BooleanOR_ReturnValue2 = 0x32e8; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue = 0x32e9; // bool
			constexpr auto CallFunc_Dot_VectorVector_ReturnValue = 0x32ec; // float
			constexpr auto CallFunc_DegAcos_ReturnValue = 0x32f0; // float
			constexpr auto CallFunc_GetController_ReturnValue3 = 0x32f8; // AController*
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController2 = 0x3300; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast2_CastSuccess = 0x3308; // bool
			constexpr auto CallFunc_GetController_ReturnValue4 = 0x3310; // AController*
			constexpr auto CallFunc_IsValid_ReturnValue = 0x3318; // bool
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController3 = 0x3320; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast3_CastSuccess = 0x3328; // bool
			constexpr auto CallFunc_IsValid_ReturnValue2 = 0x3329; // bool
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue5 = 0x332c; // FRotator
			constexpr auto CallFunc_GetController_ReturnValue5 = 0x3338; // AController*
			constexpr auto CallFunc_Conv_RotatorToVector_ReturnValue = 0x3340; // FVector
			constexpr auto CallFunc_Dot_VectorVector_ReturnValue2 = 0x334c; // float
			constexpr auto CallFunc_MakeRotFromX_ReturnValue = 0x3350; // FRotator
			constexpr auto CallFunc_Greater_FloatFloat_ReturnValue3 = 0x335c; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue = 0x3360; // float
			constexpr auto CallFunc_NotEqual_ObjectObject_ReturnValue = 0x3364; // bool
			constexpr auto Temp_int_Loop_Counter_Variable = 0x3368; // int32_t
			constexpr auto CallFunc_Add_IntInt_ReturnValue = 0x336c; // int32_t
			constexpr auto CallFunc_GetPlayerController_ReturnValue = 0x3370; // APlayerController*
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue6 = 0x3378; // FRotator
			constexpr auto CallFunc_ComposeRotators_ReturnValue = 0x3384; // FRotator
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue2 = 0x3390; // float
			constexpr auto CallFunc_K2_GetRootComponent_ReturnValue = 0x3398; // USceneComponent*
			constexpr auto K2Node_CustomEvent_DeltaTime = 0x33a0; // float
			constexpr auto CallFunc_Not_PreBool_ReturnValue = 0x33a4; // bool
			constexpr auto CallFunc_NegateVector_ReturnValue5 = 0x33a8; // FVector
			constexpr auto CallFunc_Dot_VectorVector_ReturnValue3 = 0x33b4; // float
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue6 = 0x33b8; // FRotator
			constexpr auto CallFunc_DegAcos_ReturnValue2 = 0x33c4; // float
			constexpr auto CallFunc_BreakRot_Pitch6 = 0x33c8; // float
			constexpr auto CallFunc_BreakRot_Yaw6 = 0x33cc; // float
			constexpr auto CallFunc_BreakRot_Roll6 = 0x33d0; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue = 0x33d4; // float
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue2 = 0x33d8; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue3 = 0x33e4; // bool
			constexpr auto CallFunc_Add_VectorVector_ReturnValue2 = 0x33e8; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue3 = 0x33f4; // FVector
			constexpr auto CallFunc_IsFirstPerson_ReturnValue = 0x3400; // bool
			constexpr auto CallFunc_K2_SetActorLocation_ReturnValue = 0x3401; // bool
			constexpr auto CallFunc_Greater_FloatFloat_ReturnValue4 = 0x3402; // bool
			constexpr auto CallFunc_IsValid_ReturnValue4 = 0x3403; // bool
			constexpr auto Temp_bool_True_if_break_was_hit_Variable = 0x3404; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue2 = 0x3405; // bool
			constexpr auto CallFunc_IsValid_ReturnValue5 = 0x3406; // bool
			constexpr auto CallFunc_IsValid_ReturnValue6 = 0x3407; // bool
			constexpr auto K2Node_CustomEvent_Yaw = 0x3408; // float
			constexpr auto K2Node_CustomEvent_Pitch = 0x340c; // float
			constexpr auto K2Node_CustomEvent_Roll = 0x3410; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue2 = 0x3414; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue3 = 0x3418; // float
			constexpr auto CallFunc_HasAuthority_ReturnValue = 0x341c; // bool
			constexpr auto Temp_int_Loop_Counter_Variable2 = 0x3420; // int32_t
			constexpr auto CallFunc_Add_IntInt_ReturnValue2 = 0x3424; // int32_t
			constexpr auto CallFunc_GetPassengers_ReturnValue = 0x3428; // TArray<APrimalCharacter*>
			constexpr auto CallFunc_Array_Length_ReturnValue = 0x3438; // int32_t
			constexpr auto K2Node_CustomEvent_DeltaSeconds = 0x343c; // float
			constexpr auto K2Node_Event_CustomEventName = 0x3440; // FName
			constexpr auto K2Node_Event_MeshComp = 0x3448; // USkeletalMeshComponent*
			constexpr auto K2Node_Event_Animation = 0x3450; // UAnimSequenceBase*
			constexpr auto K2Node_Event_AnimNotifyObject = 0x3458; // UAnimNotify*
			constexpr auto CallFunc_RInterpTo_ReturnValue = 0x3460; // FRotator
			constexpr auto CallFunc_EqualEqual_NameName_ReturnValue = 0x346c; // bool
			constexpr auto CallFunc_SetActorRotation_ReturnValue2 = 0x346d; // bool
			constexpr auto CallFunc_EqualEqual_NameName_ReturnValue2 = 0x346e; // bool
			constexpr auto CallFunc_EqualEqual_NameName_ReturnValue3 = 0x346f; // bool
			constexpr auto K2Node_CustomEvent_LatchingInterrupted = 0x3470; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue3 = 0x3471; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue3 = 0x3474; // float
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue4 = 0x3478; // float
			constexpr auto CallFunc_MakeVector_ReturnValue = 0x347c; // FVector
			constexpr auto CallFunc_MakeVector_ReturnValue2 = 0x3488; // FVector
			constexpr auto CallFunc_Not_PreBool_ReturnValue3 = 0x3494; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue4 = 0x3495; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue2 = 0x3496; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue5 = 0x3497; // bool
			constexpr auto CallFunc_GetVelocity_ReturnValue = 0x3498; // FVector
			constexpr auto CallFunc_Normal_ReturnValue = 0x34a4; // FVector
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue7 = 0x34b0; // FRotator
			constexpr auto CallFunc_GetForwardVector_ReturnValue = 0x34bc; // FVector
			constexpr auto K2Node_CustomEvent_AxisValue2 = 0x34c8; // float
			constexpr auto CallFunc_Dot_VectorVector_ReturnValue4 = 0x34cc; // float
			constexpr auto CallFunc_GreaterEqual_FloatFloat_ReturnValue = 0x34d0; // bool
			constexpr auto CallFunc_EqualEqual_FloatFloat_ReturnValue = 0x34d1; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue = 0x34d8; // double
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue2 = 0x34e0; // bool
			constexpr auto CallFunc_Is_Quick_Turning_ReturnValue = 0x34e1; // bool
			constexpr auto K2Node_CustomEvent_Epicenter = 0x34e4; // FVector
			constexpr auto CallFunc_SwitchNetworkMode_OutNetworkMode = 0x34f0; // ENetModeBP
			constexpr auto K2Node_SwitchEnum_CmpSuccess = 0x34f1; // bool
			constexpr auto CallFunc_SwitchNetworkMode_OutNetworkMode2 = 0x34f2; // ENetModeBP
			constexpr auto CallFunc_GetWindGustEpicenter_ReturnValue = 0x34f4; // FVector
			constexpr auto K2Node_SwitchEnum2_CmpSuccess = 0x3500; // bool
			constexpr auto K2Node_CustomEvent_Dir2 = 0x3504; // FVector
			constexpr auto K2Node_CustomEvent_Loc2 = 0x3510; // FVector
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue8 = 0x351c; // FRotator
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue = 0x3528; // UParticleSystemComponent*
			constexpr auto CallFunc_HasSaddle_Ret = 0x3530; // bool
			constexpr auto CallFunc_HasSaddle_RetIsSuperSaddle = 0x3531; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue6 = 0x3532; // bool
			constexpr auto CallFunc_HasFuel_ReturnValue = 0x3533; // bool
			constexpr auto CallFunc_HasFuel_Quantity = 0x3534; // int32_t
			constexpr auto CallFunc_BooleanAND_ReturnValue3 = 0x3538; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue4 = 0x3539; // bool
			constexpr auto K2Node_InputAxisEvent_AxisValue = 0x353c; // float
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue3 = 0x3540; // bool
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue = 0x3544; // float
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue2 = 0x3548; // double
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue3 = 0x3550; // bool
			constexpr auto CallFunc_K2_IsTimerActive_ReturnValue = 0x3551; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue3 = 0x3558; // double
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue4 = 0x3560; // bool
			constexpr auto K2Node_CustomEvent_Target2 = 0x3568; // APrimalCharacter*
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue = 0x3570; // FVector
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue2 = 0x357c; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue3 = 0x3588; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue4 = 0x3594; // FVector
			constexpr auto Temp_bool_True_if_break_was_hit_Variable2 = 0x35a0; // bool
			constexpr auto CallFunc_SpawnEmitterAttached_ReturnValue = 0x35a8; // UParticleSystemComponent*
			constexpr auto CallFunc_Not_PreBool_ReturnValue7 = 0x35b0; // bool
			constexpr auto K2Node_CustomEvent_backwardsLatching = 0x35b1; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue = 0x35b8; // UWorld*
			constexpr auto CallFunc_TimeSince_Network_ReturnValue = 0x35c0; // float
			constexpr auto CallFunc_GetWorldDeltaSeconds_ReturnValue = 0x35c4; // float
			constexpr auto CallFunc_GetFloatValue_ReturnValue = 0x35c8; // float
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue2 = 0x35cc; // float
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue3 = 0x35d0; // FVector
			constexpr auto CallFunc_IsServer_ReturnValue = 0x35dc; // bool
			constexpr auto CallFunc_GetActorUpVector_ReturnValue = 0x35e0; // FVector
			constexpr auto CallFunc_SelectColor_ReturnValue = 0x35ec; // FLinearColor
			constexpr auto CallFunc_K2_GetWorld_ReturnValue2 = 0x3600; // UWorld*
			constexpr auto CallFunc_TimeSince_Network_ReturnValue2 = 0x3608; // float
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue2 = 0x360c; // FVector
			constexpr auto CallFunc_GetFloatValue_ReturnValue2 = 0x3618; // float
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue3 = 0x361c; // float
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue4 = 0x3620; // float
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue4 = 0x3624; // FVector
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue5 = 0x3630; // float
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue9 = 0x3634; // FRotator
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue5 = 0x3640; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue5 = 0x364c; // FVector
			constexpr auto CallFunc_GetWorldDeltaSeconds_ReturnValue2 = 0x3658; // float
			constexpr auto CallFunc_Add_VectorVector_ReturnValue6 = 0x365c; // FVector
			constexpr auto CallFunc_QInterpTo_ReturnValue = 0x3668; // FRotator
			constexpr auto CallFunc_SetActorRotation_ReturnValue3 = 0x3674; // bool
			constexpr auto CallFunc_GetPrimalCharMovementMode_ReturnValue = 0x3675; // EMovementMode
			constexpr auto CallFunc_SetActorRotation_ReturnValue4 = 0x3676; // bool
			constexpr auto K2Node_SwitchEnum3_CmpSuccess = 0x3677; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue4 = 0x3678; // FVector
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue3 = 0x3684; // FVector
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue2 = 0x3690; // FVector
			constexpr auto CallFunc_Dot_VectorVector_ReturnValue5 = 0x369c; // float
			constexpr auto CallFunc_VSize_ReturnValue2 = 0x36a0; // float
			constexpr auto CallFunc_Greater_FloatFloat_ReturnValue5 = 0x36a4; // bool
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue4 = 0x36a5; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue3 = 0x36a8; // UWorld*
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue5 = 0x36b0; // FVector
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue4 = 0x36c0; // double
			constexpr auto CallFunc_BPFastTrace_ReturnValue = 0x36c8; // bool
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue5 = 0x36c9; // bool
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue4 = 0x36cc; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue6 = 0x36d8; // FVector
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue5 = 0x36e8; // double
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue7 = 0x36f0; // FRotator
			constexpr auto CallFunc_Conv_RotatorToVector_ReturnValue2 = 0x36fc; // FVector
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue = 0x3708; // bool
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue7 = 0x370c; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue7 = 0x3718; // FVector
			constexpr auto CallFunc_GetController_ReturnValue6 = 0x3728; // AController*
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController4 = 0x3730; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast4_CastSuccess = 0x3738; // bool
			constexpr auto CallFunc_HasAmmo_ReturnValue = 0x3739; // bool
			constexpr auto CallFunc_HasAmmo_Quantity = 0x373c; // int32_t
			constexpr auto Temp_int_Loop_Counter_Variable3 = 0x3740; // int32_t
			constexpr auto CallFunc_Less_IntInt_ReturnValue = 0x3744; // bool
			constexpr auto CallFunc_Array_Get_Item = 0x3748; // APrimalCharacter*
			constexpr auto K2Node_DynamicCast_AsShooterCharacter = 0x3750; // AShooterCharacter*
			constexpr auto K2Node_DynamicCast5_CastSuccess = 0x3758; // bool
			constexpr auto CallFunc_Add_IntInt_ReturnValue3 = 0x375c; // int32_t
			constexpr auto CallFunc_EqualEqual_NameName_ReturnValue4 = 0x3760; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue4 = 0x3768; // UWorld*
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue6 = 0x3770; // double
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue6 = 0x3778; // bool
			constexpr auto CallFunc_PlayAnimEx_ReturnValue = 0x377c; // float
			constexpr auto CallFunc_IsTimeSince_Network_ReturnValue = 0x3780; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue7 = 0x3788; // double
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue8 = 0x3790; // double
			constexpr auto CallFunc_K2_GetWorld_ReturnValue5 = 0x3798; // UWorld*
			constexpr auto CallFunc_IsTimeSince_Network_ReturnValue2 = 0x37a0; // bool
			constexpr auto CallFunc_IsUsingSuperFlight_Ret = 0x37a1; // bool
			constexpr auto CallFunc_IsUsingSuperFlight_StartedEndingTime = 0x37a8; // double
			constexpr auto CallFunc_GetReplicatedControlRotation_ReturnValue = 0x37b0; // FRotator
			constexpr auto CallFunc_RInterpTo_ReturnValue2 = 0x37bc; // FRotator
			constexpr auto CallFunc_GetReplicatedControlRotation_ReturnValue2 = 0x37c8; // FRotator
			constexpr auto CallFunc_RInterpTo_ReturnValue3 = 0x37d4; // FRotator
			constexpr auto CallFunc_BooleanOR_ReturnValue4 = 0x37e0; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue9 = 0x37e8; // double
			constexpr auto CallFunc_GetBuffWithCustomTag_ReturnValue = 0x37f0; // APrimalBuff*
			constexpr auto CallFunc_IsValid_ReturnValue7 = 0x37f8; // bool
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue6 = 0x37fc; // float
			constexpr auto CallFunc_ExtendBuffTime_ReturnValue = 0x3800; // bool
			constexpr auto CallFunc_IsPlayingBlockingAnim_ReturnVal = 0x3801; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue10 = 0x3808; // double
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue7 = 0x3810; // bool
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue8 = 0x3811; // bool
			constexpr auto CallFunc_PlaySoundAttached_ReturnValue = 0x3818; // UAudioComponent*
			constexpr auto CallFunc_PlaySoundAttached_ReturnValue2 = 0x3820; // UAudioComponent*
			constexpr auto CallFunc_PlaySoundAttached_ReturnValue3 = 0x3828; // UAudioComponent*
			constexpr auto CallFunc_PlaySoundAttached_ReturnValue4 = 0x3830; // UAudioComponent*
			constexpr auto CallFunc_SwitchNetworkMode_OutNetworkMode3 = 0x3838; // ENetModeBP
			constexpr auto K2Node_SwitchEnum4_CmpSuccess = 0x3839; // bool
			constexpr auto K2Node_CustomEvent_CameraHitLoc = 0x383c; // FVector
			constexpr auto K2Node_CustomEvent_CustomTimeDilation2 = 0x3848; // float
			constexpr auto K2Node_CustomEvent_Start2 = 0x384c; // FVector
			constexpr auto K2Node_CustomEvent_End2 = 0x3858; // FVector
			constexpr auto K2Node_CustomEvent_PlayImpactFX = 0x3864; // bool
			constexpr auto K2Node_CustomEvent_HitCharacterOrStructure = 0x3865; // bool
			constexpr auto K2Node_CustomEvent_Socket = 0x3868; // FName
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue2 = 0x3870; // UParticleSystemComponent*
			constexpr auto CallFunc_SwitchNetworkMode_OutNetworkMode4 = 0x3878; // ENetModeBP
			constexpr auto K2Node_SwitchEnum5_CmpSuccess = 0x3879; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue11 = 0x3880; // double
			constexpr auto K2Node_CustomEvent_Dir = 0x3888; // FVector
			constexpr auto K2Node_CustomEvent_Loc = 0x3894; // FVector
			constexpr auto K2Node_CustomEvent_Target = 0x38a0; // AActor*
			constexpr auto K2Node_CustomEvent_CustomTimeDilation = 0x38a8; // float
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue6 = 0x38ac; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue8 = 0x38b8; // bool
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue3 = 0x38bc; // FVector
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue12 = 0x38c8; // double
			constexpr auto CallFunc_SelectVector_ReturnValue = 0x38d0; // FVector
			constexpr auto CallFunc_Normal_ReturnValue2 = 0x38dc; // FVector
			constexpr auto CallFunc_Subtract_DoubleDouble_ReturnValue = 0x38e8; // double
			constexpr auto CallFunc_Conv_DoubleToFloat_ReturnValue = 0x38f0; // float
			constexpr auto CallFunc_K2_GetWorld_ReturnValue6 = 0x38f8; // UWorld*
			constexpr auto CallFunc_FMin_ReturnValue = 0x3900; // float
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue7 = 0x3904; // FVector
			constexpr auto CallFunc_BPFastTrace_ReturnValue2 = 0x3910; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue7 = 0x3918; // UWorld*
			constexpr auto CallFunc_IsPlayingBlockingAnim_ReturnVal2 = 0x3920; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue8 = 0x3924; // FVector
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue4 = 0x3930; // FVector
			constexpr auto CallFunc_VSize_ReturnValue3 = 0x393c; // float
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue5 = 0x3940; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue5 = 0x3941; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue13 = 0x3948; // double
			constexpr auto CallFunc_Conv_DoubleToFloat_ReturnValue2 = 0x3950; // float
			constexpr auto K2Node_MakeStruct_BPNetExecParams = 0x3958; // FBPNetExecParams
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue9 = 0x3998; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue8 = 0x39a0; // UWorld*
			constexpr auto CallFunc_TimeSince_Network_ReturnValue3 = 0x39a8; // float
			constexpr auto CallFunc_FClamp_ReturnValue = 0x39ac; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue4 = 0x39b0; // float
			constexpr auto K2Node_CustomEvent_Immelmann2 = 0x39b4; // bool
			constexpr auto CallFunc_Conv_FloatToVector_ReturnValue = 0x39b8; // FVector
			constexpr auto K2Node_CustomEvent_Immelmann = 0x39c4; // bool
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue2 = 0x39c5; // bool
			constexpr auto CallFunc_CanLoop_ReturnValue = 0x39c6; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue9 = 0x39c8; // UWorld*
			constexpr auto CallFunc_GetUpVector_ReturnValue = 0x39d0; // FVector
			constexpr auto K2Node_Event_MyComp = 0x39e0; // UPrimitiveComponent*
			constexpr auto K2Node_Event_Other = 0x39e8; // AActor*
			constexpr auto K2Node_Event_OtherComp = 0x39f0; // UPrimitiveComponent*
			constexpr auto K2Node_Event_bSelfMoved = 0x39f8; // bool
			constexpr auto K2Node_Event_HitLocation = 0x39fc; // FVector
			constexpr auto K2Node_Event_HitNormal = 0x3a08; // FVector
			constexpr auto K2Node_Event_NormalImpulse = 0x3a14; // FVector
			constexpr auto K2Node_Event_Hit = 0x3a20; // FHitResult
			constexpr auto CallFunc_Dot_VectorVector_ReturnValue6 = 0x3aa8; // float
			constexpr auto CallFunc_IsTimeSince_Network_ReturnValue3 = 0x3aac; // bool
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue6 = 0x3aad; // bool
			constexpr auto CallFunc_GetCurrentPercentOfMaxFlySpeed_ReturnValue = 0x3ab0; // float
			constexpr auto CallFunc_Greater_FloatFloat_ReturnValue6 = 0x3ab4; // bool
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue3 = 0x3ab5; // bool
			constexpr auto CallFunc_GetController_ReturnValue7 = 0x3ab8; // AController*
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController5 = 0x3ac0; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast6_CastSuccess = 0x3ac8; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue9 = 0x3acc; // FVector
			constexpr auto CallFunc_RandomUnitVector_ReturnValue = 0x3ad8; // FVector
			constexpr auto CallFunc_RandomFloat_ReturnValue = 0x3ae4; // float
			constexpr auto K2Node_CustomEvent_PickupLocation = 0x3ae8; // FVector
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue7 = 0x3af4; // float
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue8 = 0x3af8; // FVector
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue3 = 0x3b08; // UParticleSystemComponent*
			constexpr auto CallFunc_Add_VectorVector_ReturnValue8 = 0x3b10; // FVector
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue4 = 0x3b20; // UParticleSystemComponent*
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue10 = 0x3b28; // FVector
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue5 = 0x3b38; // UParticleSystemComponent*
			constexpr auto CallFunc_GetActorUpVector_ReturnValue2 = 0x3b40; // FVector
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue11 = 0x3b4c; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue9 = 0x3b58; // bool
			constexpr auto CallFunc_MakeHitResult_ReturnValue = 0x3b60; // FHitResult
			constexpr auto K2Node_CustomEvent_AxisValue = 0x3be8; // bool
			constexpr auto K2Node_CustomEvent_Direction3 = 0x3bec; // int32_t
			constexpr auto K2Node_CustomEvent_CamDir = 0x3bf0; // FVector
			constexpr auto CallFunc_EqualEqual_BoolBool_ReturnValue4 = 0x3bfc; // bool
			constexpr auto K2Node_CustomEvent_Direction2 = 0x3c00; // int32_t
			constexpr auto K2Node_CustomEvent_CameraDir = 0x3c04; // FVector
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue4 = 0x3c10; // bool
			constexpr auto CallFunc_CanBarrelRoll_Res = 0x3c11; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue14 = 0x3c18; // double
			constexpr auto K2Node_CustomEvent_Projectile = 0x3c20; // AShooterProjectile*
			constexpr auto CallFunc_IsValid_ReturnValue10 = 0x3c28; // bool
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue9 = 0x3c2c; // FVector
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue10 = 0x3c38; // bool
			constexpr auto CallFunc_Normal_ReturnValue3 = 0x3c3c; // FVector
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue8 = 0x3c48; // FRotator
			constexpr auto CallFunc_SetActorRotation_ReturnValue5 = 0x3c54; // bool
			constexpr auto CallFunc_GetController_ReturnValue8 = 0x3c58; // AController*
			constexpr auto CallFunc_NearlyEqual_FloatFloat_ReturnValue = 0x3c60; // bool
			constexpr auto K2Node_CustomEvent_Speed = 0x3c64; // float
			constexpr auto K2Node_CustomEvent_Direction = 0x3c68; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue10 = 0x3c74; // FVector
			constexpr auto CallFunc_GetController_ReturnValue9 = 0x3c80; // AController*
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue5 = 0x3c88; // bool
			constexpr auto CallFunc_CastToPlayerController_ReturnValue = 0x3c90; // APlayerController*
			constexpr auto CallFunc_GetActorRightVector_ReturnValue = 0x3c98; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue11 = 0x3ca4; // FVector
			constexpr auto CallFunc_GetActorRightVector_ReturnValue2 = 0x3cb0; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue12 = 0x3cbc; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue13 = 0x3cc8; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue14 = 0x3cd4; // FVector
			constexpr auto K2Node_CustomEvent_Start = 0x3ce0; // FVector
			constexpr auto K2Node_CustomEvent_End = 0x3cec; // FVector
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue5 = 0x3cf8; // FVector
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue12 = 0x3d04; // FVector
			constexpr auto CallFunc_VSizeSquared_ReturnValue = 0x3d10; // float
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue6 = 0x3d14; // FVector
			constexpr auto CallFunc_VSize_ReturnValue4 = 0x3d20; // float
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue8 = 0x3d24; // float
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue7 = 0x3d28; // bool
			constexpr auto CallFunc_LessEqual_FloatFloat_ReturnValue = 0x3d29; // bool
			constexpr auto CallFunc_IsStarFoxMode_CurrentSpline = 0x3d30; // AMissionSpline*
			constexpr auto CallFunc_IsStarFoxMode_ReturnValue = 0x3d38; // bool
			constexpr auto CallFunc_IsStarFoxMode_RetRiderSetTime = 0x3d40; // double
			constexpr auto CallFunc_IsStarFoxMode_RetIsRiderWarmup = 0x3d48; // bool
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue6 = 0x3d50; // UParticleSystemComponent*
			constexpr auto CallFunc_Conv_ObjectToString_ReturnValue = 0x3d58; // FString
			constexpr auto CallFunc_IsSubmerged_ReturnValue = 0x3d68; // bool
			constexpr auto CallFunc_Conv_BoolToInt_ReturnValue = 0x3d6c; // int32_t
			constexpr auto K2Node_CustomEvent_Locations2 = 0x3d70; // TArray<FVector>
			constexpr auto CallFunc_Array_Length_ReturnValue2 = 0x3d80; // int32_t
			constexpr auto CallFunc_Array_Get_Item2 = 0x3d84; // FVector
			constexpr auto CallFunc_Less_IntInt_ReturnValue2 = 0x3d90; // bool
			constexpr auto CallFunc_Conv_VectorToTransform_ReturnValue = 0x3da0; // FTransform
			constexpr auto CallFunc_BooleanAND_ReturnValue5 = 0x3dd0; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue10 = 0x3dd8; // UWorld*
			constexpr auto CallFunc_BeginSpawningActorFromClass_ReturnValue = 0x3de0; // AActor*
			constexpr auto CallFunc_FinishSpawningActor_ReturnValue = 0x3de8; // AActor*
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue15 = 0x3df0; // double
			constexpr auto CallFunc_IsTimeSince_Network_ReturnValue4 = 0x3df8; // bool
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue11 = 0x3df9; // bool
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue12 = 0x3dfa; // bool
			constexpr auto K2Node_CustomEvent_Locations = 0x3e00; // TArray<FVector>
			constexpr auto CallFunc_Array_Length_ReturnValue3 = 0x3e10; // int32_t
			constexpr auto CallFunc_Array_Get_Item3 = 0x3e14; // FVector
			constexpr auto CallFunc_Less_IntInt_ReturnValue3 = 0x3e20; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue11 = 0x3e28; // UWorld*
			constexpr auto CallFunc_BooleanAND_ReturnValue6 = 0x3e30; // bool
			constexpr auto CallFunc_IsTimeSince_Network_ReturnValue5 = 0x3e31; // bool
			constexpr auto CallFunc_GetUpVector_ReturnValue2 = 0x3e34; // FVector
			constexpr auto CallFunc_GetSocketLocation_ReturnValue = 0x3e40; // FVector
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue9 = 0x3e4c; // FRotator
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue7 = 0x3e58; // UParticleSystemComponent*
			constexpr auto CallFunc_GetController_ReturnValue10 = 0x3e60; // AController*
			constexpr auto K2Node_DynamicCast_AsPrimalDinoAIController = 0x3e68; // APrimalDinoAIController*
			constexpr auto K2Node_DynamicCast7_CastSuccess = 0x3e70; // bool
			constexpr auto CallFunc_GetTarget_ReturnValue = 0x3e78; // AActor*
			constexpr auto K2Node_DynamicCast_AsShooterCharacter2 = 0x3e80; // AShooterCharacter*
			constexpr auto K2Node_DynamicCast8_CastSuccess = 0x3e88; // bool
			constexpr auto CallFunc_GetController_ReturnValue11 = 0x3e90; // AController*
			constexpr auto K2Node_DynamicCast_AsPrimalDinoAIController2 = 0x3e98; // APrimalDinoAIController*
			constexpr auto K2Node_DynamicCast9_CastSuccess = 0x3ea0; // bool
			constexpr auto CallFunc_GetBlackboard_ReturnValue = 0x3ea8; // UBlackboardComponent*
			constexpr auto CallFunc_K2_GetWorld_ReturnValue12 = 0x3eb0; // UWorld*
			constexpr auto CallFunc_GetCharacterLevel_ReturnValue = 0x3eb8; // int32_t
			constexpr auto CallFunc_GetTransform_ReturnValue = 0x3ec0; // FTransform
			constexpr auto CallFunc_BreakTransform_Location = 0x3ef0; // FVector
			constexpr auto CallFunc_BreakTransform_Rotation = 0x3efc; // FRotator
			constexpr auto CallFunc_BreakTransform_Scale = 0x3f08; // FVector
			constexpr auto CallFunc_SpawnDino_ReturnValue = 0x3f18; // APrimalDinoCharacter*
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue16 = 0x3f20; // double
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue13 = 0x3f28; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue17 = 0x3f30; // double
			constexpr auto CallFunc_EqualEqual_DoubleDouble_ReturnValue14 = 0x3f38; // bool
			constexpr auto CallFunc_IsStarFoxMode_CurrentSpline2 = 0x3f40; // AMissionSpline*
			constexpr auto CallFunc_IsStarFoxMode_ReturnValue2 = 0x3f48; // bool
			constexpr auto CallFunc_IsStarFoxMode_RetRiderSetTime2 = 0x3f50; // double
			constexpr auto CallFunc_IsStarFoxMode_RetIsRiderWarmup2 = 0x3f58; // bool
			constexpr auto CallFunc_PlayAnimEx_ReturnValue2 = 0x3f5c; // float
			constexpr auto CallFunc_PlayAnimEx_ReturnValue3 = 0x3f60; // float
			constexpr auto CallFunc_SwitchNetworkMode_OutNetworkMode5 = 0x3f64; // ENetModeBP
			constexpr auto K2Node_SwitchEnum6_CmpSuccess = 0x3f65; // bool
			constexpr auto CallFunc_GetSocketLocation_ReturnValue2 = 0x3f68; // FVector
			constexpr auto K2Node_SwitchInteger_CmpSuccess = 0x3f74; // bool
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue8 = 0x3f78; // UParticleSystemComponent*
			constexpr auto CallFunc_IsValid_ReturnValue11 = 0x3f80; // bool
			constexpr auto K2Node_SwitchInteger2_CmpSuccess = 0x3f81; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue8 = 0x3f82; // bool
			constexpr auto CallFunc_EqualEqual_BoolBool_ReturnValue5 = 0x3f83; // bool
			constexpr auto CallFunc_IsStarFoxMode_CurrentSpline3 = 0x3f88; // AMissionSpline*
			constexpr auto CallFunc_IsStarFoxMode_ReturnValue3 = 0x3f90; // bool
			constexpr auto CallFunc_IsStarFoxMode_RetRiderSetTime3 = 0x3f98; // double
			constexpr auto CallFunc_IsStarFoxMode_RetIsRiderWarmup3 = 0x3fa0; // bool
			constexpr auto CallFunc_HasFuel_ReturnValue2 = 0x3fa1; // bool
			constexpr auto CallFunc_HasFuel_Quantity2 = 0x3fa4; // int32_t
			constexpr auto CallFunc_IsValid_ReturnValue12 = 0x3fa8; // bool
			constexpr auto CallFunc_IsFPV_RetVal = 0x3fa9; // bool
			constexpr auto CallFunc_IsFPV_CameraLoc = 0x3fac; // FVector
			constexpr auto K2Node_Select_ReturnValue = 0x3fb8; // UAnimMontage*
			constexpr auto K2Node_Select_CmpSuccess = 0x3fc0; // bool
			constexpr auto CallFunc_PlayAnimEx_ReturnValue4 = 0x3fc4; // float
			constexpr auto CallFunc_GetController_ReturnValue12 = 0x3fc8; // AController*
			constexpr auto CallFunc_IsFlakCannonOnCooldown_ReturnValue = 0x3fd0; // bool
			constexpr auto K2Node_DynamicCast_AsPlayerController = 0x3fd8; // APlayerController*
			constexpr auto K2Node_DynamicCast10_CastSuccess = 0x3fe0; // bool
			constexpr auto CallFunc_GetColorForColorizationRegion_ReturnValue = 0x3fe4; // FLinearColor
			constexpr auto CallFunc_GetColorForColorizationRegion_ReturnValue2 = 0x3ff4; // FLinearColor
			constexpr auto CallFunc_RGBToHSV_H = 0x4004; // float
			constexpr auto CallFunc_RGBToHSV_S = 0x4008; // float
			constexpr auto CallFunc_RGBToHSV_V = 0x400c; // float
			constexpr auto CallFunc_RGBToHSV_A = 0x4010; // float
			constexpr auto CallFunc_RGBToHSV_H2 = 0x4014; // float
			constexpr auto CallFunc_RGBToHSV_S2 = 0x4018; // float
			constexpr auto CallFunc_RGBToHSV_V2 = 0x401c; // float
			constexpr auto CallFunc_RGBToHSV_A2 = 0x4020; // float
			constexpr auto CallFunc_GetColorForColorizationRegion_ReturnValue3 = 0x4024; // FLinearColor
			constexpr auto CallFunc_RGBToHSV_H3 = 0x4034; // float
			constexpr auto CallFunc_RGBToHSV_S3 = 0x4038; // float
			constexpr auto CallFunc_RGBToHSV_V3 = 0x403c; // float
			constexpr auto CallFunc_RGBToHSV_A3 = 0x4040; // float
			constexpr auto CallFunc_MakeVector_ReturnValue3 = 0x4044; // FVector
			constexpr auto CallFunc_Not_PreBool_ReturnValue9 = 0x4050; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue13 = 0x4058; // UWorld*
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue18 = 0x4060; // double
			constexpr auto CallFunc_IsTimeSince_Network_ReturnValue6 = 0x4068; // bool
			constexpr auto CallFunc_Array_Length_ReturnValue4 = 0x406c; // int32_t
			constexpr auto CallFunc_SpawnEmitterAttached_ReturnValue2 = 0x4070; // UParticleSystemComponent*
			constexpr auto CallFunc_K2_IsTimerActive_ReturnValue2 = 0x4078; // bool
			constexpr auto CallFunc_IsGamePadActive_Ret = 0x4079; // bool
			constexpr auto CallFunc_IsGamePadActive_Ret2 = 0x407a; // bool
			constexpr auto CallFunc_IsValid_ReturnValue13 = 0x407b; // bool
			constexpr auto CallFunc_IsValid_ReturnValue14 = 0x407c; // bool
			constexpr auto CallFunc_IsValid_ReturnValue15 = 0x407d; // bool
			constexpr auto CallFunc_IsValid_ReturnValue16 = 0x407e; // bool
			constexpr auto Temp_byte_Variable = 0x407f; // EMoveComponentAction
			constexpr auto CallFunc_IsValid_ReturnValue17 = 0x4080; // bool
			constexpr auto CallFunc_SwitchNetworkMode_OutNetworkMode6 = 0x4081; // ENetModeBP
			constexpr auto CallFunc_SwitchNetworkMode_OutNetworkMode7 = 0x4082; // ENetModeBP
			constexpr auto K2Node_SwitchEnum7_CmpSuccess = 0x4083; // bool
			constexpr auto K2Node_SwitchEnum8_CmpSuccess = 0x4084; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue13 = 0x4088; // FVector
			constexpr auto CallFunc_K2_GetRootComponent_ReturnValue2 = 0x4098; // USceneComponent*
			constexpr auto CallFunc_PlaySoundAttached_ReturnValue5 = 0x40a0; // UAudioComponent*
			constexpr auto CallFunc_K2_GetRootComponent_ReturnValue3 = 0x40a8; // USceneComponent*
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue14 = 0x40b0; // FVector
			constexpr auto CallFunc_PlaySoundAttached_ReturnValue6 = 0x40c0; // UAudioComponent*
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue7 = 0x40c8; // FVector
			constexpr auto CallFunc_IsStarFoxMode_CurrentSpline4 = 0x40d8; // AMissionSpline*
			constexpr auto CallFunc_IsStarFoxMode_ReturnValue4 = 0x40e0; // bool
			constexpr auto CallFunc_IsStarFoxMode_RetRiderSetTime4 = 0x40e8; // double
			constexpr auto CallFunc_IsStarFoxMode_RetIsRiderWarmup4 = 0x40f0; // bool
			constexpr auto CallFunc_VSize_ReturnValue5 = 0x40f4; // float
			constexpr auto CallFunc_Greater_FloatFloat_ReturnValue7 = 0x40f8; // bool
			constexpr auto Temp_int_Loop_Counter_Variable4 = 0x40fc; // int32_t
			constexpr auto CallFunc_Less_IntInt_ReturnValue4 = 0x4100; // bool
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue8 = 0x4101; // bool
			constexpr auto CallFunc_Array_Get_Item4 = 0x4108; // UMaterialInterface*
			constexpr auto CallFunc_Add_IntInt_ReturnValue4 = 0x4110; // int32_t
			constexpr auto CallFunc_CreateDynamicMaterialInstance_ReturnValue = 0x4118; // UMaterialInstanceDynamic*
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue9 = 0x4120; // bool
			constexpr auto CallFunc_GetMovementComponent_ReturnValue2 = 0x4128; // UPawnMovementComponent*
			constexpr auto CallFunc_IsMissionDino_ReturnValue = 0x4130; // bool
			constexpr auto CallFunc_SelectFloat_ReturnValue = 0x4134; // float
			constexpr auto CallFunc_IsTimeSince_Network_ReturnValue7 = 0x4138; // bool
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore_RefProperty = 0x4140; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore2_RefProperty = 0x4150; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore3_RefProperty = 0x4160; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore4_RefProperty = 0x4170; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore5_RefProperty = 0x4180; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore6_RefProperty = 0x4190; // TArray<AActor*>
			constexpr auto CallFunc_SphereOverlapActors_NEW_ActorsToIgnore_RefProperty = 0x41a0; // TArray<AActor*>
		}
		// Inheritance: ABasePlayerController > APlayerController > AController > AActor > UObject
		namespace AShooterPlayerController
		{
			constexpr auto PaintingStreamingComponent = 0x880; // UPaintingStreamingComponent*
			constexpr auto HeldItemSlot0xa = 0x888; // char
			constexpr auto UsedItemSlot0xa = 0x892; // char
			constexpr auto LastRepeatUseConsumableTime0xa = 0x8a0; // double
			constexpr auto HeldItemSlotTime0xa = 0x8f0; // double
			constexpr auto LastUsedItemSlotTimes0xa = 0x940; // double
			constexpr auto PauseMenuUITemplate = 0x990; // UUI_PauseMenu*
			constexpr auto DoFMenuUITemplate = 0x998; // UUI_DepthOfFieldMenu*
			constexpr auto CurrentPlayerCharacterLocation = 0x9a8; // FVector
			constexpr auto bGamepadHotbarModifierPressed = 0x9b8; // char : 1
			constexpr auto StructurePlacer = 0x9c8; // APrimalStructurePlacer*
			constexpr auto LastDeathPrimalCharacter = 0x9e8; // TWeakObjectPtr<APrimalCharacter>
			constexpr auto bShowGameModeHUD = 0xa08; // bool
			constexpr auto SelectSlotSound = 0xa20; // USoundCue*
			constexpr auto FogOfWarClass = 0xa28; // UFogOfWar*
			constexpr auto FogOfWar = 0xa30; // UFogOfWar*
			constexpr auto PrimalLocalProfile = 0xa38; // UPrimalLocalProfile*
			constexpr auto CurrentGameModeMaxNumOfRespawns = 0xa40; // int32_t
			constexpr auto LastRawInputDir = 0xa44; // FVector
			constexpr auto StructurePlacerClass = 0xb10; // APrimalStructurePlacer*
			constexpr auto MaxUseDistance = 0xb18; // float
			constexpr auto MaxUseCheckRadius = 0xb1c; // float
			constexpr auto SavedSurvivorProfileSettings = 0xb20; // TArray<bool>
			constexpr auto bCachedOnlyShowOnlineTribeMembers = 0xb30; // bool
			constexpr auto SavedMissionBiomeFilterMask = 0xb34; // int32_t
			constexpr auto bInitializedMissionUI = 0xb38; // bool
			constexpr auto bMissionSortByDistance = 0xb39; // bool
			constexpr auto MapDinos = 0xb40; // TArray<FDinoMapMarkerInfo>
			constexpr auto RemoteViewingInventories = 0xb50; // TArray<TWeakObjectPtr<UPrimalInventoryComponent>>
			constexpr auto bIsRespawning = 0xb98; // char : 1
			constexpr auto bIsFirstSpawn = 0xb98; // char : 1
			constexpr auto SteamInventoryStatusUITemplate = 0xbc0; // UUI_SteamInventoryStatusPopup*
			constexpr auto LastSteamItemIDToRemove = 0xc90; // FItemNetID
			constexpr auto LastSteamItemIDToAdd = 0xc98; // FItemNetID
			constexpr auto SpectatorCycleIndex = 0xea8; // int32_t
			constexpr auto bIsFastTravelling = 0xead; // bool
			constexpr auto bLastSpawnWasFastTravel = 0xeae; // bool
			constexpr auto bPreventPaintingStreaming = 0xec8; // bool
			constexpr auto bHasSurvivedOneDay = 0xf38; // bool
			constexpr auto bHasReachedHighestPeak = 0xf39; // bool
			constexpr auto bHasReachedLowestDepth = 0xf3a; // bool
			constexpr auto LastDownloadPlayerDataBytes = 0x1040; // TArray<char>
			constexpr auto ViewingWheelCategory = 0x1078; // int32_t
			constexpr auto bNotifyPawnBuffsOfDamageEvents = 0x10a0; // char : 1
			constexpr auto bForceHideGameplayUI = 0x10a9; // bool
			constexpr auto bIsGamepadActive = 0x10b8; // bool
			constexpr auto bPreventDefaultCharacterItems = 0x10e0; // bool
			constexpr auto SFXVolumeMultiplier = 0x10e4; // float
			constexpr auto CreativeModeBuff = 0x11c8; // APrimalBuff*
			constexpr auto PrimalStatsCacheFlushInterval = 0x11d0; // float
			constexpr auto PingTraceDistance = 0x120c; // float
			constexpr auto PingNotifyRadius = 0x1210; // float
			constexpr auto PingLifetime = 0x1214; // float
			constexpr auto PingLifetime_Dying = 0x1218; // float
			constexpr auto PingCoolDownTime = 0x121c; // float
			constexpr auto PingIcon_Default = 0x1220; // UTexture2D*
			constexpr auto PingIcon_Players = 0x1228; // UTexture2D*
			constexpr auto PingIcon_Dinos = 0x1230; // UTexture2D*
			constexpr auto PingIcon_Structures = 0x1238; // UTexture2D*
			constexpr auto LastPingTime = 0x1240; // double
			constexpr auto CurrentPings = 0x1248; // TArray<FPingData>
			constexpr auto bWantsToPing = 0x1258; // char : 1
			constexpr auto bEnablePingSystem = 0x1258; // char : 1
			constexpr auto bDebugPOIs = 0x125c; // bool
			constexpr auto POI_SearchTickInterval_Current = 0x1260; // float
			constexpr auto POI_SearchTickInterval_RandRanges = 0x1264; // FVector2D
			constexpr auto POI_SearchRadius = 0x126c; // float
			constexpr auto POI_LastSearchTickTime = 0x1270; // double
			constexpr auto SpawnedPointWidgets = 0x1278; // TArray<UUserWidget*>
			constexpr auto SpawnedPointCosmeticActors = 0x1288; // TArray<APointOfInterestCosmeticActor*>
			constexpr auto NearbyPointsOfInterest = 0x1298; // TArray<FPointOfInterestData_ForCompanion>
			constexpr auto MissionWaypoint = 0x12a8; // FMissionWaypointInfo
			constexpr auto TamingWaypoints = 0x12d0; // TArray<FTamingWaypointInfo>
			constexpr auto bWasGamepadHotbarModifierPressed_RightShoulder = 0x12f4; // char : 1
			constexpr auto MaxTamingWaypoints = 0x1350; // int32_t
			constexpr auto OnClientReceiveStructuresPlacedOnFloor = 0x1358; // FScriptMulticastDelegate
			constexpr auto bIsInAdvancedCinematicMode = 0x1388; // bool
			constexpr auto Gen1ENFixDesyncValue = 0x138c; // int32_t
			constexpr auto HighlightedStructures = 0x1390; // TArray<FStructHighlightInfo>
			constexpr auto EnforcementRelevantStructures = 0x13a0; // TArray<APrimalStructure*>
			constexpr auto EnforcementColors = 0x13b0; // TArray<FLinearColor>
		}
		// Inheritance: AShooterWeapon_FlameThrower > AShooterWeapon > AActor > UObject
		namespace AWeapFlamethrower_C
		{
			constexpr auto IdleSFX = 0xe10; // UAudioComponent*
			constexpr auto lighter3p = 0xe18; // UParticleSystemComponent*
			constexpr auto lighter = 0xe20; // UParticleSystemComponent*
			constexpr auto bIsReloading = 0xe28; // bool
			constexpr auto Lighter1POffset = 0xe2c; // FVector
			constexpr auto Lighter1PScale = 0xe38; // FVector
			constexpr auto Lighter3POffset = 0xe44; // FVector
			constexpr auto Lighter3PScale = 0xe50; // FVector
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue = 0xe5c; // bool
		}
		// Inheritance: AShooterWeapon > AActor > UObject
		namespace AShooterWeapon_FlameThrower
		{
			constexpr auto InstantDamageAmount = 0xd80; // int32_t
			constexpr auto DamageTestSphereRadius = 0xd84; // float
			constexpr auto DamageTestBoxExtentSide = 0xd88; // float
			constexpr auto DamageTestMuzzleOffset = 0xd8c; // float
			constexpr auto FlameHurtMaxDistance = 0xd90; // float
			constexpr auto DamageImpactPoints = 0xd98; // TArray<FVector>
			constexpr auto MuzzleDirectionOffset = 0xda8; // FVector
			constexpr auto MuzzlePSCTickGroupOverride = 0xdb4; // ETickingGroup
			constexpr auto bUseMuzzlePSCTickGroupOverride = 0xdb8; // char : 1
			constexpr auto FlameThrowerFXDefaultColor = 0xdbc; // FColor
			constexpr auto DamageType = 0xdc0; // UDamageType*
			constexpr auto FlameThrowerFX = 0xdc8; // UParticleSystem*
			constexpr auto FlameThrowerFX_FPV = 0xdd0; // UParticleSystem*
			constexpr auto OnFireFX = 0xdd8; // UParticleSystem*
			constexpr auto HarvestFX = 0xde0; // UParticleSystem*
			constexpr auto ShotDelay = 0xdf8; // float
			constexpr auto FXDelay = 0xe00; // float
			constexpr auto bMuzzlePSC_IsTPV = 0xe08; // char : 1
		}
		// Inheritance: APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_OverrideVelocity_C
		{
			constexpr auto NewFallVelocity = 0x978; // FVector
			constexpr auto MaxNewFallVelocity = 0x984; // float
		}
		// Inheritance: APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace APrimalBuff
		{
			constexpr auto DeactivationLifespan = 0x518; // float
			constexpr auto InstigatorAttachmentSocket = 0x51c; // FName
			constexpr auto InstigatorAttachmentSocket_PlayerOverride = 0x524; // FName
			constexpr auto bDeactivateOnJump = 0x52c; // char : 1
			constexpr auto bPreventJump = 0x52c; // char : 1
			constexpr auto bPreventDinoRiding = 0x52c; // char : 1
			constexpr auto bPreventDinoDismount = 0x52c; // char : 1
			constexpr auto bSlowInstigatorFalling = 0x52c; // char : 1
			constexpr auto bUseBPNotifyPreventDismounting = 0x530; // char : 1
			constexpr auto bOnlyAddCharacterValuesUnderwater = 0x534; // char : 1
			constexpr auto bUseInstigatorItem = 0x534; // char : 1
			constexpr auto bDisableIfCharacterUnderwater = 0x534; // char : 1
			constexpr auto bUsesInstigator = 0x534; // char : 1
			constexpr auto bAddCharacterValues = 0x534; // char : 1
			constexpr auto bFollowTarget = 0x534; // char : 1
			constexpr auto bDeactivated = 0x534; // char : 1
			constexpr auto bPreventCarryOrPassenger = 0x534; // char : 1
			constexpr auto bCustomDepthStencilIgnoreHealth = 0x535; // char : 1
			constexpr auto bBuffForceNoTickDedicated = 0x535; // char : 1
			constexpr auto bBuffForceNoTick = 0x535; // char : 1
			constexpr auto bAoEIgnoreDinosTargetingInstigator = 0x535; // char : 1
			constexpr auto bAoEOnlyOnDinosTargetingInstigator = 0x535; // char : 1
			constexpr auto bAoETraceToTargets = 0x535; // char : 1
			constexpr auto bDestroyOnTargetStasis = 0x535; // char : 1
			constexpr auto bAOEOnlyApplyOtherBuffToWildDinos = 0x535; // char : 1
			constexpr auto bPlayerIgnoreBuffPostprocessEffectWhenRidingDino = 0x536; // char : 1
			constexpr auto bRemoteForcedFlee = 0x536; // char : 1
			constexpr auto bDinoIgnoreBuffPostprocessEffectWhenRidden = 0x536; // char : 1
			constexpr auto bUseActivateSoundFadeInDuration = 0x536; // char : 1
			constexpr auto bCompleteCustomDepthStencilOverride = 0x536; // char : 1
			constexpr auto RemoteForcedFleeDuration = 0x538; // float
			constexpr auto AoETraceToTargetsStartOffset = 0x53c; // FVector
			constexpr auto Target = 0x548; // TWeakObjectPtr<AActor>
			constexpr auto InstigatorItem = 0x550; // TWeakObjectPtr<UPrimalItem>
			constexpr auto SlowInstigatorFallingAddZVelocity = 0x558; // float
			constexpr auto SlowInstigatorFallingDampenZVelocity = 0x55c; // float
			constexpr auto DeactivateAfterTime = 0x560; // float
			constexpr auto WeaponRecoilMultiplier = 0x564; // float
			constexpr auto ReceiveDamageMultiplier = 0x568; // float
			constexpr auto MeleeDamageMultiplier = 0x56c; // float
			constexpr auto DepleteInstigatorItemDurabilityPerSecond = 0x570; // float
			constexpr auto ValuesToAddPerSecond0xc = 0x574; // float
			constexpr auto BuffDescription = 0x5a8; // FStatusValueModifierDescription
			constexpr auto CharacterAdd_DefaultHyperthermicInsulation = 0x5f8; // float
			constexpr auto CharacterAdd_DefaultHypothermicInsulation = 0x5fc; // float
			constexpr auto CharacterMultiplier_ExtraWaterConsumptionMultiplier = 0x600; // float
			constexpr auto CharacterMultiplier_ExtraFoodConsumptionMultiplier = 0x604; // float
			constexpr auto CharacterMultiplier_SubmergedOxygenDecreaseSpeed = 0x608; // float
			constexpr auto ViewMinExposureMultiplier = 0x60c; // float
			constexpr auto ViewMaxExposureMultiplier = 0x610; // float
			constexpr auto XPtoAdd = 0x614; // float
			constexpr auto XPtoAddRate = 0x618; // float
			constexpr auto DinoColorizationPriority = 0x61c; // int32_t
			constexpr auto DinoColorizationInterpSpeed = 0x620; // float
			constexpr auto bUseBPDinoRefreshColorization = 0x624; // char : 1
			constexpr auto bOverrideInventoryWeightMultipliers = 0x624; // char : 1
			constexpr auto bDeactivateAfterAddingXP = 0x624; // char : 1
			constexpr auto OverrideInventoryItemClassWeightMultipliers = 0x628; // TArray<FItemMultiplier>
			constexpr auto bForceUsePreventTargeting = 0x698; // char : 1
			constexpr auto bBPOverrideWeaponBob = 0x698; // char : 1
			constexpr auto bForceUsePreventTargetingTurret = 0x698; // char : 1
			constexpr auto bOnlyActivateSoundForInstigator = 0x698; // char : 1
			constexpr auto bDisplayHUDProgressBar = 0x698; // char : 1
			constexpr auto bModifyMaxSpeed = 0x698; // char : 1
			constexpr auto bCausesCryoSickness = 0x698; // char : 1
			constexpr auto bAOEBuffCarnosOnly = 0x698; // char : 1
			constexpr auto bUseBPModifyPlayerBoneModifiers = 0x699; // char : 1
			constexpr auto bDediServerUseBPModifyPlayerBoneModifiers = 0x699; // char : 1
			constexpr auto bUseBPNonDedicatedPlayerPostAnimUpdate = 0x699; // char : 1
			constexpr auto bUseBPIsCharacterHardAttached = 0x699; // char : 1
			constexpr auto bDoCharacterDetachment = 0x699; // char : 1
			constexpr auto bDoCharacterDetachmentIncludeRiding = 0x699; // char : 1
			constexpr auto bDoCharacterDetachmentIncludeCarrying = 0x699; // char : 1
			constexpr auto bUseBPInitializedCharacterAnimScriptInstance = 0x699; // char : 1
			constexpr auto bUseBPIsValidUnstasisActor = 0x69a; // char : 1
			constexpr auto bUseBPForceCameraStyle = 0x69a; // char : 1
			constexpr auto bUseBPOverrideCameraViewTarget = 0x69a; // char : 1
			constexpr auto bPreventFallDamage = 0x69a; // char : 1
			constexpr auto bUseBPOnInstigatorCapsuleComponentHit = 0x69a; // char : 1
			constexpr auto bUsePostAdjustDamage = 0x69a; // char : 1
			constexpr auto bUseBPCanBeCarried = 0x69a; // char : 1
			constexpr auto bUseBPOverrideIsNetRelevantFor = 0x69b; // char : 1
			constexpr auto bPreventClearRiderOnDinoImmobilize = 0x69b; // char : 1
			constexpr auto bAlwaysShowBuffDescription = 0x69b; // char : 1
			constexpr auto SubmergedMaxSpeedModifier = 0x69c; // float
			constexpr auto UnsubmergedMaxSpeedModifier = 0x6a0; // float
			constexpr auto SubmergedMaxAccelerationModifier = 0x6a4; // float
			constexpr auto UnsubmergedMaxAccelerationModifier = 0x6a8; // float
			constexpr auto SubmergedRotationRateModifier = 0x6ac; // float
			constexpr auto UnsubmergedRotationRateModifier = 0x6b0; // float
			constexpr auto FrictionModifier = 0x6b4; // float
			constexpr auto CharacterStatusValueModifiers = 0x6b8; // TArray<FDamagePrimalCharacterStatusValueModifier>
			constexpr auto BuffStartTime = 0x6c8; // double
			constexpr auto bForcedOnSpectatorPlayerController = 0x6d8; // bool
			constexpr auto BuffPostProcessEffect = 0x6e0; // UMaterialInterface*
			constexpr auto PreventActorClassesTargeting = 0x6e8; // TArray<AActor*>
			constexpr auto PreventActorClassesTargetingRanges = 0x6f8; // TArray<float>
			constexpr auto RelatedMission = 0x708; // AMissionType*
			constexpr auto bHasRelatedMission = 0x710; // bool
			constexpr auto bAOEApplyOtherBuffOnPlayers = 0x714; // char : 1
			constexpr auto bAOEApplyOtherBuffIgnoreSameTeam = 0x714; // char : 1
			constexpr auto bAOEApplyOtherBuffRequireSameTeam = 0x714; // char : 1
			constexpr auto bBuffDrawFloatingHUD = 0x714; // char : 1
			constexpr auto bAddResetsBuffTime = 0x714; // char : 1
			constexpr auto bAoEBuffAllowIfAlreadyBuffed = 0x714; // char : 1
			constexpr auto bNetResetBuffStart = 0x714; // char : 1
			constexpr auto bAOEApplyOtherBuffOnDinos = 0x714; // char : 1
			constexpr auto bIsBuffPersistent = 0x715; // char : 1
			constexpr auto bBPUseBumpedPawn = 0x715; // char : 1
			constexpr auto bBPUseBumpedByPawn = 0x715; // char : 1
			constexpr auto bForcePlayerProne = 0x715; // char : 1
			constexpr auto bBPAddMultiUseEntries = 0x715; // char : 1
			constexpr auto bHideTimerFromHUD = 0x715; // char : 1
			constexpr auto bHideBuffFromHUD = 0x715; // char : 1
			constexpr auto bImmobilizeTarget = 0x715; // char : 1
			constexpr auto bPreventOnWildDino = 0x716; // char : 1
			constexpr auto bPreventOnPlayer = 0x716; // char : 1
			constexpr auto bPreventOnDino = 0x716; // char : 1
			constexpr auto bAllowBuffWhenInstigatorDead = 0x716; // char : 1
			constexpr auto bApplyStatModifierToDinos = 0x716; // char : 1
			constexpr auto bAllowBuffStasis = 0x716; // char : 1
			constexpr auto bNotifyDamage = 0x716; // char : 1
			constexpr auto bApplyStatModifierToPlayers = 0x716; // char : 1
			constexpr auto bIsDisease = 0x717; // char : 1
			constexpr auto bUseBPPreventAddingOtherBuff = 0x717; // char : 1
			constexpr auto bUseBPPreventRunning = 0x717; // char : 1
			constexpr auto bPreventOnRobotDino = 0x717; // char : 1
			constexpr auto bPreventOnBossDino = 0x717; // char : 1
			constexpr auto bPreventOnBigDino = 0x717; // char : 1
			constexpr auto PreventIfMovementMassGreaterThan = 0x718; // float
			constexpr auto AOEOtherBuffToApply = 0x720; // APrimalBuff*
			constexpr auto AOEBuffRange = 0x728; // float
			constexpr auto CharacterAOEBuffDamage = 0x72c; // float
			constexpr auto CharacterAOEBuffResistance = 0x730; // float
			constexpr auto Maximum2DVelocityForStaminaRecovery = 0x734; // float
			constexpr auto bUseBPGetHUDElements = 0x738; // char : 1
			constexpr auto bForceDrawMissionDinoTargetHealthbars = 0x738; // char : 1
			constexpr auto bUseBPGetCameraShakeScalar = 0x738; // char : 1
			constexpr auto bAddReactivates = 0x738; // char : 1
			constexpr auto bUseBPAdjustImpulseFromDamage = 0x738; // char : 1
			constexpr auto bUseBPAdjustCharacterMovementImpulse = 0x738; // char : 1
			constexpr auto bAoEApplyDamageAllTargetables = 0x738; // char : 1
			constexpr auto PostprocessBlendablesToExclude = 0x740; // TArray<UMaterialInterface*>
			constexpr auto BuffToGiveOnDeactivation = 0x768; // APrimalBuff*
			constexpr auto BuffClassesToCancelOnActivation = 0x770; // TArray<APrimalBuff*>
			constexpr auto ActivePreventsBuffClasses = 0x780; // TArray<APrimalBuff*>
			constexpr auto BuffRequiresOwnerClass = 0x790; // TArray<APrimalCharacter*>
			constexpr auto BuffPreventsOwnerClass = 0x7a0; // TArray<APrimalCharacter*>
			constexpr auto XPEarningMultiplier = 0x7b0; // float
			constexpr auto bUseBPSetupForInstigator = 0x7b4; // bool
			constexpr auto bUseBPDeactivated = 0x7b5; // bool
			constexpr auto bUseBPOverrideBuffToGiveOnDeactivation = 0x7b6; // bool
			constexpr auto bUseBPCustomAllowAddBuff = 0x7b7; // bool
			constexpr auto bUseBPInformDamageCauserOfBuffAdded = 0x7b8; // bool
			constexpr auto bRequireController = 0x7b9; // char : 1
			constexpr auto bUseBPActivated = 0x7b9; // char : 1
			constexpr auto bDontPlayInstigatorActiveSoundOnDino = 0x7b9; // char : 1
			constexpr auto bAddExtendBuffTime = 0x7b9; // char : 1
			constexpr auto bUseBPPreventFlight = 0x7b9; // char : 1
			constexpr auto bUseBPHandleOnStopAltFire = 0x7b9; // char : 1
			constexpr auto bUseBPHandleOnStartAltFire = 0x7b9; // char : 1
			constexpr auto bUseBPHandleOnStartFire = 0x7b9; // char : 1
			constexpr auto bUseTickingDeactivation = 0x7ba; // char : 1
			constexpr auto bCheckPreventInput = 0x7ba; // char : 1
			constexpr auto bBPDrawBuffStatusHUD = 0x7ba; // char : 1
			constexpr auto bEnableStaticPathing = 0x7ba; // char : 1
			constexpr auto bHUDFormatTimerAsTimecode = 0x7ba; // char : 1
			constexpr auto staticPathingDestination = 0x7bc; // FVector
			constexpr auto bUseBPNotifyOtherBuffDeactivated = 0x7d0; // char : 1
			constexpr auto bUseBPNotifyOtherBuffActivated = 0x7d0; // char : 1
			constexpr auto bBPAdjustStatusValueModification = 0x7d0; // char : 1
			constexpr auto bOnlyTickWhenVisible = 0x7d0; // char : 1
			constexpr auto bPreventInputDoesOffset = 0x7d0; // char : 1
			constexpr auto bUseBPPreventThrowingItem = 0x7d0; // char : 1
			constexpr auto bNotifyExperienceGained = 0x7d0; // char : 1
			constexpr auto bUseBPPreventInstigatorMovementMode = 0x7d1; // char : 1
			constexpr auto bUseBPPreventInstigatorAttack = 0x7d1; // char : 1
			constexpr auto bUseBPOverrideTalkerCharacter = 0x7d1; // char : 1
			constexpr auto bBuffHandleInstigatorMultiUseEntries = 0x7d1; // char : 1
			constexpr auto bUseBPOnInstigatorMovementModeChangedNotify = 0x7d1; // char : 1
			constexpr auto bPreventInstigatorAttack = 0x7d1; // char : 1
			constexpr auto bForceAddUnderwaterCharacterStatusValues = 0x7d1; // char : 1
			constexpr auto bUseBPPreventFirstPerson = 0x7d1; // char : 1
			constexpr auto bUseBPPreventOnStartJump = 0x7d2; // char : 1
			constexpr auto MyBuffPersistentData = 0x7d8; // UPrimalBuffPersistentData*
			constexpr auto BuffPersistentDataClass = 0x7e0; // UPrimalBuffPersistentData*
			constexpr auto MaxStatScalers = 0x7e8; // TArray<FMaxStatScaler>
			constexpr auto DamageCauser = 0x7f8; // TWeakObjectPtr<AActor>
			constexpr auto ExtraActivationSoundToPlay = 0x800; // USoundBase*
			constexpr auto bPersistentBuffSurvivesLevelUp = 0x808; // bool
			constexpr auto AoEApplyDamage = 0x80c; // float
			constexpr auto AoEApplyDamageInterval = 0x810; // float
			constexpr auto AoEApplyDamageType = 0x818; // UDamageType*
			constexpr auto ForceNetworkSpatializationMaxLimitBuffType = 0x820; // APrimalBuff*
			constexpr auto ForceNetworkSpatializationBuffMaxLimitNum = 0x828; // int32_t
			constexpr auto ForceNetworkSpatializationBuffMaxLimitRange = 0x82c; // float
			constexpr auto InsulationRange = 0x830; // float
			constexpr auto HyperThermiaInsulation = 0x834; // float
			constexpr auto HypoThermiaInsulation = 0x838; // float
			constexpr auto AoEBuffLocOffset = 0x83c; // FVector
			constexpr auto AoEClassesToInclude = 0x848; // TArray<AActor*>
			constexpr auto AoEClassesToExclude = 0x858; // TArray<AActor*>
			constexpr auto bUseBPExcludeAoEActor = 0x868; // bool
			constexpr auto bOverrideBuffDescription = 0x869; // bool
			constexpr auto bOverrideBuffType = 0x86a; // bool
			constexpr auto bOnlyTickIfPlayerCharacter = 0x86b; // bool
			constexpr auto bOnlyTickWhenPossessed = 0x86c; // bool
			constexpr auto bDestroyWhenUnpossessed = 0x86d; // bool
			constexpr auto OnlyForInstigatorSoundFadeInTime = 0x878; // float
			constexpr auto bUseBuffTickServer = 0x87c; // bool
			constexpr auto bUseBuffTickClient = 0x87d; // bool
			constexpr auto BuffTickServerMaxTime = 0x880; // float
			constexpr auto BuffTickServerMinTime = 0x884; // float
			constexpr auto BuffTickClientMaxTime = 0x888; // float
			constexpr auto BuffTickClientMinTime = 0x88c; // float
			constexpr auto bUseRemoteClientTick = 0x890; // bool
			constexpr auto BuffTickRemoteClientMaxTime = 0x894; // float
			constexpr auto BuffTickRemoteClientMinTime = 0x898; // float
			constexpr auto bContinueTickingServerAfterDeactivate = 0x89c; // bool
			constexpr auto bContinueTickingClientAfterDeactivate = 0x89d; // bool
			constexpr auto AddBuffMaxNumStacks = 0x8c4; // int32_t
			constexpr auto DeactivatedSound = 0x8c8; // USoundBase*
			constexpr auto bDeactivatedSoundOnlyLocal = 0x8d0; // bool
			constexpr auto bDisableBloom = 0x8d1; // bool
			constexpr auto bBPModifyCharacterFOV = 0x8d2; // bool
			constexpr auto PostProcessInterpSpeedDown = 0x8d4; // float
			constexpr auto PostProcessInterpSpeedUp = 0x8d8; // float
			constexpr auto TPVCameraSpeedInterpolationMultiplier = 0x8dc; // float
			constexpr auto bIsCarryBuff = 0x8e0; // bool
			constexpr auto PostprocessMaterialAdjusters = 0x8e8; // TArray<FPostProcessMaterialAdjuster>
			constexpr auto bBPOverrideCharacterWalkVelocity = 0x8f8; // char : 1
			constexpr auto bBPOverrideCharacterNewFallVelocity = 0x8f8; // char : 1
			constexpr auto bBPOverrideCharacterFlyingVelocity = 0x8f8; // char : 1
			constexpr auto bForceOverrideCharacterWalkingVelocity = 0x8f8; // char : 1
			constexpr auto bForceOverrideCharacterSwimmingVelocity = 0x8f8; // char : 1
			constexpr auto bForceOverrideCharacterFlyingVelocity = 0x8f8; // char : 1
			constexpr auto bForceOverrideCharacterNewFallVelocity = 0x8f8; // char : 1
			constexpr auto bBPOverrideCharacterSwimmingVelocity = 0x8f8; // char : 1
			constexpr auto bOverrideCharacterLanding = 0x8f9; // char : 1
			constexpr auto bOverrideCharacterMovementInput = 0x8f9; // char : 1
			constexpr auto AOEBuffIntervalMin = 0x908; // float
			constexpr auto AOEBuffIntervalMax = 0x90c; // float
			constexpr auto MaximumVelocityZForSlowingFall = 0x910; // float
			constexpr auto bAllowMultiUseEntriesFromSelf = 0x918; // char : 1
			constexpr auto bUseInterceptInstigatorPlayerEmote = 0x91c; // char : 1
			constexpr auto bTriggerBPStasis = 0x91c; // char : 1
			constexpr auto bTriggerBPUnstasis = 0x91c; // char : 1
			constexpr auto bPreventLogoutSleeping = 0x91c; // char : 1
			constexpr auto bForceCrosshair = 0x91c; // char : 1
			constexpr auto bUseBPHandleOnStopFire = 0x91c; // char : 1
			constexpr auto bAddTPVCameraOffset = 0x91d; // bool
			constexpr auto bOverrideTPVCameraOffset = 0x91e; // bool
			constexpr auto TPVCameraOffset = 0x920; // FVector
			constexpr auto bOverrideTPVCameraOffsetMultiplier = 0x92c; // bool
			constexpr auto TPVCameraOffsetMultiplier = 0x930; // FVector
			constexpr auto bUseCenteredTPVCamera = 0x93c; // bool
			constexpr auto bUseBlueprintAnimNotifications = 0x93d; // bool
			constexpr auto bUseBPShouldForceOwnerDedicatedMovementTickPerFrame = 0x93e; // char : 1
			constexpr auto bUseBPOnOwnerMassTeleportEvent = 0x93e; // char : 1
			constexpr auto bUseBPGetGravity = 0x93e; // char : 1
			constexpr auto bAllowOnlyCustomFallDamage = 0x940; // char : 1
			constexpr auto bUseBPGetMoveAnimRate = 0x944; // char : 1
			constexpr auto bUseBPOverrideTargetingDesire = 0x944; // char : 1
			constexpr auto bBuffPreventsApplyingLevelUps = 0x944; // char : 1
			constexpr auto bBuffPreSerializeForInstigator = 0x944; // char : 1
			constexpr auto bUseBPOverrideWaterJumpVelocity = 0x944; // char : 1
			constexpr auto bModifyFriction = 0x948; // char : 1
			constexpr auto bModifyMaxAcceleration = 0x948; // char : 1
			constexpr auto bModifyRotationRate = 0x948; // char : 1
			constexpr auto bUseGetGravityZScale = 0x948; // char : 1
			constexpr auto bUseBuffOverrideFinalWanderLocation = 0x948; // char : 1
			constexpr auto bUseBP_AdjustDamageEx = 0x948; // char : 1
			constexpr auto bUseBP_OnOwnerDealtDamage = 0x948; // char : 1
			constexpr auto bUseBP_OverrideTerminalVelocity = 0x948; // char : 1
			constexpr auto bDisableFootstepsParticles = 0x949; // char : 1
			constexpr auto bForceAllowAddingWithoutController = 0x949; // char : 1
			constexpr auto bForceAllowWhileBuried = 0x949; // char : 1
			constexpr auto bUseBP_OnOwnerTeleported = 0x949; // char : 1
			constexpr auto bUseBPAdjustRadialDamage = 0x949; // char : 1
			constexpr auto bUseForcedBuffAimOverride = 0x949; // char : 1
			constexpr auto bUseBPPreventTekArmorBuffs = 0x949; // char : 1
			constexpr auto bBuffPreventsInventoryAccess = 0x949; // char : 1
			constexpr auto bListenForInput = 0x94a; // char : 1
			constexpr auto bUseBPPreventNotifySound = 0x94a; // char : 1
			constexpr auto bInterceptWeaponToggle = 0x94a; // char : 1
			constexpr auto bInterceptUseAction = 0x94a; // char : 1
			constexpr auto bUseBuffOverrideInventoryAccessInput = 0x94a; // char : 1
			constexpr auto bBuffPreventsCryo = 0x94a; // char : 1
			constexpr auto bUseBPDinoNameColorOverride = 0x94a; // char : 1
			constexpr auto bReactivateWithNewDamageCauser = 0x94a; // char : 1
			constexpr auto bBuffDrawFloatingHUDRemotePlayers = 0x94b; // char : 1
			constexpr auto bUseConsolidatedMultiUseWheel = 0x94b; // char : 1
			constexpr auto CharacterMultiplier_DefaultExtraDamageMultiplier = 0x94c; // float
			constexpr auto bIsHighRiskMissionBuff = 0x950; // char : 1
			constexpr auto bAllowTurretsToTargetInstigatorIfTraceHitsBuff = 0x950; // char : 1
			constexpr auto bForceInstigatorTick = 0x950; // char : 1
			constexpr auto bSkipInstigatorTick = 0x950; // char : 1
			constexpr auto bForceSelfTick = 0x950; // char : 1
			constexpr auto bForceAlwaysAllowBuff = 0x950; // char : 1
			constexpr auto StaminaDrainMultiplier = 0x954; // float
			constexpr auto bUseBPGetPlayerFootStepSound = 0x958; // bool
			constexpr auto DisabledWeaponTags = 0x960; // TArray<FName>
			constexpr auto bUseBPGetCrosshairColor = 0x970; // bool
			constexpr auto bUseBPModifyArmorValue = 0x971; // bool
			constexpr auto bShowMammalIncubationOptions = 0x972; // bool
		}
		// Inheritance: ABuff_OverrideVelocity_C > APrimalBuff > APrimalEmitterSpawnable > AEmitter > AActor > UObject
		namespace ABuff_TekArmor_C
		{
			constexpr auto Ref_OwningPlayer = 0x988; // AShooterCharacter*
			constexpr auto currentEquipmentSlot = 0x990; // EPrimalEquipmentType
			constexpr auto Ref_OwningPlayerController = 0x998; // APlayerController*
			constexpr auto SelfAsObj = 0x9a0; // ABuff_TekArmor_C*
			constexpr auto FistWeapon = 0x9a8; // AWeapFists_C*
			constexpr auto Ref_ArmorPiece = 0x9b0; // UPrimalItemArmor_Base_Tek_C*
			constexpr auto TekBuffEquipmentType = 0x9b8; // EPrimalEquipmentType
			constexpr auto bIsTekAbilityActive = 0x9b9; // bool
			constexpr auto TekArmorMessage_Color = 0x9bc; // FLinearColor
			constexpr auto TekArmorMessage_DisplayScale = 0x9cc; // float
			constexpr auto TekArmorMessage_DisplayTime = 0x9d0; // float
			constexpr auto bInfiniteAmmo = 0x9d4; // bool
			constexpr auto SpawnedFXActors = 0x9d8; // TArray<ATekArmor_EffectActor_C*>
			constexpr auto TekArmorName = 0x9e8; // FName
			constexpr auto TekArmorIcon = 0x9f0; // UTexture2D*
			constexpr auto bShouldWarpFOV = 0x9f8; // bool
			constexpr auto warpFOV_target = 0x9fc; // float
			constexpr auto warpFOV_MAX = 0xa00; // float
			constexpr auto warpFOV_lag_in = 0xa04; // float
			constexpr auto warpFOV_lag_out = 0xa08; // float
			constexpr auto warpFOV_start = 0xa0c; // float
			constexpr auto ConsumeElementInterval = 0xa10; // float
			constexpr auto TimeSinceLastConsumeElement = 0xa14; // float
			constexpr auto preventAbilityActiveSlot = 0xa18; // EPrimalEquipmentType
			constexpr auto bTekIgnoredMoveInput = 0xa19; // bool
			constexpr auto bTekIgnoredLookInput = 0xa1a; // bool
			constexpr auto bLeftBumperHeld = 0xa1b; // bool
			constexpr auto bIsWeapon = 0xa1c; // bool
			constexpr auto Restrictedbecauseofgenesismapstring = 0xa20; // FString
			constexpr auto GenesisAbilityErrorRateLimitSeconds = 0xa30; // float
			constexpr auto hassetwhethertekabilitiesareallowedingenesis = 0xa34; // bool
			constexpr auto tekabilitiesareallowedingenesis = 0xa35; // bool
			constexpr auto GenesisMapName = 0xa38; // FString
			constexpr auto AbilityRequiresEngrams = 0xa48; // TArray<UPrimalItem*>
			constexpr auto K2Node_CustomEvent_ItemSlot = 0xa58; // EPrimalEquipmentType
			constexpr auto K2Node_CustomEvent_particleTemplate = 0xa60; // UParticleSystem*
			constexpr auto K2Node_CustomEvent_sound = 0xa68; // USoundBase*
			constexpr auto K2Node_CustomEvent_Transform = 0xa70; // FTransform
			constexpr auto K2Node_CustomEvent_soundVolume = 0xaa0; // float
			constexpr auto K2Node_CustomEvent_soundPitch = 0xaa4; // float
			constexpr auto CallFunc_GetEquippedItemOfType_ReturnValue = 0xaa8; // UPrimalItem*
			constexpr auto K2Node_DynamicCast_AsPrimalItemArmor_Base_Tek_C = 0xab0; // UPrimalItemArmor_Base_Tek_C*
			constexpr auto K2Node_DynamicCast_CastSuccess = 0xab8; // bool
			constexpr auto K2Node_CustomEvent_AmountToDecreaseBy = 0xabc; // int32_t
			constexpr auto K2Node_CustomEvent_ItemSlot2 = 0xac0; // EPrimalEquipmentType
			constexpr auto CallFunc_GetEquippedItemOfType_ReturnValue2 = 0xac8; // UPrimalItem*
			constexpr auto K2Node_DynamicCast_AsPrimalItemArmor_Base_Tek_C2 = 0xad0; // UPrimalItemArmor_Base_Tek_C*
			constexpr auto K2Node_DynamicCast2_CastSuccess = 0xad8; // bool
			constexpr auto K2Node_CustomEvent_newActive = 0xad9; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue = 0xae0; // UWorld*
			constexpr auto CallFunc_GetOwnerController_ReturnValue = 0xae8; // APlayerController*
			constexpr auto CallFunc_TimeSeconds_ReturnValue = 0xaf0; // double
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController = 0xaf8; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast3_CastSuccess = 0xb00; // bool
			constexpr auto CallFunc_GetOwner_ReturnValue = 0xb08; // AActor*
			constexpr auto K2Node_DynamicCast_AsShooterCharacter = 0xb10; // AShooterCharacter*
			constexpr auto K2Node_DynamicCast4_CastSuccess = 0xb18; // bool
			constexpr auto K2Node_DynamicCast_AsShooterPlayerState = 0xb20; // AShooterPlayerState*
			constexpr auto K2Node_DynamicCast5_CastSuccess = 0xb28; // bool
			constexpr auto CallFunc_IsCooldownComplete_ReturnValue = 0xb29; // bool
		}
		// Inheritance: AController > AActor > UObject
		namespace APlayerController
		{
			constexpr auto Player = 0x4c0; // UPlayer*
			constexpr auto bShowExtendedInfoKey = 0x4c8; // char : 1
			constexpr auto AcknowledgedPawn = 0x4d0; // APawn*
			constexpr auto ControllingDirTrackInst = 0x4d8; // UInterpTrackInstDirector*
			constexpr auto MyHUD = 0x4e8; // AHUD*
			constexpr auto PlayerCameraManager = 0x4f0; // APlayerCameraManager*
			constexpr auto PlayerCameraManagerClass = 0x4f8; // APlayerCameraManager*
			constexpr auto bAutoManageActiveCameraTarget = 0x500; // bool
			constexpr auto TargetViewRotation = 0x504; // FRotator
			constexpr auto HiddenActors = 0x520; // TArray<AActor*>
			constexpr auto LastSpectatorStateSynchTime = 0x530; // float
			constexpr auto ClientCap = 0x534; // int32_t
			constexpr auto CheatManager = 0x540; // UCheatManager*
			constexpr auto CheatClass = 0x548; // UCheatManager*
			constexpr auto PlayerInput = 0x550; // UPlayerInput*
			constexpr auto ActiveForceFeedbackEffects = 0x558; // TArray<FActiveForceFeedbackEffect>
			constexpr auto bCheatPlayer = 0x5c8; // char : 1
			constexpr auto bIsAdmin = 0x5c8; // char : 1
			constexpr auto NetPlayerIndex = 0x5cc; // char
			constexpr auto PendingSwapConnection = 0x658; // UNetConnection*
			constexpr auto NetConnection = 0x660; // UNetConnection*
			constexpr auto RotationInput = 0x668; // FRotator
			constexpr auto PreviousRotationInput = 0x674; // FRotator
			constexpr auto InputYawScale = 0x680; // float
			constexpr auto InputPitchScale = 0x684; // float
			constexpr auto InputRollScale = 0x688; // float
			constexpr auto bShowMouseCursor = 0x68c; // char : 1
			constexpr auto bForceShowMouseCursor = 0x68c; // char : 1
			constexpr auto bEnableClickEvents = 0x68c; // char : 1
			constexpr auto bEnableTouchEvents = 0x68c; // char : 1
			constexpr auto bEnableMouseOverEvents = 0x68c; // char : 1
			constexpr auto bEnableTouchOverEvents = 0x68c; // char : 1
			constexpr auto bForceFeedbackEnabled = 0x68c; // char : 1
			constexpr auto DefaultMouseCursor = 0x690; // EMouseCursor
			constexpr auto CurrentMouseCursor = 0x691; // EMouseCursor
			constexpr auto DefaultClickTraceChannel = 0x692; // ECollisionChannel
			constexpr auto CurrentClickTraceChannel = 0x693; // ECollisionChannel
			constexpr auto bLockedInputUI = 0x6a4; // bool
			constexpr auto TransformComponent = 0x6a8; // USceneComponent*
			constexpr auto InactiveStateInputComponent = 0x720; // UInputComponent*
			constexpr auto CurrentTouchInterface = 0x740; // UTouchInterface*
			constexpr auto SpectatorPawn = 0x770; // ASpectatorPawn*
			constexpr auto SpawnLocation = 0x778; // FVector
			constexpr auto SeamlessTravelCount = 0x788; // uint16_t
			constexpr auto LastCompletedSeamlessTravelCount = 0x78a; // uint16_t
		}
		// Inheritance: ADino_Character_BP_Pack_C > ADino_Character_BP_C > APrimalDinoCharacter > APrimalCharacter > ACharacter > APawn > AActor > UObject
		namespace ALionfishLion_Character_BP_C
		{
			constexpr auto savedmeshoffset = 0x2310; // USceneComponent*
			constexpr auto targetingvfx = 0x2318; // UParticleSystemComponent*
			constexpr auto FullyChargedMouthSwipevfx = 0x2320; // UParticleSystemComponent*
			constexpr auto MouthSwipe = 0x2328; // UParticleSystemComponent*
			constexpr auto RFfullychargedClawTrailvfx = 0x2330; // UParticleSystemComponent*
			constexpr auto LFfullychargedClawTrailvfx = 0x2338; // UParticleSystemComponent*
			constexpr auto LFPawSwipe = 0x2340; // UParticleSystemComponent*
			constexpr auto RFPawSwipe = 0x2348; // UParticleSystemComponent*
			constexpr auto CloakParticleRibbons = 0x2350; // USkeletalMeshComponent*
			constexpr auto fullychargedcombovfxTail = 0x2358; // UParticleSystemComponent*
			constexpr auto fullychargedcombovfxLR = 0x2360; // UParticleSystemComponent*
			constexpr auto fullychargedcombovfxRR = 0x2368; // UParticleSystemComponent*
			constexpr auto fullychargedcombovfxMouth = 0x2370; // UParticleSystemComponent*
			constexpr auto fullychargedcombovfxLF = 0x2378; // UParticleSystemComponent*
			constexpr auto fullychargedcombovfxRF = 0x2380; // UParticleSystemComponent*
			constexpr auto backleftfootsocketforcloakedfootsteps = 0x2388; // USceneComponent*
			constexpr auto backrightfootsocketforcloakedfootsteps = 0x2390; // USceneComponent*
			constexpr auto frontleftfootsocketforcloakedfootsteps = 0x2398; // USceneComponent*
			constexpr auto frontrightfootsocketforcloakedfootsteps = 0x23a0; // USceneComponent*
			constexpr auto DinoCharacterStatus_BP_Lionfish_C1 = 0x23a8; // UDinoCharacterStatusComponent_BP_Lionfish_C*
			constexpr auto TeleportTargetSphere = 0x23b0; // UStaticMeshComponent*
			constexpr auto MaxComboBigSpacebarLeapParticle = 0x23b8; // UParticleSystemComponent*
			constexpr auto swimBigSpacebarLeapparticle = 0x23c0; // UParticleSystemComponent*
			constexpr auto leftarrow = 0x23c8; // UArrowComponent*
			constexpr auto visualdetectionangle_editthisone = 0x23d0; // UArrowComponent*
			constexpr auto visualdetectionsphere = 0x23d8; // USphereComponent*
			constexpr auto Scene1 = 0x23e0; // USceneComponent*
			constexpr auto arrow = 0x23e8; // UArrowComponent*
			constexpr auto visualdetectionroot = 0x23f0; // USceneComponent*
			constexpr auto cloakmesh = 0x23f8; // USkeletalMeshComponent*
			constexpr auto Timeline_2_NewTrack_0_D748498F4A1AA7E6F16257B72B92939D = 0x2400; // float
			constexpr auto Timeline_2__Direction_D748498F4A1AA7E6F16257B72B92939D = 0x2404; // ETimelineDirection
			constexpr auto Timeline_3 = 0x2408; // UTimelineComponent*
			constexpr auto Timeline_1_NewTrack_0_CB74112B4C886881FB6A5988BA0FDC0D = 0x2410; // float
			constexpr auto Timeline_1__Direction_CB74112B4C886881FB6A5988BA0FDC0D = 0x2414; // ETimelineDirection
			constexpr auto Timeline_2 = 0x2418; // UTimelineComponent*
			constexpr auto lerp_to_normal_NewTrack_0_2729944D4250B15EDF491794C7801000 = 0x2420; // float
			constexpr auto lerp_to_normal__Direction_2729944D4250B15EDF491794C7801000 = 0x2424; // ETimelineDirection
			constexpr auto lerptonormal = 0x2428; // UTimelineComponent*
			constexpr auto stealth_anim_timeline_NewTrack_0_DBCEE09841FA80925B128191582A7B0C = 0x2430; // FVector
			constexpr auto stealth_anim_timeline__Direction_DBCEE09841FA80925B128191582A7B0C = 0x243c; // ETimelineDirection
			constexpr auto stealthanimtimeline = 0x2440; // UTimelineComponent*
			constexpr auto fade_hide_dino_NewTrack_2_86A61565407DAC68CB41E4ADEDEB58DB = 0x2448; // float
			constexpr auto fade_hide_dino__Direction_86A61565407DAC68CB41E4ADEDEB58DB = 0x244c; // ETimelineDirection
			constexpr auto fadehidedino = 0x2450; // UTimelineComponent*
			constexpr auto move_between_teleport_targets_NewTrack_2_AAC13772499F8A50FE6709B35176EAA4 = 0x2458; // float
			constexpr auto move_between_teleport_targets__Direction_AAC13772499F8A50FE6709B35176EAA4 = 0x245c; // ETimelineDirection
			constexpr auto movebetweenteleporttargets = 0x2460; // UTimelineComponent*
			constexpr auto grow_teleport_target_sphere_NewTrack_1_E6751E5A44601B861AB4ECBB8C43F080 = 0x2468; // float
			constexpr auto grow_teleport_target_sphere__Direction_E6751E5A44601B861AB4ECBB8C43F080 = 0x246c; // ETimelineDirection
			constexpr auto growteleporttargetsphere = 0x2470; // UTimelineComponent*
			constexpr auto Timeline_0_NewTrack_4_831CED8E408737734828D9A3D3C55B90 = 0x2478; // float
			constexpr auto Timeline_0__Direction_831CED8E408737734828D9A3D3C55B90 = 0x247c; // ETimelineDirection
			constexpr auto Timeline_1 = 0x2480; // UTimelineComponent*
			constexpr auto TurnInPlaceInterpSpeed_chargeBigSpacebarLeap = 0x2488; // float
			constexpr auto TurnInPlaceInterpSpeedMidBigSpacebarLeap = 0x248c; // float
			constexpr auto ComboResetTimerDuration = 0x2490; // float
			constexpr auto firstmeleecomboindex = 0x2494; // int32_t
			constexpr auto Xbuttonroarattackindex = 0x2498; // int32_t
			constexpr auto solocloakattackindex = 0x249c; // int32_t
			constexpr auto CurrentComboAttackIndexOffset = 0x24a0; // int32_t
			constexpr auto hashitanenemyduringthisattack = 0x24a4; // bool
			constexpr auto comboattackindexresettimerduration = 0x24a8; // float
			constexpr auto bitemaxcombocritmultiplier = 0x24ac; // float
			constexpr auto Buff_PackMate = 0x24b0; // APrimalBuff*
			constexpr auto LastPackCallTime = 0x24b8; // double
			constexpr auto Buff_PackCallCooldown = 0x24c0; // float
			constexpr auto beginBigSpacebarLeapchargetime = 0x24c8; // double
			constexpr auto defaultBigSpacebarLeapforwardmultiplier = 0x24d0; // float
			constexpr auto maxBigSpacebarLeapchargetime = 0x24d4; // float
			constexpr auto BigSpacebarLeapAttackIndex = 0x24d8; // int32_t
			constexpr auto timeafterBigSpacebarLeapbeforeinputallowed = 0x24dc; // float
			constexpr auto BigSpacebarLeapCooldown = 0x24e0; // float
			constexpr auto ridermoverightval = 0x24e4; // float
			constexpr auto prelaunchforward = 0x24e8; // FVector
			constexpr auto RiderMoveForwardVal = 0x24f4; // float
			constexpr auto IsCurrentlyChargingBigSpacebarLeap = 0x24f8; // bool
			constexpr auto selectedlaunchvectorforBigSpacebarLeap = 0x24fc; // FVector
			constexpr auto MaterialScalarName_DissolvePercent = 0x2508; // FName
			constexpr auto CamoFadeSpeedDeathMultiplier = 0x2510; // float
			constexpr auto MaterialScalarName_CamoAmount = 0x2514; // FName
			constexpr auto RiderCamo_PlayRate = 0x251c; // float
			constexpr auto FadeQueue_Riders = 0x2520; // TArray<AShooterCharacter*>
			constexpr auto LFLCamo_PlayRate = 0x2530; // float
			constexpr auto HostCamoBuff = 0x2538; // APrimalBuff*
			constexpr auto FadeQueue_Mounted = 0x2540; // TArray<bool>
			constexpr auto AllowDinosToTargetInCamo = 0x2550; // TArray<APrimalDinoCharacter*>
			constexpr auto TimerRange_CleanAllowTargetWhenUsingCamoArray_MIN = 0x2560; // float
			constexpr auto TimerRange_CleanAllowTargetWhenUsingCamoArray_MAX = 0x2564; // float
			constexpr auto Ref_CamoRiderParticle_Enter = 0x2568; // UParticleSystem*
			constexpr auto Ref_CamoRiderParticle_Exit = 0x2570; // UParticleSystem*
			constexpr auto RiderFXSocketName = 0x2578; // FName
			constexpr auto RiderCloakParticlesScale = 0x2580; // float
			constexpr auto Debug = 0x2584; // bool
			constexpr auto iscamoactive = 0x2585; // bool
			constexpr auto Xbuttonstealthattackindex = 0x2588; // int32_t
			constexpr auto cloaktimelineplayrate = 0x258c; // float
			constexpr auto uncloaktimelineplayrate = 0x2590; // float
			constexpr auto RoarBonusesRadius = 0x2594; // float
			constexpr auto RoarBonusBuff = 0x2598; // APrimalBuff*
			constexpr auto lastroarbufftime = 0x25a0; // double
			constexpr auto RoarBuffCooldown = 0x25a8; // float
			constexpr auto lastuncloaktime = 0x25b0; // double
			constexpr auto cloakCooldown = 0x25b8; // float
			constexpr auto ThornmailDamage = 0x25bc; // float
			constexpr auto thornmailroarbuffdamagemultiplier = 0x25c0; // float
			constexpr auto thornmailpoisonbuff = 0x25c8; // APrimalBuff*
			constexpr auto StaminaCost_Camo_Start = 0x25d0; // float
			constexpr auto StaminaCost_Camoovertime = 0x25d4; // float
			constexpr auto LowStaminaMessage_Camo = 0x25d8; // FString
			constexpr auto Ref_CamoSFX_Out = 0x25e8; // USoundCue*
			constexpr auto Ref_CamoSFX_In = 0x25f0; // USoundCue*
			constexpr auto CamoIneffectivenessRangeshouldshowuptoenemieswithinthisrangebutnotimplementedyet = 0x25f8; // float
			constexpr auto aoecloakradius = 0x25fc; // float
			constexpr auto stealthvisionbuffdetectslowhealthtargets = 0x2600; // APrimalBuff*
			constexpr auto RoarCameraShake_Scale = 0x2608; // float
			constexpr auto RoarCameraShake_Speed = 0x260c; // float
			constexpr auto bShouldPlayNaturalSleepAnims = 0x2610; // bool
			constexpr auto bWakeUpWhenDamaged = 0x2611; // bool
			constexpr auto AwakeOnTouched = 0x2612; // bool
			constexpr auto IgnoreWakeOnTouchFromAllies = 0x2613; // bool
			constexpr auto ResetTorporOnWake = 0x2614; // bool
			constexpr auto AutoTorporOutAtNightStart = 0x2615; // bool
			constexpr auto bWasAlertedWhileSleeping = 0x2616; // bool
			constexpr auto bWakeUpWhenStructureBuiltNearby = 0x2617; // bool
			constexpr auto StructurePlacementDetectionRadius = 0x2618; // float
			constexpr auto bAllowSleepingOnDynamicActors = 0x261c; // bool
			constexpr auto bIsDaytime = 0x261d; // bool
			constexpr auto bPreventRiding = 0x261e; // bool
			constexpr auto bForcePreventNocturnalLogic = 0x261f; // bool
			constexpr auto NocturnalStateLock = 0x2620; // E_NocturnalStateLock
			constexpr auto currentSleepDebt = 0x2624; // float
			constexpr auto sleepDebtMultiplier_Add = 0x2628; // float
			constexpr auto sleepDebtMultiplier_Reduce = 0x262c; // float
			constexpr auto sleepDebtDeprivationLimit = 0x2630; // float
			constexpr auto sleepDebt_MAX = 0x2634; // float
			constexpr auto lastTimerServerTickTime = 0x2638; // double
			constexpr auto bPreventSleepingWithValidTarget = 0x2640; // bool
			constexpr auto bPreventSleepWhenFollowing = 0x2641; // bool
			constexpr auto BuffsToAdd_Day = 0x2648; // TArray<APrimalBuff*>
			constexpr auto BuffsToAdd_Night = 0x2658; // TArray<APrimalBuff*>
			constexpr auto lastSleepStartTime = 0x2668; // double
			constexpr auto lastValidTargetTime = 0x2670; // double
			constexpr auto WakeUpDuration = 0x2678; // float
			constexpr auto lastSleepEndTime = 0x2680; // double
			constexpr auto SleepingBuff = 0x2688; // APrimalBuff*
			constexpr auto NaturalSleepCheckDeltaTime = 0x2690; // float
			constexpr auto Ref_DinoController = 0x2698; // APrimalDinoAIController*
			constexpr auto Ref_AnimBP = 0x26a0; // UDinoBlueprintBase_RootBoneName_C*
			constexpr auto FallAsleepCooldownTime_Current = 0x26a8; // float
			constexpr auto FallAsleepCooldownTime_Normal = 0x26ac; // float
			constexpr auto SleepDuringDayMontage = 0x26b0; // UAnimMontage*
			constexpr auto NaturalSleepAnimLoopSectionName = 0x26b8; // FName
			constexpr auto NaturalWakingMontage_Relaxed = 0x26c0; // UAnimMontage*
			constexpr auto NaturalWakingMontage_Alert = 0x26c8; // UAnimMontage*
			constexpr auto Ref_StartledAnim = 0x26d0; // UAnimMontage*
			constexpr auto Ref_PoopAnim = 0x26d8; // UAnimMontage*
			constexpr auto Ref_EatAnim = 0x26e0; // UAnimMontage*
			constexpr auto FallAsleepCooldownTime_Alerted = 0x26e8; // float
			constexpr auto FallAsleepCooldownTime_PostTarget = 0x26ec; // float
			constexpr auto FallAsleepCooldownTime_PostRidden = 0x26f0; // float
			constexpr auto lastRiddenTime = 0x26f8; // double
			constexpr auto Ref_DayCycleManager = 0x2700; // ADayCycleManager*
			constexpr auto sleepingWaterSubmergedDepthThreshold = 0x2708; // float
			constexpr auto usesleepingstuff = 0x270c; // bool
			constexpr auto leftclickattackindex = 0x2710; // int32_t
			constexpr auto usessleepdebt = 0x2714; // bool
			constexpr auto cansleepwhentame = 0x2715; // bool
			constexpr auto lastTimeWasFed = 0x2718; // double
			constexpr auto tamingCooldown = 0x2720; // float
			constexpr auto tamePowerToLosePerSecondAfterCooldown = 0x2724; // float
			constexpr auto minTamePower = 0x2728; // float
			constexpr auto affinityPerFishPercent_min = 0x272c; // float
			constexpr auto affinityPerFishFixedAmount_min = 0x2730; // float
			constexpr auto dinosizethatwakesthemregardlessofangle = 0x2734; // float
			constexpr auto durationafteranimindinoistruelyawake = 0x2738; // float
			constexpr auto delaybeforewakingupotherpackdinos = 0x273c; // float
			constexpr auto distancerestrictionforwakingupnearbypackdinos = 0x2740; // float
			constexpr auto CurrentBigSpacebarLeapTarget = 0x2748; // AActor*
			constexpr auto BigSpacebarLeaptargetverticalradiusheightdistancemin = 0x2750; // float
			constexpr auto durationinwhichBigSpacebarLeaphasnocollision = 0x2754; // float
			constexpr auto angleinwhichaBigSpacebarLeaptargetmightbeselected = 0x2758; // float
			constexpr auto awaitingtargetteamset = 0x275c; // bool
			constexpr auto maxBigSpacebarLeapgrabdragweight = 0x2760; // float
			constexpr auto carrybuff = 0x2768; // APrimalBuff*
			constexpr auto BigSpacebarLeapEndTime = 0x2770; // double
			constexpr auto BigSpacebarLeapStartTime = 0x2778; // double
			constexpr auto MaxBigSpacebarLeapTime = 0x2780; // float
			constexpr auto currentBigSpacebarLeapVector = 0x2784; // FVector
			constexpr auto BigSpacebarLeapNoRiderHomingIntensity = 0x2790; // float
			constexpr auto BigSpacebarLeapTraceLength = 0x2794; // float
			constexpr auto BigSpacebarLeapTraceSize = 0x2798; // float
			constexpr auto lastsetBigSpacebarLeapvelocity = 0x279c; // float
			constexpr auto CurrentClimbingState = 0x27a0; // E_PredatorClimbingState
			constexpr auto PreviousClimbingState = 0x27a1; // E_PredatorClimbingState
			constexpr auto GravityScale_PouncingforBigSpacebarLeap = 0x27a4; // float
			constexpr auto targetTPVCameraOffsetX = 0x27a8; // float
			constexpr auto BigSpacebarLeapTPVCameraOffsetX = 0x27ac; // float
			constexpr auto Ref_HurtMontage = 0x27b0; // UAnimMontage*
			constexpr auto ClimbingDesyncOverride = 0x27b8; // float
			constexpr auto TimerInterval_Pouncing_for_BigSpacebarLeap = 0x27bc; // float
			constexpr auto StaminaCost_BigSpacebarLeap = 0x27c0; // float
			constexpr auto bAllowPlayLandingAnim = 0x27c4; // bool
			constexpr auto Ref_LandingMontage = 0x27c8; // UAnimMontage*
			constexpr auto bCanCheckAnims = 0x27d0; // bool
			constexpr auto meshTargetLocation = 0x27d4; // FVector
			constexpr auto bMeshInterpolating = 0x27e0; // bool
			constexpr auto meshInterpSpeed_location = 0x27e4; // float
			constexpr auto meshInterpSpeed_rotation = 0x27e8; // float
			constexpr auto meshTargetRotation = 0x27ec; // FRotator
			constexpr auto TPVCameraOffsetInterpSpeed = 0x27f8; // float
			constexpr auto fallbackBigSpacebarLeapvelocity = 0x27fc; // float
			constexpr auto BigSpacebarLeaptargethorizontalradiusdistancemin = 0x2800; // float
			constexpr auto NumberOfMaxBigSpacebarLeapCharges = 0x2804; // int32_t
			constexpr auto CurrentBigSpacebarLeapCharge = 0x2808; // float
			constexpr auto NoBigSpacebarLeapTargetCooldown = 0x280c; // float
			constexpr auto DurationToRemoveBigSpacebarLeapFriction = 0x2810; // float
			constexpr auto PostBigSpacebarLeapReducedFrction = 0x2814; // float
			constexpr auto isholdingBigSpacebarLeapCharge = 0x2818; // bool
			constexpr auto LowGravityTimeoutDuration = 0x281c; // float
			constexpr auto successfullygrabbedsomethingbeforelanding = 0x2820; // bool
			constexpr auto MinChargeBigSpacebarLeapStrength = 0x2824; // float
			constexpr auto MaxChargeBigSpacebarLeapStrength = 0x2828; // float
			constexpr auto ismidairBigSpacebarLeap = 0x282c; // bool
			constexpr auto HasturnedaroundOnceDuringThisBigSpacebarLeap = 0x282d; // bool
			constexpr auto refillallBigSpacebarLeapchargesatonce = 0x282e; // bool
			constexpr auto noBigSpacebarLeaptimerservermin = 0x2830; // float
			constexpr auto noBigSpacebarLeaptimerservermax = 0x2834; // float
			constexpr auto maxvelocitybeforeairfriction = 0x2838; // float
			constexpr auto airfrictionmultiplier = 0x283c; // float
			constexpr auto ChargeBigSpacebarLeapAnim = 0x2840; // UAnimMontage*
			constexpr auto ReleaseBigSpacebarLeapAnim = 0x2848; // UAnimMontage*
			constexpr auto TurnInPlaceWhenChargingBigSpacebarLeap = 0x2850; // bool
			constexpr auto BigSpacebarLeapHitDinos = 0x2858; // TArray<APrimalCharacter*>
			constexpr auto BigSpacebarLeaptargethorizontalradiusdistancemax = 0x2868; // float
			constexpr auto BigSpacebarLeaptargetverticalradiusheightdistancemax = 0x286c; // float
			constexpr auto angleinwhichaBigSpacebarLeaptargetmightbeselectedsmaller = 0x2870; // float
			constexpr auto Maxdragweightforinvisibilityanythinglargercantcamo = 0x2874; // float
			constexpr auto lastsecondaryroartime = 0x2878; // double
			constexpr auto secondaryroarcooldown = 0x2880; // float
			constexpr auto cooldownbeforesecondaryroarsbegin = 0x2884; // float
			constexpr auto secondaryroarradius = 0x2888; // float
			constexpr auto secondaryroarforwardoffset = 0x288c; // float
			constexpr auto SecondaryRoarBuff = 0x2890; // APrimalBuff*
			constexpr auto EnterCloakAnim = 0x2898; // UAnimMontage*
			constexpr auto ExitCloakAnim = 0x28a0; // UAnimMontage*
			constexpr auto RoarAnim = 0x28a8; // UAnimMontage*
			constexpr auto EncourageAnim = 0x28b0; // UAnimMontage*
			constexpr auto RoarAOE = 0x28b8; // UParticleSystem*
			constexpr auto whilechargingBigSpacebarLeapdistancetocheckforenemytarget = 0x28c0; // float
			constexpr auto extraheighttolaunchduringBigSpacebarLeapdirectionthatisntforward = 0x28c4; // FVector
			constexpr auto extraheighttolaunchduringBigSpacebarLeapdirectionthatisntforwardpow = 0x28d0; // float
			constexpr auto buildupBigSpacebarLeapcamerashake = 0x28d8; // UCameraShake*
			constexpr auto roarcamerashake = 0x28e0; // UCameraShake*
			constexpr auto releaseBigSpacebarLeapcamerashake = 0x28e8; // UCameraShake*
			constexpr auto BigSpacebarLeapspeedlinesbuff = 0x28f0; // APrimalBuff*
			constexpr auto LastTimeReleasedBigSpacebarLeap = 0x28f8; // double
			constexpr auto LastTimeEnteredOrExitedCloak = 0x2900; // double
			constexpr auto enterorexitcloakanimmovementrestrictiontime = 0x2908; // float
			constexpr auto roarmovementrestrictiontime = 0x290c; // float
			constexpr auto BigSpacebarLeapLandAnim = 0x2910; // UAnimMontage*
			constexpr auto downwardlaunchvectoronBigSpacebarLeaphit = 0x2918; // FVector
			constexpr auto conetraceBigSpacebarLeaptargethalfangle = 0x2924; // float
			constexpr auto LastAttackSwipeTime = 0x2928; // double
			constexpr auto swipeattackmovementrestrictiontime = 0x2930; // float
			constexpr auto disableallinputwhileawaitingjump = 0x2934; // bool
			constexpr auto biteattackfinishermovementrestrictiontime = 0x2938; // float
			constexpr auto LastAttackBiteFinisherTime = 0x2940; // double
			constexpr auto expendcombocountonlyuponhittingfinisherandnotonamiss = 0x2948; // bool
			constexpr auto minFOVforwhenbuildingupBigSpacebarLeap = 0x294c; // float
			constexpr auto lastsetfov = 0x2950; // float
			constexpr auto ComboResetTimerDurationatfullcombo = 0x2954; // float
			constexpr auto maxcombobitetargetdebufffemale = 0x2958; // APrimalBuff*
			constexpr auto maxcombobitetargetdebuffmale = 0x2960; // APrimalBuff*
			constexpr auto AmountOfComboMeterToAddOnMeleeHit = 0x2968; // float
			constexpr auto tempsavedfallingblendintime = 0x296c; // float
			constexpr auto normalidleanim = 0x2970; // UAnimSequenceBase*
			constexpr auto normalwalkfwdanim = 0x2978; // UAnimSequenceBase*
			constexpr auto normalwalklftanim = 0x2980; // UAnimSequenceBase*
			constexpr auto normalwalkritanim = 0x2988; // UAnimSequenceBase*
			constexpr auto stealthidleanim = 0x2990; // UAnimSequenceBase*
			constexpr auto stealthwalkfwdanim = 0x2998; // UAnimSequenceBase*
			constexpr auto stealthwalklftanim = 0x29a0; // UAnimSequenceBase*
			constexpr auto stealthwalkritanim = 0x29a8; // UAnimSequenceBase*
			constexpr auto AtMaxComboIdleanim = 0x29b0; // UAnimSequenceBase*
			constexpr auto MainCloakBuff = 0x29b8; // APrimalBuff*
			constexpr auto NOTEEditVisualDetectionSphereComponentSphereRadiustoadjustsleepdetectionradius = 0x29c0; // bool
			constexpr auto NOTEEditVisualDetectionAngleComponenttoadjustsleepdetectionAngleInFront = 0x29c1; // bool
			constexpr auto NOTECamorateandcolorsetwithinthemainbuff = 0x29c2; // bool
			constexpr auto hasinitiatednaturalsleepanim = 0x29c3; // bool
			constexpr auto closedeyeanim = 0x29c8; // UAnimMontage*
			constexpr auto pickafallbackBigSpacebarLeaptarget = 0x29d0; // bool
			constexpr auto clientsidecheckforBigSpacebarLeaptargetradius = 0x29d4; // float
			constexpr auto sleepidleanim = 0x29d8; // UAnimSequenceBase*
			constexpr auto BigSpacebarLeapanticipationupidle = 0x29e0; // UAnimMontage*
			constexpr auto BigSpacebarLeapanticipationforwardidle = 0x29e8; // UAnimMontage*
			constexpr auto BiteCameraShakeClass = 0x29f0; // UCameraShake*
			constexpr auto BiteCameraShakeScaleMaxCombo = 0x29f8; // float
			constexpr auto BiteCameraShakeScale = 0x29fc; // float
			constexpr auto BiteCameraShakePlayRateMaxCombo = 0x2a00; // float
			constexpr auto BiteCameraShakePlayRate = 0x2a04; // float
			constexpr auto MaxComboBiteBloodSpurtVFX = 0x2a08; // UParticleSystem*
			constexpr auto MeleeSwipesCameraShakeClass = 0x2a10; // UCameraShake*
			constexpr auto MeleeSwipesCameraShakeScale = 0x2a18; // float
			constexpr auto MeleeSwipesCameraShakePlayRate = 0x2a1c; // float
			constexpr auto maxcombobitebloodspurtrelativescale = 0x2a20; // FVector
			constexpr auto TimeAtTheStartOfTheMaxComboBitToStartIncreasingFOV = 0x2a2c; // float
			constexpr auto AmountOfFOVtoincreaseonstartofmaxcombobiteanim = 0x2a30; // float
			constexpr auto durationtoreturnFOVbacktonormalafterbitefinisherFOV = 0x2a34; // float
			constexpr auto nomateboostnotification = 0x2a38; // FString
			constexpr auto QueueUpmidairturnafterhittingthetarget = 0x2a48; // bool
			constexpr auto hashitBigSpacebarLeaptarget = 0x2a49; // bool
			constexpr auto speedatwhichtotraveltotheothersideofthetargetonBigSpacebarLeap = 0x2a4c; // float
			constexpr auto BigSpacebarLeapTargetLocation = 0x2a50; // FVector
			constexpr auto desiredendBigSpacebarLeaplocation = 0x2a5c; // FVector
			constexpr auto startBigSpacebarLeaplocation = 0x2a68; // FVector
			constexpr auto extradistancefromBigSpacebarLeaptargetatwhichpointtohalt = 0x2a74; // float
			constexpr auto hastargetminBigSpacebarLeapvelocity = 0x2a78; // float
			constexpr auto hastargetmaxBigSpacebarLeapvelocity = 0x2a7c; // float
			constexpr auto hastargetminBigSpacebarLeapconsidereddistanceforcalc = 0x2a80; // float
			constexpr auto hastargetmaxBigSpacebarLeapconsidereddistanceforcalc = 0x2a84; // float
			constexpr auto playturnaroundanimonce = 0x2a88; // bool
			constexpr auto impactturnaroundanim = 0x2a90; // UAnimMontage*
			constexpr auto mindistanceforbeingabletohitandgoontheothersideofthecharacter = 0x2a98; // float
			constexpr auto savedvelocityforturnaround = 0x2a9c; // FVector
			constexpr auto disablecloakwhenenteringwater = 0x2aa8; // bool
			constexpr auto canBigSpacebarLeapunderwater = 0x2aa9; // bool
			constexpr auto swimBigSpacebarLeapanimmontage = 0x2ab0; // UAnimMontage*
			constexpr auto startedBigSpacebarLeapinwater = 0x2ab8; // bool
			constexpr auto lastrotforwaterBigSpacebarLeapblending = 0x2abc; // float
			constexpr auto MinChargeBigSpacebarLeapStrengthinwater = 0x2ac0; // float
			constexpr auto MaxChargeBigSpacebarLeapStrengthinwater = 0x2ac4; // float
			constexpr auto swimBigSpacebarLeaplerpalpha = 0x2ac8; // float
			constexpr auto allowBigSpacebarLeappitchchanges = 0x2acc; // bool
			constexpr auto maxBigSpacebarLeapcooldown = 0x2ad0; // float
			constexpr auto minBigSpacebarLeapcooldown = 0x2ad4; // float
			constexpr auto pressingBigSpacebarLeapagainintheairwillturnaround = 0x2ad8; // bool
			constexpr auto hassloweddownduringBigSpacebarLeap = 0x2ad9; // bool
			constexpr auto AmountofFOVtoincreaseonBigSpacebarLeap = 0x2adc; // float
			constexpr auto timetoblendfovbackafterBigSpacebarLeap = 0x2ae0; // float
			constexpr auto clientsidesaveddelta = 0x2ae4; // float
			constexpr auto maxcomboflashingspeed = 0x2ae8; // float
			constexpr auto MaxComboCrosshairColor1 = 0x2aec; // FLinearColor
			constexpr auto MaxComboCrosshairColor2 = 0x2afc; // FLinearColor
			constexpr auto comboprogressmetercolornonmax = 0x2b0c; // FLinearColor
			constexpr auto crosshaircolorwhenyouhaveatargetnonmaxcombo = 0x2b1c; // FLinearColor
			constexpr auto crosshaircolorwhenyoudonthavetarget = 0x2b2c; // FLinearColor
			constexpr auto fullcomboBigSpacebarLeaphitmultiplier = 0x2b3c; // float
			constexpr auto savedprehitstopvelocity = 0x2b40; // FVector
			constexpr auto savedprehitstopmovementmode = 0x2b4c; // EMovementMode
			constexpr auto BigSpacebarLeaphitstop = 0x2b50; // float
			constexpr auto BigSpacebarLeaphitstopatmaxcombo = 0x2b54; // float
			constexpr auto delaybetweenmaxcomboBigSpacebarLeaphitstophits = 0x2b58; // float
			constexpr auto MaxComboBigSpacebarLeapCameraShakeClass = 0x2b60; // UCameraShake*
			constexpr auto MaxComboBigSpacebarLeapCameraShakeScale = 0x2b68; // float
			constexpr auto MaxComboBigSpacebarLeapCameraShakePlayRate = 0x2b6c; // float
			constexpr auto automaticallylandbehindtargetwhenBigSpacebarLeapforward = 0x2b70; // bool
			constexpr auto hasincreasedFOVfromBigSpacebarLeap = 0x2b71; // bool
			constexpr auto absolutelastsetfov = 0x2b74; // float
			constexpr auto BaseBigSpacebarLeapFoliageDamage = 0x2b78; // float
			constexpr auto BigSpacebarLeapFoliageDamageType = 0x2b80; // UDmgType_UseHarvest_C*
			constexpr auto SuperBigSpacebarLeapBlinkColor = 0x2b88; // FLinearColor
			constexpr auto ShowExtendedInfo = 0x2b98; // bool
			constexpr auto BigSpacebarLeapChargePercentageNeededtoDestroyFoliage = 0x2b9c; // float
			constexpr auto LastBigSpacebarLeapChargePercentage = 0x2ba0; // float
			constexpr auto BigSpacebarLeapdestroyfoliagetracelength = 0x2ba4; // float
			constexpr auto replicatedloc = 0x2ba8; // FVector
			constexpr auto positionsynclerprate = 0x2bb4; // float
			constexpr auto RecentlyMaxComboAttackedCharacters = 0x2bb8; // TArray<AActor*>
			constexpr auto lerpeddisplayedcurrentcombocountforhud = 0x2bc8; // float
			constexpr auto combocounthudlerprate = 0x2bcc; // float
			constexpr auto currentlerpstepincrement = 0x2bd0; // float
			constexpr auto incrementalcombolerp = 0x2bd4; // bool
			constexpr auto maxcombokillparticletemplate = 0x2bd8; // UParticleSystem*
			constexpr auto lionfishhistopbuff = 0x2be0; // APrimalBuff*
			constexpr auto ismidmaxcomboBigSpacebarLeaphitstop = 0x2be8; // bool
			constexpr auto initiatedmaxcomboBigSpacebarLeap = 0x2be9; // bool
			constexpr auto ismidotherhitstop = 0x2bea; // bool
			constexpr auto debugoutputstuff = 0x2beb; // bool
			constexpr auto syncedright = 0x2bec; // float
			constexpr auto BigSpacebarLeapAerialRotationRate = 0x2bf0; // float
			constexpr auto timethresholdforholdingjumptodetermineifitsajumporBigSpacebarLeap = 0x2bf4; // float
			constexpr auto timethresholdforholdingjumptodetermineifitsaheldteleport = 0x2bf8; // float
			constexpr auto TeleportAttackIndex = 0x2bfc; // int32_t
			constexpr auto canteleportunderwater = 0x2c00; // bool
			constexpr auto CurrentTeleportCharge = 0x2c04; // float
			constexpr auto TeleportCooldown = 0x2c08; // float
			constexpr auto LastTimeReleasedTeleport = 0x2c10; // double
			constexpr auto beginteleportchargetime = 0x2c18; // double
			constexpr auto IsCurrentlyChargingTeleport = 0x2c20; // bool
			constexpr auto NumberOfMaxTeleportCharges = 0x2c24; // int32_t
			constexpr auto possibleteleporttargets = 0x2c28; // TArray<AActor*>
			constexpr auto currentteleporttargetindex = 0x2c38; // int32_t
			constexpr auto teleportsphereradius = 0x2c3c; // float
			constexpr auto teleportattackrangehorizontal = 0x2c40; // float
			constexpr auto lastsavedcamerarotbeforechargingteleport = 0x2c44; // FRotator
			constexpr auto selectedteleporttargets = 0x2c50; // TArray<AActor*>
			constexpr auto savedteleporttracespherelocation = 0x2c60; // FVector
			constexpr auto timebetweenaddingnewteleporttargets = 0x2c6c; // float
			constexpr auto waitabitbeforeaddingthefirstteleporttarget = 0x2c70; // bool
			constexpr auto selectedteleporttargetssortedbydistance = 0x2c78; // TArray<AActor*>
			constexpr auto teleportattackdamageclass = 0x2c88; // UDamageType*
			constexpr auto teleportattackbasedamage = 0x2c90; // float
			constexpr auto delaybeforejumpingtonextteleporttarget = 0x2c94; // float
			constexpr auto TeleportAttackMontages = 0x2c98; // TArray<UAnimMontage*>
			constexpr auto currentteleportattackindex = 0x2ca8; // int32_t
			constexpr auto morelikeTPwolf = 0x2cac; // bool
			constexpr auto tryagainteleporttargets = 0x2cb0; // TArray<AActor*>
			constexpr auto teleportattackcamerashake = 0x2cc0; // UCameraShake*
			constexpr auto teleportattackcamerashakescale = 0x2cc8; // float
			constexpr auto teleportattackcamerashakespeed = 0x2ccc; // float
			constexpr auto dodamageonBigSpacebarLeap = 0x2cd0; // bool
			constexpr auto domaxcomboBigSpacebarLeap = 0x2cd1; // bool
			constexpr auto isthereanenemyinrangetoteleportattack = 0x2cd2; // bool
			constexpr auto teleporthudelemtitle = 0x2cd8; // FString
			constexpr auto refillallteleportchargesatonce = 0x2ce8; // bool
			constexpr auto midteleportattack = 0x2ce9; // bool
			constexpr auto TeleportCooldownMin1target = 0x2cec; // float
			constexpr auto TeleportCooldownTargetCountTimeMultipliernumberofsecaddedpertarget = 0x2cf0; // float
			constexpr auto radiustraceforblockedstationaryobjectsforteleportattack = 0x2cf4; // float
			constexpr auto setinvisibleduringteleportattacktoallbutrider = 0x2cf8; // bool
			constexpr auto movebetweentargetsplayrate = 0x2cfc; // float
			constexpr auto skipmovementbetweenteleporttargets = 0x2d00; // bool
			constexpr auto multipletargetsavailablecolor = 0x2d04; // FLinearColor
			constexpr auto singletargetavailablecolor = 0x2d14; // FLinearColor
			constexpr auto teleoncooldownalpha = 0x2d24; // float
			constexpr auto timesincestartedchargingteleport = 0x2d28; // double
			constexpr auto straightlineteleportdetectiondurationtopickupteleporttargets = 0x2d30; // float
			constexpr auto straightlineteleportdetectiondetectionradiustodetectteleporttargets = 0x2d34; // float
			constexpr auto usestraightlineteleportdetection = 0x2d38; // bool
			constexpr auto latestquickteleporttarget = 0x2d40; // APrimalCharacter*
			constexpr auto noteletargetsgreycolor = 0x2d48; // FLinearColor
			constexpr auto MinFOVForWhenBuildingUpTele = 0x2d58; // float
			constexpr auto dynamicmats = 0x2d60; // TArray<UMaterialInstanceDynamic*>
			constexpr auto isinprobablyfinalteleport = 0x2d70; // bool
			constexpr auto lastcameraloc = 0x2d74; // FVector
			constexpr auto cameralerpduringteleattack = 0x2d80; // float
			constexpr auto matinvisibilityparammax = 0x2d84; // float
			constexpr auto TeleportCooldownMaxclamp = 0x2d88; // float
			constexpr auto femaleskeletalmesh = 0x2d90; // USkeletalMesh*
			constexpr auto teleattackrecloakrate = 0x2d98; // float
			constexpr auto teleattackuncloakrate = 0x2d9c; // float
			constexpr auto timetresholdfordeterminingleftclickheldbite = 0x2da0; // float
			constexpr auto BiteFinisherAttackIndex = 0x2da4; // int32_t
			constexpr auto RegularBiteAttackIndex = 0x2da8; // int32_t
			constexpr auto AttackComboValue = 0x2dac; // float
			constexpr auto savedcombovaluefordamage = 0x2db0; // float
			constexpr auto amountofcombovaluetoaddonteleporthit = 0x2db4; // float
			constexpr auto level88teleportstunduration = 0x2db8; // float
			constexpr auto minpossibleteleportstunduration = 0x2dbc; // float
			constexpr auto hasspawnedarmor = 0x2dc0; // bool
			constexpr auto LevelScaledArmorSaddle = 0x2dc8; // UPrimalItem*
			constexpr auto ArmorRef = 0x2dd0; // UPrimalItem*
			constexpr auto MinPossibleNaturalArmorValue = 0x2dd8; // float
			constexpr auto Level88NaturalArmorValue = 0x2ddc; // float
			constexpr auto halfleglengthwhileattacking = 0x2de0; // float
			constexpr auto halfleglengthwhennotattacking = 0x2de4; // float
			constexpr auto isplayingstealthinanim = 0x2de8; // bool
			constexpr auto SleepScheduleCurve_Vector = 0x2df0; // UCurveVector*
			constexpr auto tamingfeedmultiuseindex = 0x2df8; // int32_t
			constexpr auto regularblendouttime = 0x2dfc; // float
			constexpr auto waitstringforfeeding = 0x2e00; // FString
			constexpr auto tofeedstringforfeeding = 0x2e10; // FString
			constexpr auto cannotfeedstring = 0x2e20; // FString
			constexpr auto isnotsleepingstring = 0x2e30; // FString
			constexpr auto youmustbecrouchedstring = 0x2e40; // FString
			constexpr auto mustnotbeknockedoutstring = 0x2e50; // FString
			constexpr auto hastaggrostring = 0x2e60; // FString
			constexpr auto mustnotberunningstring = 0x2e70; // FString
			constexpr auto mustnotbeswimmingstring = 0x2e80; // FString
			constexpr auto restrictionontamedsleepingtimeafterlastaction = 0x2e90; // float
			constexpr auto feedwhenasleeptotamestring = 0x2e98; // FString
			constexpr auto cloakedfootstepvfx = 0x2ea8; // UParticleSystem*
			constexpr auto issleepingstate = 0x2eb0; // int32_t
			constexpr auto teleportloc = 0x2eb4; // FVector
			constexpr auto teleportlinetracecheckchannelfortekshield = 0x2ec0; // ETraceTypeQuery
			constexpr auto locationbeforereleasingteleport = 0x2ec4; // FVector
			constexpr auto hasexitedthewatersometimeduringtheBigSpacebarLeap = 0x2ed0; // bool
			constexpr auto HelperBuff = 0x2ed8; // ABuff_LionfishLionHelper_C*
			constexpr auto wildteleattackindex = 0x2ee0; // int32_t
			constexpr auto daytimestarthour = 0x2ee4; // float
			constexpr auto nighttimestarthour = 0x2ee8; // float
			constexpr auto frequencytocheckifseen = 0x2eec; // float
			constexpr auto showdebugsleepsphere = 0x2ef0; // bool
			constexpr auto showdebugcloakedsphere = 0x2ef1; // bool
			constexpr auto increasedhieghtabovegroundtocheckforblockingstructuresforteleporting = 0x2ef4; // float
			constexpr auto trydesyncfix = 0x2ef8; // bool
			constexpr auto SavedControlRot = 0x2efc; // FRotator
			constexpr auto additionalpreventionforquicklygoingtosleepafterwakingupmildly = 0x2f08; // float
			constexpr auto intervaltocheckforvalidquickteleporttargetsonclient = 0x2f0c; // float
			constexpr auto adjusttorpiditywithsleepingmechanics = 0x2f10; // bool
			constexpr auto BigSpacebarLeapAngletocountasaverticalleap = 0x2f14; // float
			constexpr auto isverticalBigSpacebarLeap = 0x2f18; // bool
			constexpr auto upwardreleaseBigSpacebarLeapanim = 0x2f20; // UAnimMontage*
			constexpr auto verticaladditiveBigSpacebarLeapdown = 0x2f28; // UAnimMontage*
			constexpr auto verticaladditiveBigSpacebarLeapup = 0x2f30; // UAnimMontage*
			constexpr auto horizontaladditiveBigSpacebarLeapup = 0x2f38; // UAnimMontage*
			constexpr auto horizontaladditiveBigSpacebarLeapdown = 0x2f40; // UAnimMontage*
			constexpr auto VerticalBigSpacebarLeaplandanimmontage = 0x2f48; // UAnimMontage*
			constexpr auto verticalBigSpacebarLeapfallfullbodyanim = 0x2f50; // UAnimMontage*
			constexpr auto verticalvelocitythresholdtodetectleapparabola = 0x2f58; // float
			constexpr auto useseparateverticalBigSpacebarLeapanims = 0x2f5c; // bool
			constexpr auto swimminghurtanim = 0x2f60; // UAnimMontage*
			constexpr auto JumpIdleAdditiveUp = 0x2f68; // UAnimMontage*
			constexpr auto JumpIdleAdditiveDown = 0x2f70; // UAnimMontage*
			constexpr auto durationtofleeaftertaming = 0x2f78; // float
			constexpr auto forcedsleeptimeafterfleeingfromtaming = 0x2f7c; // float
			constexpr auto shouldcancelfleeingwhentargetislost = 0x2f80; // bool
			constexpr auto affinityPerFishPercent_max = 0x2f84; // float
			constexpr auto affinityPerFishFixedAmount_max = 0x2f88; // float
			constexpr auto wildteleportattackinterval = 0x2f8c; // float
			constexpr auto useseparateverticalBigSpacebarLeapfallinganim = 0x2f90; // bool
			constexpr auto BigSpacebarLeapadditivelerpblendoutwhenlanding = 0x2f94; // float
			constexpr auto useseparateverticalBigSpacebarLeaplandinganim = 0x2f98; // bool
			constexpr auto colorregiontodetermineVFXcolor = 0x2f9c; // int32_t
			constexpr auto cloakplayrate = 0x2fa0; // float
			constexpr auto uncloakplayrate = 0x2fa4; // float
			constexpr auto BloodPositionOffsetAmount = 0x2fa8; // float
			constexpr auto BigSpacebarLeaploopanimmontage = 0x2fb0; // UAnimMontage*
			constexpr auto distancecheckforgroundundertargetforflametrailvfx = 0x2fb8; // FVector
			constexpr auto FlameTrailVFXParticle = 0x2fc8; // UParticleSystem*
			constexpr auto generalmaxcombofinisherhitvfx = 0x2fd0; // UParticleSystem*
			constexpr auto generalnonmaxcombofinisherhitvfx = 0x2fd8; // UParticleSystem*
			constexpr auto singlefireunderwaterBigSpacebarLeapvfx = 0x2fe0; // UParticleSystem*
			constexpr auto BigSpacebarLeapintowatersplashvfx = 0x2fe8; // UParticleSystem*
			constexpr auto singlefiregroundbigspacebarleapparticle = 0x2ff0; // UParticleSystem*
			constexpr auto MaxPossibleTeleportStunDuration = 0x2ff8; // float
			constexpr auto teleporttargetcountforminstunduration = 0x2ffc; // int32_t
			constexpr auto teleporttargetcountformaxstunduration = 0x3000; // int32_t
			constexpr auto CountofTeleportTargetsUponRelease = 0x3004; // int32_t
			constexpr auto useafilledbasketstring = 0x3008; // FString
			constexpr auto fishsizerequirementtogivelargeaffinityamount = 0x3018; // float
			constexpr auto cloakedwalkspeedmultiplier = 0x301c; // float
			constexpr auto debuglastlocation = 0x3020; // FVector
			constexpr auto isholdingspacebar = 0x302c; // bool
			constexpr auto timeoutcheckratefordetectingifspacebarisstillheldforbigjump = 0x3030; // float
			constexpr auto lastrequestingcontroller = 0x3038; // APlayerController*
			constexpr auto WildInventoryClass = 0x3040; // UObject*
			constexpr auto clientholdingcrouchbutton = 0x3048; // bool
			constexpr auto durationtoshowtargetingindicator = 0x304c; // float
			constexpr auto issolocamoactive = 0x3050; // bool
			constexpr auto clientsidedetectedgroupcloakon = 0x3051; // bool
			constexpr auto clientsidedetectedsolocloakon = 0x3052; // bool
			constexpr auto intervaltodecreasecloakstamina = 0x3054; // float
			constexpr auto AquaticBuffClass = 0x3058; // ABuff_Base_C*
			constexpr auto clampedmaxsizeoffishformaximumbonus = 0x3060; // float
			constexpr auto Maxnumberofteleporttargetsallowed = 0x3064; // int32_t
			constexpr auto debugcheatfeedsmallfish = 0x3068; // int32_t
			constexpr auto candebugcheatfeed = 0x306c; // bool
			constexpr auto debugcheatfeedlargefish = 0x3070; // int32_t
			constexpr auto debugcheatfeed10fish = 0x3074; // int32_t
			constexpr auto intervaltocheckifnearbossdino = 0x3078; // float
			constexpr auto radiustocheckifnearbossdino = 0x307c; // float
			constexpr auto onaddingcloakcheckforbossdinoanddontremovetargetingdinos = 0x3080; // bool
			constexpr auto savedcontrolrotbeforeteleport = 0x3084; // FRotator
			constexpr auto landinganimIKhalfleglength = 0x3090; // float
			constexpr auto lvl88feedeffectivenessmultiplier = 0x3094; // float
			constexpr auto ismidstealthanim = 0x3098; // bool
			constexpr auto nextwakupanimshouldbestartle = 0x3099; // bool
			constexpr auto durationtolerpcameraduringjump = 0x309c; // float
			constexpr auto cameralerpduringjump = 0x30a0; // float
			constexpr auto lastsetloc = 0x30a4; // FVector
			constexpr auto jumpinginterpspeed = 0x30b0; // float
			constexpr auto jumplerptonormalalpha = 0x30b4; // float
			constexpr auto jumplerp2 = 0x30b8; // float
			constexpr auto TeleportAttackMontages_Swim = 0x30c0; // TArray<UAnimMontage*>
			constexpr auto awaitingrealjump = 0x30d0; // bool
			constexpr auto localhasrider = 0x30d1; // bool
			constexpr auto isbeingcontrolledoutsideofrider = 0x30d2; // bool
			constexpr auto prejumploc = 0x30d4; // FVector
			constexpr auto prejumpview = 0x30e0; // FVector
			constexpr auto jumpviewlerp = 0x30ec; // float
			constexpr auto SwimmingStaminaRegenInterval = 0x30f0; // float
			constexpr auto LastTimeRegenedSwimmingStamina = 0x30f8; // double
			constexpr auto SwimmingStaminaRegenAmount = 0x3100; // float
			constexpr auto ChargeBigSpacebarLeapAnim_Swimming = 0x3108; // UAnimMontage*
			constexpr auto DashLoopSoundComp = 0x3110; // UAudioComponent*
			constexpr auto DashLoopSound = 0x3118; // USoundBase*
			constexpr auto CheatsEnabled = 0x3120; // bool
			constexpr auto graceperiodtodisallowaffinityresetaftersleep = 0x3124; // float
			constexpr auto spawningfish = 0x3128; // APrimalDinoCharacter*
			constexpr auto PCfordelayfishowner = 0x3130; // AShooterPlayerController*
			constexpr auto currenttryattempts = 0x3138; // int32_t
			constexpr auto allowedretryattempts = 0x313c; // int32_t
			constexpr auto Localizefishistoosmallstring = 0x3140; // FString
			constexpr auto preventdamagemidteleport = 0x3150; // bool
			constexpr auto slowdownmidleap = 0x3151; // bool
			constexpr auto FCharacterString = 0x3158; // FString
			constexpr auto TCharacterString = 0x3168; // FString
			constexpr auto teleportattackrangevertical = 0x3178; // float
			constexpr auto Minfishsizerequirementroundedjustfordisplay = 0x317c; // float
			constexpr auto Minfishsizerequirement = 0x3180; // float
			constexpr auto CallFunc_Get_Teleport_Character_Octree_Overlap_Radius_ReturnValue = 0x3184; // float
			constexpr auto K2Node_CustomEvent_target_location = 0x3188; // FVector
			constexpr auto K2Node_CustomEvent_Hitstop_Time = 0x3194; // float
			constexpr auto K2Node_CustomEvent_Big_Spacebar_Leap_Strength_Percentage = 0x3198; // float
			constexpr auto CallFunc_Array_Length_ReturnValue = 0x319c; // int32_t
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue = 0x31a0; // double
			constexpr auto CallFunc_Conv_IntToString_ReturnValue = 0x31a8; // FString
			constexpr auto CallFunc_Concat_StrStr_ReturnValue = 0x31b8; // FString
			constexpr auto K2Node_CustomEvent_hidden = 0x31c8; // bool
			constexpr auto K2Node_CustomEvent_playRate = 0x31cc; // float
			constexpr auto K2Node_CustomEvent_dont_reverse_from_end = 0x31d0; // bool
			constexpr auto CallFunc_Conv_BoolToString_ReturnValue = 0x31d8; // FString
			constexpr auto CallFunc_Concat_StrStr_ReturnValue2 = 0x31e8; // FString
			constexpr auto CallFunc_Conv_FloatToString_ReturnValue = 0x31f8; // FString
			constexpr auto CallFunc_Concat_StrStr_ReturnValue3 = 0x3208; // FString
			constexpr auto CallFunc_Concat_StrStr_ReturnValue4 = 0x3218; // FString
			constexpr auto CallFunc_Conv_BoolToString_ReturnValue2 = 0x3228; // FString
			constexpr auto CallFunc_Concat_StrStr_ReturnValue5 = 0x3238; // FString
			constexpr auto CallFunc_Concat_StrStr_ReturnValue6 = 0x3248; // FString
			constexpr auto CallFunc_Concat_StrStr_ReturnValue7 = 0x3258; // FString
			constexpr auto CallFunc_IsRunningOnServer_OutNetworkMode = 0x3268; // ENetworkModeResult
			constexpr auto CallFunc_SelectFloat_ReturnValue = 0x326c; // float
			constexpr auto K2Node_SwitchEnum_CmpSuccess = 0x3270; // bool
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue = 0x3274; // float
			constexpr auto CallFunc_MakeVector_ReturnValue = 0x3278; // FVector
			constexpr auto CallFunc_Concat_StrStr_ReturnValue8 = 0x3288; // FString
			constexpr auto CallFunc_Add_IntInt_ReturnValue = 0x3298; // int32_t
			constexpr auto CallFunc_Array_IsValidIndex_ReturnValue = 0x329c; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue = 0x329d; // bool
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue = 0x32a0; // float
			constexpr auto CallFunc_IsRunningOnServer_OutNetworkMode2 = 0x32a4; // ENetworkModeResult
			constexpr auto K2Node_SwitchEnum2_CmpSuccess = 0x32a5; // bool
			constexpr auto CallFunc_GetCurrentMontage_ReturnValue = 0x32a8; // UAnimMontage*
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue = 0x32b0; // float
			constexpr auto CallFunc_EqualEqual_ObjectObject_ReturnValue = 0x32b4; // bool
			constexpr auto CallFunc_Subtract_FloatFloat_ReturnValue = 0x32b8; // float
			constexpr auto CallFunc_IsRunningOnServer_OutNetworkMode3 = 0x32bc; // ENetworkModeResult
			constexpr auto K2Node_SwitchEnum3_CmpSuccess = 0x32bd; // bool
			constexpr auto CallFunc_IsRunningOnServer_OutNetworkMode4 = 0x32be; // ENetworkModeResult
			constexpr auto K2Node_SwitchEnum4_CmpSuccess = 0x32bf; // bool
			constexpr auto K2Node_CustomEvent_is_falling_asleep = 0x32c0; // bool
			constexpr auto K2Node_CustomEvent_is_alerted = 0x32c1; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue2 = 0x32c4; // float
			constexpr auto CallFunc_IsRunningOnServer_OutNetworkMode5 = 0x32c8; // ENetworkModeResult
			constexpr auto K2Node_SwitchEnum5_CmpSuccess = 0x32c9; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue = 0x32d0; // UWorld*
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue = 0x32d8; // FVector
			constexpr auto CallFunc_IsPrimalCharSwimming_ReturnValue = 0x32e4; // bool
			constexpr auto CallFunc_IsPointUnderwater_ReturnValue = 0x32e5; // bool
			constexpr auto CallFunc_Is_Close_To_Ground_result = 0x32e6; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue = 0x32e7; // bool
			constexpr auto K2Node_Select_ReturnValue = 0x32e8; // EMovementMode
			constexpr auto K2Node_Select_CmpSuccess = 0x32e9; // bool
			constexpr auto K2Node_Select_ReturnValue2 = 0x32ea; // EMovementMode
			constexpr auto K2Node_Select2_CmpSuccess = 0x32eb; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue2 = 0x32ec; // FVector
			constexpr auto CallFunc_GetAnimInstance_ReturnValue = 0x32f8; // UAnimInstance*
			constexpr auto CallFunc_NotEqual_VectorVector_ReturnValue = 0x3300; // bool
			constexpr auto K2Node_DynamicCast_AsLionfishLion_AnimBlueprint_Swimmable_C = 0x3308; // ULionfishLion_AnimBlueprint_Swimmable_C*
			constexpr auto K2Node_DynamicCast_CastSuccess = 0x3310; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue = 0x3311; // bool
			constexpr auto CallFunc_IsWildSlow_ReturnValue = 0x3312; // bool
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue = 0x3314; // FRotator
			constexpr auto CallFunc_K2_GetRootComponent_ReturnValue = 0x3320; // USceneComponent*
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue2 = 0x3328; // FRotator
			constexpr auto CallFunc_K2_GetRootComponent_ReturnValue2 = 0x3338; // USceneComponent*
			constexpr auto CallFunc_K2_GetRootComponent_ReturnValue3 = 0x3340; // USceneComponent*
			constexpr auto CallFunc_IsWildSlow_ReturnValue2 = 0x3348; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue3 = 0x334c; // float
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue = 0x3350; // FVector
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue = 0x335c; // FRotator
			constexpr auto CallFunc_Array_Length_ReturnValue2 = 0x3368; // int32_t
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue2 = 0x336c; // FVector
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue2 = 0x3378; // FRotator
			constexpr auto K2Node_CustomEvent_combo_value = 0x3384; // float
			constexpr auto K2Node_CustomEvent_target_loc = 0x3388; // FVector
			constexpr auto K2Node_CustomEvent_combo_count = 0x3394; // float
			constexpr auto CallFunc_EqualEqual_VectorVector_ReturnValue = 0x3398; // bool
			constexpr auto CallFunc_GreaterEqual_FloatFloat_ReturnValue = 0x3399; // bool
			constexpr auto CallFunc_EqualEqual_VectorVector_ReturnValue2 = 0x339a; // bool
			constexpr auto CallFunc_EqualEqual_FloatFloat_ReturnValue = 0x339b; // bool
			constexpr auto CallFunc_GreaterEqual_FloatFloat_ReturnValue2 = 0x339c; // bool
			constexpr auto CallFunc_SelectFloat_ReturnValue2 = 0x33a0; // float
			constexpr auto CallFunc_SelectFloat_ReturnValue3 = 0x33a4; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue2 = 0x33a8; // float
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue3 = 0x33ac; // FVector
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue4 = 0x33b8; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue = 0x33c4; // FVector
			constexpr auto CallFunc_Divide_VectorFloat_ReturnValue = 0x33d0; // FVector
			constexpr auto CallFunc_Concat_StrStr_ReturnValue9 = 0x33e0; // FString
			constexpr auto CallFunc_SelectVector_ReturnValue = 0x33f0; // FVector
			constexpr auto CallFunc_Concat_StrStr_ReturnValue10 = 0x3400; // FString
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue5 = 0x3410; // FVector
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue = 0x341c; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue2 = 0x3428; // FVector
			constexpr auto CallFunc_Normal_ReturnValue = 0x3434; // FVector
			constexpr auto CallFunc_Divide_VectorFloat_ReturnValue2 = 0x3440; // FVector
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue6 = 0x344c; // FVector
			constexpr auto CallFunc_VLerp_ReturnValue = 0x3458; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue = 0x3464; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue3 = 0x3470; // FVector
			constexpr auto CallFunc_SelectVector_ReturnValue2 = 0x347c; // FVector
			constexpr auto CallFunc_SelectFloat_ReturnValue4 = 0x3488; // float
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue = 0x3490; // UParticleSystemComponent*
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue3 = 0x3498; // FRotator
			constexpr auto CallFunc_MakeVector_ReturnValue2 = 0x34a4; // FVector
			constexpr auto CallFunc_K2_GetWorld_ReturnValue2 = 0x34b0; // UWorld*
			constexpr auto CallFunc_K2_GetWorld_ReturnValue3 = 0x34b8; // UWorld*
			constexpr auto CallFunc_MakeVector_ReturnValue3 = 0x34c0; // FVector
			constexpr auto CallFunc_K2_GetWorld_ReturnValue4 = 0x34d0; // UWorld*
			constexpr auto CallFunc_K2_GetWorld_ReturnValue5 = 0x34d8; // UWorld*
			constexpr auto CallFunc_Array_Length_ReturnValue3 = 0x34e0; // int32_t
			constexpr auto CallFunc_Greater_IntInt_ReturnValue = 0x34e4; // bool
			constexpr auto CallFunc_Greater_IntInt_ReturnValue2 = 0x34e5; // bool
			constexpr auto K2Node_CustomEvent_Synced_Right = 0x34e8; // float
			constexpr auto CallFunc_MakeVector_ReturnValue4 = 0x34ec; // FVector
			constexpr auto CallFunc_K2_GetWorld_ReturnValue6 = 0x34f8; // UWorld*
			constexpr auto CallFunc_K2_GetWorld_ReturnValue7 = 0x3500; // UWorld*
			constexpr auto CallFunc_Get_Default_Dino_ref = 0x3508; // ALionfishLion_Character_BP_C*
			constexpr auto K2Node_CustomEvent_is_max_combo_Teleport = 0x3510; // bool
			constexpr auto K2Node_CustomEvent_Is_Quick_Tap_Teleport2 = 0x3511; // bool
			constexpr auto CallFunc_NotEqual_ObjectObject_ReturnValue = 0x3512; // bool
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue2 = 0x3518; // UParticleSystemComponent*
			constexpr auto CallFunc_NotEqual_ObjectObject_ReturnValue2 = 0x3520; // bool
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue3 = 0x3528; // UParticleSystemComponent*
			constexpr auto K2Node_CustomEvent_NewState = 0x3530; // E_PredatorClimbingState
			constexpr auto CallFunc_Array_Get_Item = 0x3538; // AActor*
			constexpr auto CallFunc_IsValid_ReturnValue = 0x3540; // bool
			constexpr auto K2Node_CustomEvent_Buff = 0x3548; // APrimalBuff*
			constexpr auto CallFunc_K2_GetComponentScale_ReturnValue = 0x3550; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue2 = 0x355c; // bool
			constexpr auto CallFunc_BreakVector_X = 0x3560; // float
			constexpr auto CallFunc_BreakVector_Y = 0x3564; // float
			constexpr auto CallFunc_BreakVector_Z = 0x3568; // float
			constexpr auto CallFunc_Divide_FloatFloat_ReturnValue = 0x356c; // float
			constexpr auto CallFunc_Divide_FloatFloat_ReturnValue2 = 0x3570; // float
			constexpr auto CallFunc_Divide_FloatFloat_ReturnValue3 = 0x3574; // float
			constexpr auto K2Node_DynamicCast_AsBuff_RestingDino_LionfishLion_C = 0x3578; // ABuff_RestingDino_LionfishLion_C*
			constexpr auto K2Node_DynamicCast2_CastSuccess = 0x3580; // bool
			constexpr auto CallFunc_MakeVector_ReturnValue5 = 0x3584; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue3 = 0x3590; // bool
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue2 = 0x3594; // FVector
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue = 0x35a0; // bool
			constexpr auto CallFunc_K2_GetComponentToWorld_ReturnValue = 0x35b0; // FTransform
			constexpr auto CallFunc_BreakTransform_Location = 0x35e0; // FVector
			constexpr auto CallFunc_BreakTransform_Rotation = 0x35ec; // FRotator
			constexpr auto CallFunc_BreakTransform_Scale = 0x35f8; // FVector
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue2 = 0x3604; // bool
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue3 = 0x3605; // bool
			constexpr auto CallFunc_IsWildSlow_ReturnValue3 = 0x3606; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue2 = 0x3608; // double
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue3 = 0x3610; // double
			constexpr auto CallFunc_BPIsTamed_ReturnValue = 0x3618; // bool
			constexpr auto K2Node_InputAxisEvent_AxisValue = 0x361c; // float
			constexpr auto CallFunc_Less_FloatFloat_ReturnValue = 0x3620; // bool
			constexpr auto K2Node_ComponentBoundEvent_OtherActor = 0x3628; // AActor*
			constexpr auto K2Node_ComponentBoundEvent_OtherComp = 0x3630; // UPrimitiveComponent*
			constexpr auto K2Node_ComponentBoundEvent_NormalImpulse = 0x3638; // FVector
			constexpr auto K2Node_ComponentBoundEvent_Hit = 0x3648; // FHitResult
			constexpr auto K2Node_DynamicCast_AsPrimalCharacter = 0x36d0; // APrimalCharacter*
			constexpr auto K2Node_DynamicCast3_CastSuccess = 0x36d8; // bool
			constexpr auto K2Node_CustomEvent_Delay = 0x36dc; // float
			constexpr auto K2Node_CustomEvent_delay2 = 0x36e0; // float
			constexpr auto CallFunc_K2_IsTimerActive_ReturnValue = 0x36e4; // bool
			constexpr auto K2Node_CustomEvent_bIsActive = 0x36e5; // bool
			constexpr auto CallFunc_GetBuff_ReturnValue = 0x36e8; // APrimalBuff*
			constexpr auto K2Node_DynamicCast_AsBuff_LFLAqua_C = 0x36f0; // ABuff_LFLAqua_C*
			constexpr auto K2Node_DynamicCast4_CastSuccess = 0x36f8; // bool
			constexpr auto CallFunc_ResetBuffStart_ReturnValue = 0x36f9; // bool
			constexpr auto K2Node_CustomEvent_NewParam = 0x36fc; // FVector
			constexpr auto K2Node_MakeArray_Array = 0x3708; // TArray<AActor*>
			constexpr auto CallFunc_CapsuleTraceSingle_NEW_OutHit = 0x3718; // FHitResult
			constexpr auto CallFunc_CapsuleTraceSingle_NEW_ReturnValue = 0x37a0; // bool
			constexpr auto CallFunc_GetWorldLocation_ReturnValue = 0x37a4; // FVector
			constexpr auto CallFunc_GetWorldLocation_ReturnValue2 = 0x37b0; // FVector
			constexpr auto CallFunc_BreakVector_X2 = 0x37bc; // float
			constexpr auto CallFunc_BreakVector_Y2 = 0x37c0; // float
			constexpr auto CallFunc_BreakVector_Z2 = 0x37c4; // float
			constexpr auto CallFunc_BreakVector_X3 = 0x37c8; // float
			constexpr auto CallFunc_BreakVector_Y3 = 0x37cc; // float
			constexpr auto CallFunc_BreakVector_Z3 = 0x37d0; // float
			constexpr auto CallFunc_Lerp_ReturnValue = 0x37d4; // float
			constexpr auto CallFunc_BreakVector_X4 = 0x37d8; // float
			constexpr auto CallFunc_BreakVector_Y4 = 0x37dc; // float
			constexpr auto CallFunc_BreakVector_Z4 = 0x37e0; // float
			constexpr auto CallFunc_MakeVector_ReturnValue6 = 0x37e4; // FVector
			constexpr auto CallFunc_VLerp_ReturnValue2 = 0x37f0; // FVector
			constexpr auto K2Node_CustomEvent_start_loc = 0x37fc; // FVector
			constexpr auto K2Node_CustomEvent_end_loc = 0x3808; // FVector
			constexpr auto K2Node_CustomEvent_probably_final_teleport = 0x3814; // bool
			constexpr auto K2Node_CustomEvent_turn_around = 0x3815; // bool
			constexpr auto CallFunc_GetWorldLocation_ReturnValue3 = 0x3818; // FVector
			constexpr auto CallFunc_K2_TeleportTo_ReturnValue = 0x3824; // bool
			constexpr auto CallFunc_Add_VectorVector_ReturnValue4 = 0x3828; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue5 = 0x3834; // FVector
			constexpr auto CallFunc_GetGroundLocation_theGroundLoc = 0x3840; // FVector
			constexpr auto CallFunc_GetGroundLocation_ReturnValue = 0x384c; // bool
			constexpr auto CallFunc_GetGroundLocation_theGroundLoc2 = 0x3850; // FVector
			constexpr auto CallFunc_GetGroundLocation_ReturnValue2 = 0x385c; // bool
			constexpr auto CallFunc_Add_VectorVector_ReturnValue6 = 0x3860; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue7 = 0x386c; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue8 = 0x3878; // FVector
			constexpr auto CallFunc_VTraceSingleBP_OutHit = 0x3888; // FHitResult
			constexpr auto CallFunc_VTraceSingleBP_ReturnValue = 0x3910; // bool
			constexpr auto CallFunc_VTraceSingleBP_OutHit2 = 0x3918; // FHitResult
			constexpr auto CallFunc_VTraceSingleBP_ReturnValue2 = 0x39a0; // bool
			constexpr auto CallFunc_BreakHitResult_Location = 0x39a4; // FVector
			constexpr auto CallFunc_BreakHitResult_Normal = 0x39b0; // FVector
			constexpr auto CallFunc_BreakHitResult_ImpactPoint = 0x39bc; // FVector
			constexpr auto CallFunc_BreakHitResult_ImpactNormal = 0x39c8; // FVector
			constexpr auto CallFunc_BreakHitResult_PhysMat = 0x39d8; // UPhysicalMaterial*
			constexpr auto CallFunc_BreakHitResult_HitActor = 0x39e0; // AActor*
			constexpr auto CallFunc_BreakHitResult_HitComponent = 0x39e8; // UPrimitiveComponent*
			constexpr auto CallFunc_BreakHitResult_HitBoneName = 0x39f0; // FName
			constexpr auto CallFunc_BreakHitResult_HitItem = 0x39f8; // int32_t
			constexpr auto CallFunc_BreakHitResult_BlockingHit = 0x39fc; // bool
			constexpr auto CallFunc_BreakHitResult_Location2 = 0x3a00; // FVector
			constexpr auto CallFunc_BreakHitResult_Normal2 = 0x3a0c; // FVector
			constexpr auto CallFunc_BreakHitResult_ImpactPoint2 = 0x3a18; // FVector
			constexpr auto CallFunc_BreakHitResult_ImpactNormal2 = 0x3a24; // FVector
			constexpr auto CallFunc_BreakHitResult_PhysMat2 = 0x3a30; // UPhysicalMaterial*
			constexpr auto CallFunc_BreakHitResult_HitActor2 = 0x3a38; // AActor*
			constexpr auto CallFunc_BreakHitResult_HitComponent2 = 0x3a40; // UPrimitiveComponent*
			constexpr auto CallFunc_BreakHitResult_HitBoneName2 = 0x3a48; // FName
			constexpr auto CallFunc_BreakHitResult_HitItem2 = 0x3a50; // int32_t
			constexpr auto CallFunc_BreakHitResult_BlockingHit2 = 0x3a54; // bool
			constexpr auto CallFunc_Add_VectorVector_ReturnValue9 = 0x3a58; // FVector
			constexpr auto CallFunc_GetGroundLocation_theGroundLoc3 = 0x3a64; // FVector
			constexpr auto CallFunc_GetGroundLocation_ReturnValue3 = 0x3a70; // bool
			constexpr auto CallFunc_VTraceSingleBP_OutHit3 = 0x3a78; // FHitResult
			constexpr auto CallFunc_VTraceSingleBP_ReturnValue3 = 0x3b00; // bool
			constexpr auto CallFunc_BreakHitResult_Location3 = 0x3b04; // FVector
			constexpr auto CallFunc_BreakHitResult_Normal3 = 0x3b10; // FVector
			constexpr auto CallFunc_BreakHitResult_ImpactPoint3 = 0x3b1c; // FVector
			constexpr auto CallFunc_BreakHitResult_ImpactNormal3 = 0x3b28; // FVector
			constexpr auto CallFunc_BreakHitResult_PhysMat3 = 0x3b38; // UPhysicalMaterial*
			constexpr auto CallFunc_BreakHitResult_HitActor3 = 0x3b40; // AActor*
			constexpr auto CallFunc_BreakHitResult_HitComponent3 = 0x3b48; // UPrimitiveComponent*
			constexpr auto CallFunc_BreakHitResult_HitBoneName3 = 0x3b50; // FName
			constexpr auto CallFunc_BreakHitResult_HitItem3 = 0x3b58; // int32_t
			constexpr auto CallFunc_BreakHitResult_BlockingHit3 = 0x3b5c; // bool
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue4 = 0x3b60; // UParticleSystemComponent*
			constexpr auto CallFunc_GetOwnerController_ReturnValue = 0x3b68; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue4 = 0x3b70; // bool
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController = 0x3b78; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast5_CastSuccess = 0x3b80; // bool
			constexpr auto CallFunc_IsValid_ReturnValue5 = 0x3b81; // bool
			constexpr auto CallFunc_IsValid_ReturnValue6 = 0x3b82; // bool
			constexpr auto CallFunc_GetWorldCameraShakeScale_ReturnValue = 0x3b84; // float
			constexpr auto CallFunc_MapRange_ReturnValue = 0x3b88; // float
			constexpr auto CallFunc_FClamp_ReturnValue = 0x3b8c; // float
			constexpr auto CallFunc_GetOwnerController_ReturnValue2 = 0x3b90; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue7 = 0x3b98; // bool
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController2 = 0x3ba0; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast6_CastSuccess = 0x3ba8; // bool
			constexpr auto CallFunc_IsValid_ReturnValue8 = 0x3ba9; // bool
			constexpr auto CallFunc_IsValid_ReturnValue9 = 0x3baa; // bool
			constexpr auto CallFunc_GetWorldCameraShakeScale_ReturnValue2 = 0x3bac; // float
			constexpr auto CallFunc_MapRange_ReturnValue2 = 0x3bb0; // float
			constexpr auto CallFunc_FClamp_ReturnValue2 = 0x3bb4; // float
			constexpr auto CallFunc_RandomFloatInRange_ReturnValue = 0x3bb8; // float
			constexpr auto CallFunc_GetOwnerController_ReturnValue3 = 0x3bc0; // APlayerController*
			constexpr auto CallFunc_Array_Length_ReturnValue4 = 0x3bc8; // int32_t
			constexpr auto CallFunc_IsValid_ReturnValue10 = 0x3bcc; // bool
			constexpr auto CallFunc_Greater_IntInt_ReturnValue3 = 0x3bcd; // bool
			constexpr auto CallFunc_GetOwnerController_ReturnValue4 = 0x3bd0; // APlayerController*
			constexpr auto CallFunc_GetOwnerController_ReturnValue5 = 0x3bd8; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue11 = 0x3be0; // bool
			constexpr auto CallFunc_IsValid_ReturnValue12 = 0x3be1; // bool
			constexpr auto CallFunc_GetOwnerController_ReturnValue6 = 0x3be8; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue13 = 0x3bf0; // bool
			constexpr auto K2Node_CustomEvent_New_Time = 0x3bf4; // float
			constexpr auto CallFunc_Add_VectorVector_ReturnValue10 = 0x3bf8; // FVector
			constexpr auto CallFunc_BreakVector_X5 = 0x3c04; // float
			constexpr auto CallFunc_BreakVector_Y5 = 0x3c08; // float
			constexpr auto CallFunc_BreakVector_Z5 = 0x3c0c; // float
			constexpr auto CallFunc_GetWorldLocation_ReturnValue4 = 0x3c10; // FVector
			constexpr auto CallFunc_BreakVector_X6 = 0x3c1c; // float
			constexpr auto CallFunc_BreakVector_Y6 = 0x3c20; // float
			constexpr auto CallFunc_BreakVector_Z6 = 0x3c24; // float
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue4 = 0x3c28; // float
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue5 = 0x3c2c; // float
			constexpr auto CallFunc_EqualEqual_ObjectObject_ReturnValue2 = 0x3c30; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue8 = 0x3c38; // UWorld*
			constexpr auto CallFunc_IsPrimalCharSwimming_ReturnValue2 = 0x3c40; // bool
			constexpr auto CallFunc_NotEqual_ObjectObject_ReturnValue3 = 0x3c41; // bool
			constexpr auto CallFunc_IsPrimalCharSwimming_ReturnValue3 = 0x3c42; // bool
			constexpr auto CallFunc_GetGameMode_ReturnValue = 0x3c48; // AGameMode*
			constexpr auto K2Node_DynamicCast_AsShooterGameMode = 0x3c50; // AShooterGameMode*
			constexpr auto K2Node_DynamicCast7_CastSuccess = 0x3c58; // bool
			constexpr auto K2Node_CustomEvent_EventCustomName = 0x3c5c; // FName
			constexpr auto K2Node_CustomEvent_EventCustomString = 0x3c68; // FString
			constexpr auto K2Node_CustomEvent_InstigatorActor = 0x3c78; // AActor*
			constexpr auto K2Node_CustomEvent_is_max_combo_Big_Spacebar_Leap = 0x3c80; // bool
			constexpr auto CallFunc_Split_LeftS = 0x3c88; // FString
			constexpr auto CallFunc_Split_RightS = 0x3c98; // FString
			constexpr auto CallFunc_Split_ReturnValue = 0x3ca8; // bool
			constexpr auto CallFunc_EqualEqual_StrStr_ReturnValue = 0x3ca9; // bool
			constexpr auto CallFunc_EqualEqual_StrStr_ReturnValue2 = 0x3caa; // bool
			constexpr auto CallFunc_EqualEqual_NameName_ReturnValue = 0x3cab; // bool
			constexpr auto CallFunc_Is_Mid_Big_Spacebar_Leap_is_mid_Big_Spacebar_Leap = 0x3cac; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue2 = 0x3cad; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue7 = 0x3cb0; // FVector
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue = 0x3cbc; // bool
			constexpr auto CallFunc_SelectVector_ReturnValue3 = 0x3cc0; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue11 = 0x3ccc; // FVector
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue3 = 0x3cd8; // float
			constexpr auto K2Node_CustomEvent_new_yaw = 0x3cdc; // float
			constexpr auto K2Node_CustomEvent_prev_yaw = 0x3ce0; // float
			constexpr auto CallFunc_K2_GetActorRotation_ReturnValue4 = 0x3ce4; // FRotator
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue4 = 0x3cf0; // float
			constexpr auto CallFunc_BreakRot_Pitch = 0x3cf4; // float
			constexpr auto CallFunc_BreakRot_Yaw = 0x3cf8; // float
			constexpr auto CallFunc_BreakRot_Roll = 0x3cfc; // float
			constexpr auto CallFunc_GetOwnerController_ReturnValue7 = 0x3d00; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue14 = 0x3d08; // bool
			constexpr auto CallFunc_K2_GetPawn_ReturnValue = 0x3d10; // APawn*
			constexpr auto K2Node_DynamicCast_AsPrimalCharacter2 = 0x3d18; // APrimalCharacter*
			constexpr auto K2Node_DynamicCast8_CastSuccess = 0x3d20; // bool
			constexpr auto CallFunc_IsLocallyControlled_ReturnValue = 0x3d21; // bool
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue4 = 0x3d28; // double
			constexpr auto CallFunc_GetSocketLocation_ReturnValue = 0x3d30; // FVector
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue4 = 0x3d3c; // bool
			constexpr auto CallFunc_SpawnEmitterAttached_ReturnValue = 0x3d40; // UParticleSystemComponent*
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue2 = 0x3d48; // bool
			constexpr auto CallFunc_GetSocketLocation_ReturnValue2 = 0x3d4c; // FVector
			constexpr auto CallFunc_SpawnEmitterAttached_ReturnValue2 = 0x3d58; // UParticleSystemComponent*
			constexpr auto CallFunc_GetController_ReturnValue = 0x3d60; // AController*
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue6 = 0x3d68; // float
			constexpr auto CallFunc_CastToPlayerController_ReturnValue = 0x3d70; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue15 = 0x3d78; // bool
			constexpr auto CallFunc_IsValid_ReturnValue16 = 0x3d79; // bool
			constexpr auto CallFunc_GetWorldCameraShakeScale_ReturnValue3 = 0x3d7c; // float
			constexpr auto CallFunc_MapRange_ReturnValue3 = 0x3d80; // float
			constexpr auto CallFunc_IsValid_ReturnValue17 = 0x3d84; // bool
			constexpr auto CallFunc_FClamp_ReturnValue3 = 0x3d88; // float
			constexpr auto CallFunc_Not_PreBool_ReturnValue3 = 0x3d8c; // bool
			constexpr auto CallFunc_IsMontagePlaying_ReturnValue = 0x3d8d; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue7 = 0x3d90; // float
			constexpr auto CallFunc_BooleanAND_ReturnValue2 = 0x3d94; // bool
			constexpr auto CallFunc_IsMontagePlaying_ReturnValue2 = 0x3d95; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue3 = 0x3d96; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue3 = 0x3d97; // bool
			constexpr auto CallFunc_IsMontagePlaying_ReturnValue3 = 0x3d98; // bool
			constexpr auto CallFunc_IsPrimalCharSwimming_ReturnValue4 = 0x3d99; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue8 = 0x3d9c; // float
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue8 = 0x3da0; // FVector
			constexpr auto CallFunc_K2_GetWorld_ReturnValue9 = 0x3db0; // UWorld*
			constexpr auto CallFunc_K2_IsTimerActive_ReturnValue2 = 0x3db8; // bool
			constexpr auto CallFunc_IsPointUnderwater_ReturnValue2 = 0x3db9; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue2 = 0x3dba; // bool
			constexpr auto CallFunc_StaticAddBuff_ReturnValue = 0x3dc0; // APrimalBuff*
			constexpr auto CallFunc_GetController_ReturnValue2 = 0x3dc8; // AController*
			constexpr auto CallFunc_CastToPlayerController_ReturnValue2 = 0x3dd0; // APlayerController*
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue9 = 0x3dd8; // float
			constexpr auto CallFunc_IsValid_ReturnValue18 = 0x3ddc; // bool
			constexpr auto CallFunc_IsValid_ReturnValue19 = 0x3ddd; // bool
			constexpr auto CallFunc_GetWorldCameraShakeScale_ReturnValue4 = 0x3de0; // float
			constexpr auto CallFunc_MapRange_ReturnValue4 = 0x3de4; // float
			constexpr auto CallFunc_FClamp_ReturnValue4 = 0x3de8; // float
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue4 = 0x3dec; // bool
			constexpr auto CallFunc_IsRunningOnServer_OutNetworkMode6 = 0x3ded; // ENetworkModeResult
			constexpr auto K2Node_SwitchEnum6_CmpSuccess = 0x3dee; // bool
			constexpr auto CallFunc_NotEqual_VectorVector_ReturnValue2 = 0x3def; // bool
			constexpr auto CallFunc_IsPrimalCharSwimming_ReturnValue5 = 0x3df0; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue10 = 0x3df4; // float
			constexpr auto CallFunc_GetOwnerController_ReturnValue8 = 0x3df8; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue20 = 0x3e00; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue9 = 0x3e04; // FVector
			constexpr auto CallFunc_IsLocallyControlledByPlayer_ReturnValue5 = 0x3e10; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue11 = 0x3e14; // float
			constexpr auto CallFunc_IsValid_ReturnValue21 = 0x3e18; // bool
			constexpr auto CallFunc_K2_GetRootComponent_ReturnValue4 = 0x3e20; // USceneComponent*
			constexpr auto CallFunc_PlaySoundAttached_ReturnValue = 0x3e28; // UAudioComponent*
			constexpr auto CallFunc_MapRange_ReturnValue5 = 0x3e30; // float
			constexpr auto CallFunc_FClamp_ReturnValue5 = 0x3e34; // float
			constexpr auto CallFunc_IsValid_ReturnValue22 = 0x3e38; // bool
			constexpr auto CallFunc_Conv_IntToFloat_ReturnValue = 0x3e3c; // float
			constexpr auto CallFunc_Safe_Float_Divide___output = 0x3e40; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue5 = 0x3e44; // float
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue2 = 0x3e48; // float
			constexpr auto CallFunc_Subtract_FloatFloat_ReturnValue2 = 0x3e4c; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue6 = 0x3e50; // float
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue5 = 0x3e54; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue6 = 0x3e55; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue10 = 0x3e58; // FVector
			constexpr auto CallFunc_CanRunCosmeticEvents_OutNetworkMode = 0x3e64; // ENetworkModeResult
			constexpr auto CallFunc_SphereTraceSingle_NEW_ActorsToIgnore_RefProperty = 0x3e68; // TArray<AActor*>
			constexpr auto CallFunc_SphereTraceSingle_NEW_OutHit = 0x3e78; // FHitResult
			constexpr auto CallFunc_SphereTraceSingle_NEW_ReturnValue = 0x3f00; // bool
			constexpr auto K2Node_SwitchEnum7_CmpSuccess = 0x3f01; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue11 = 0x3f04; // FVector
			constexpr auto CallFunc_GetController_ReturnValue3 = 0x3f10; // AController*
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue5 = 0x3f18; // UParticleSystemComponent*
			constexpr auto CallFunc_CastToPlayerController_ReturnValue3 = 0x3f20; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue23 = 0x3f28; // bool
			constexpr auto CallFunc_IsValid_ReturnValue24 = 0x3f29; // bool
			constexpr auto CallFunc_GetWorldCameraShakeScale_ReturnValue5 = 0x3f2c; // float
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue7 = 0x3f30; // bool
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue7 = 0x3f34; // float
			constexpr auto CallFunc_MapRange_ReturnValue6 = 0x3f38; // float
			constexpr auto CallFunc_FClamp_ReturnValue6 = 0x3f3c; // float
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue3 = 0x3f40; // FVector
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue3 = 0x3f4c; // FVector
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue12 = 0x3f58; // FVector
			constexpr auto CallFunc_CanRunCosmeticEvents_OutNetworkMode2 = 0x3f64; // ENetworkModeResult
			constexpr auto CallFunc_Add_VectorVector_ReturnValue12 = 0x3f68; // FVector
			constexpr auto K2Node_SwitchEnum8_CmpSuccess = 0x3f74; // bool
			constexpr auto CallFunc_SphereTraceSingle_NEW_ActorsToIgnore2_RefProperty = 0x3f78; // TArray<AActor*>
			constexpr auto CallFunc_SphereTraceSingle_NEW_OutHit2 = 0x3f88; // FHitResult
			constexpr auto CallFunc_SphereTraceSingle_NEW_ReturnValue2 = 0x4010; // bool
			constexpr auto CallFunc_GetController_ReturnValue4 = 0x4018; // AController*
			constexpr auto CallFunc_GetNetworkTimeInSeconds_ReturnValue5 = 0x4020; // double
			constexpr auto CallFunc_CastToPlayerController_ReturnValue4 = 0x4028; // APlayerController*
			constexpr auto CallFunc_Greater_IntInt_ReturnValue4 = 0x4030; // bool
			constexpr auto CallFunc_Allow_Nocturnal_Logic_result = 0x4031; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue8 = 0x4032; // bool
			constexpr auto CallFunc_BPIsTamed_ReturnValue2 = 0x4033; // bool
			constexpr auto CallFunc_GetGameState_ReturnValue = 0x4038; // AGameState*
			constexpr auto CallFunc_Not_PreBool_ReturnValue4 = 0x4040; // bool
			constexpr auto K2Node_DynamicCast_AsShooterGameState = 0x4048; // AShooterGameState*
			constexpr auto K2Node_DynamicCast9_CastSuccess = 0x4050; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue5 = 0x4051; // bool
			constexpr auto CallFunc_NotEqual_IntInt_ReturnValue = 0x4052; // bool
			constexpr auto CallFunc_GetCharacterController_ReturnValue = 0x4058; // AController*
			constexpr auto CallFunc_BPIsConscious_ReturnValue = 0x4060; // bool
			constexpr auto K2Node_DynamicCast_AsPrimalDinoAIController = 0x4068; // APrimalDinoAIController*
			constexpr auto K2Node_DynamicCast10_CastSuccess = 0x4070; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue4 = 0x4071; // bool
			constexpr auto CallFunc_EqualEqual_IntInt_ReturnValue = 0x4072; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue6 = 0x4073; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue5 = 0x4074; // bool
			constexpr auto CallFunc_K2_IsTimerActive_ReturnValue3 = 0x4075; // bool
			constexpr auto CallFunc_K2_IsTimerActive_ReturnValue4 = 0x4076; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue3 = 0x4077; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue4 = 0x4078; // bool
			constexpr auto CallFunc_GetAnimInstance_ReturnValue2 = 0x4080; // UAnimInstance*
			constexpr auto K2Node_DynamicCast_AsLionfishLion_AnimBlueprint_Swimmable_C2 = 0x4088; // ULionfishLion_AnimBlueprint_Swimmable_C*
			constexpr auto K2Node_DynamicCast11_CastSuccess = 0x4090; // bool
			constexpr auto CallFunc_GetCurrentMontage_ReturnValue2 = 0x4098; // UAnimMontage*
			constexpr auto CallFunc_IsValid_ReturnValue25 = 0x40a0; // bool
			constexpr auto CallFunc_NotEqual_ObjectObject_ReturnValue4 = 0x40a1; // bool
			constexpr auto CallFunc_GetCurrentMontage_ReturnValue3 = 0x40a8; // UAnimMontage*
			constexpr auto CallFunc_IsValid_ReturnValue26 = 0x40b0; // bool
			constexpr auto CallFunc_NotEqual_ObjectObject_ReturnValue5 = 0x40b1; // bool
			constexpr auto CallFunc_NotEqual_ObjectObject_ReturnValue6 = 0x40b2; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue6 = 0x40b3; // bool
			constexpr auto CallFunc_GetAnimInstance_ReturnValue3 = 0x40b8; // UAnimInstance*
			constexpr auto CallFunc_IsMovingOnGround_ReturnValue = 0x40c0; // bool
			constexpr auto K2Node_DynamicCast_AsLionfishLion_AnimBlueprint_Swimmable_C3 = 0x40c8; // ULionfishLion_AnimBlueprint_Swimmable_C*
			constexpr auto K2Node_DynamicCast12_CastSuccess = 0x40d0; // bool
			constexpr auto CallFunc_GetSimpleMontageDuration_ReturnValue = 0x40d4; // float
			constexpr auto CallFunc_GetSimpleMontageDuration_ReturnValue2 = 0x40d8; // float
			constexpr auto CallFunc_Safe_Float_Divide___output2 = 0x40dc; // float
			constexpr auto CallFunc_NotEqual_FloatFloat_ReturnValue = 0x40e0; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue12 = 0x40e4; // float
			constexpr auto CallFunc_SelectFloat_ReturnValue5 = 0x40e8; // float
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue13 = 0x40ec; // float
			constexpr auto CallFunc_IsValid_ReturnValue27 = 0x40f0; // bool
			constexpr auto CallFunc_BooleanOR_ReturnValue5 = 0x40f1; // bool
			constexpr auto CallFunc_GetAnimInstance_ReturnValue4 = 0x40f8; // UAnimInstance*
			constexpr auto CallFunc_IsValid_ReturnValue28 = 0x4100; // bool
			constexpr auto CallFunc_Greater_FloatFloat_ReturnValue = 0x4101; // bool
			constexpr auto CallFunc_SelectFloat_ReturnValue6 = 0x4104; // float
			constexpr auto CallFunc_GetAnimInstance_ReturnValue5 = 0x4108; // UAnimInstance*
			constexpr auto K2Node_DynamicCast_AsLionfishLion_AnimBlueprint_Swimmable_C4 = 0x4110; // ULionfishLion_AnimBlueprint_Swimmable_C*
			constexpr auto K2Node_DynamicCast13_CastSuccess = 0x4118; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue9 = 0x4119; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue10 = 0x411a; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue11 = 0x411b; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue12 = 0x411c; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue13 = 0x411d; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue10 = 0x4120; // UWorld*
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue14 = 0x4128; // bool
			constexpr auto CallFunc_IsValid_ReturnValue29 = 0x4129; // bool
			constexpr auto K2Node_CustomEvent_cancel_anim = 0x412a; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue15 = 0x412b; // bool
			constexpr auto CallFunc_Array_IsValidIndex_ReturnValue2 = 0x412c; // bool
			constexpr auto CallFunc_Array_Get_Item2 = 0x4130; // AActor*
			constexpr auto CallFunc_Array_IsValidIndex_ReturnValue3 = 0x4138; // bool
			constexpr auto CallFunc_Get_Desired_Teleport_Final_Location_In_Front_Of_the_Enemy_final_location = 0x413c; // FVector
			constexpr auto CallFunc_Is_Teleport_End_Location_Blocked_OutHit = 0x4148; // FHitResult
			constexpr auto CallFunc_Is_Teleport_End_Location_Blocked_ReturnValue = 0x41d0; // bool
			constexpr auto CallFunc_Get_Desired_Teleport_Final_Location_Behind_The_Enemy_final_location = 0x41d4; // FVector
			constexpr auto CallFunc_Is_Teleport_End_Location_Blocked_OutHit2 = 0x41e0; // FHitResult
			constexpr auto CallFunc_Is_Teleport_End_Location_Blocked_ReturnValue2 = 0x4268; // bool
			constexpr auto CallFunc_BreakHitResult_Location4 = 0x426c; // FVector
			constexpr auto CallFunc_BreakHitResult_Normal4 = 0x4278; // FVector
			constexpr auto CallFunc_BreakHitResult_ImpactPoint4 = 0x4284; // FVector
			constexpr auto CallFunc_BreakHitResult_ImpactNormal4 = 0x4290; // FVector
			constexpr auto CallFunc_BreakHitResult_PhysMat4 = 0x42a0; // UPhysicalMaterial*
			constexpr auto CallFunc_BreakHitResult_HitActor4 = 0x42a8; // AActor*
			constexpr auto CallFunc_BreakHitResult_HitComponent4 = 0x42b0; // UPrimitiveComponent*
			constexpr auto CallFunc_BreakHitResult_HitBoneName4 = 0x42b8; // FName
			constexpr auto CallFunc_BreakHitResult_HitItem4 = 0x42c0; // int32_t
			constexpr auto CallFunc_BreakHitResult_BlockingHit4 = 0x42c4; // bool
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue2 = 0x42c8; // FVector
			constexpr auto CallFunc_Array_AddUnique_ReturnValue = 0x42d4; // int32_t
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue4 = 0x42d8; // FVector
			constexpr auto CallFunc_is_line_of_sight_to_target_blocked_blocked = 0x42e4; // bool
			constexpr auto CallFunc_Subtract_VectorVector_ReturnValue3 = 0x42e8; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue30 = 0x42f4; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue13 = 0x42f8; // FVector
			constexpr auto K2Node_CustomEvent_initial_location = 0x4304; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue31 = 0x4310; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue14 = 0x4314; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue32 = 0x4320; // bool
			constexpr auto CallFunc_get_rotation_to_face_opponent_ReturnValue = 0x4324; // FRotator
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue16 = 0x4330; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue17 = 0x4331; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue18 = 0x4332; // bool
			constexpr auto CallFunc_Array_IsValidIndex_ReturnValue4 = 0x4333; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue7 = 0x4334; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue14 = 0x4338; // float
			constexpr auto CallFunc_BooleanAND_ReturnValue7 = 0x433c; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue8 = 0x433d; // bool
			constexpr auto CallFunc_PlayAnimMontage_ReturnValue15 = 0x4340; // float
			constexpr auto CallFunc_EqualEqual_ObjectObject_ReturnValue3 = 0x4344; // bool
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue15 = 0x4348; // FVector
			constexpr auto CallFunc_K2_GetWorld_ReturnValue11 = 0x4358; // UWorld*
			constexpr auto CallFunc_IsPointUnderwater_ReturnValue3 = 0x4360; // bool
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue3 = 0x4364; // float
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue19 = 0x4368; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue20 = 0x4369; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue21 = 0x436a; // bool
			constexpr auto CallFunc_K2_GetWorld_ReturnValue12 = 0x4370; // UWorld*
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue16 = 0x4378; // FVector
			constexpr auto CallFunc_IsPointUnderwater_ReturnValue4 = 0x4384; // bool
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue22 = 0x4385; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue8 = 0x4386; // bool
			constexpr auto CallFunc_BooleanAND_ReturnValue9 = 0x4387; // bool
			constexpr auto CallFunc_K2_GetComponentRotation_ReturnValue = 0x4388; // FRotator
			constexpr auto CallFunc_BreakRot_Pitch2 = 0x4394; // float
			constexpr auto CallFunc_BreakRot_Yaw2 = 0x4398; // float
			constexpr auto CallFunc_BreakRot_Roll2 = 0x439c; // float
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue23 = 0x43a0; // bool
			constexpr auto CallFunc_MakeRot_ReturnValue = 0x43a4; // FRotator
			constexpr auto CallFunc_IsDedicatedServer_ReturnValue24 = 0x43b0; // bool
			constexpr auto CallFunc_IsValid_ReturnValue33 = 0x43b1; // bool
			constexpr auto K2Node_CustomEvent_Is_Quick_Tap_Teleport = 0x43b2; // bool
			constexpr auto K2Node_CustomEvent_Teleport_Target_Count = 0x43b4; // int32_t
			constexpr auto CallFunc_IsValid_ReturnValue34 = 0x43b8; // bool
			constexpr auto CallFunc_Subtract_IntInt_ReturnValue = 0x43bc; // int32_t
			constexpr auto CallFunc_Conv_IntToFloat_ReturnValue2 = 0x43c0; // float
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue4 = 0x43c4; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue8 = 0x43c8; // float
			constexpr auto CallFunc_FClamp_ReturnValue7 = 0x43cc; // float
			constexpr auto CallFunc_Lerp_ReturnValue2 = 0x43d0; // float
			constexpr auto CallFunc_MakeRot_ReturnValue2 = 0x43d4; // FRotator
			constexpr auto CallFunc_EqualEqual_ByteByte_ReturnValue = 0x43e0; // bool
			constexpr auto CallFunc_GetOwnerController_ReturnValue9 = 0x43e8; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue35 = 0x43f0; // bool
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController3 = 0x43f8; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast14_CastSuccess = 0x4400; // bool
			constexpr auto CallFunc_IsValid_ReturnValue36 = 0x4401; // bool
			constexpr auto CallFunc_IsValid_ReturnValue37 = 0x4402; // bool
			constexpr auto CallFunc_GetWorldCameraShakeScale_ReturnValue6 = 0x4404; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue9 = 0x4408; // float
			constexpr auto CallFunc_MapRange_ReturnValue7 = 0x440c; // float
			constexpr auto CallFunc_FClamp_ReturnValue8 = 0x4410; // float
			constexpr auto CallFunc_GetSocketLocationTemp_ReturnValue = 0x4414; // FVector
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue6 = 0x4420; // UParticleSystemComponent*
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue4 = 0x4428; // FVector
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue3 = 0x4434; // FRotator
			constexpr auto CallFunc_Lerp_ReturnValue3 = 0x4440; // float
			constexpr auto CallFunc_MakeRot_ReturnValue3 = 0x4444; // FRotator
			constexpr auto CallFunc_SetActorRotation_ReturnValue = 0x4450; // bool
			constexpr auto K2Node_CreateDelegate_OutputDelegate = 0x4454; // DelegateProperty
			constexpr auto CallFunc_Lerp_ReturnValue4 = 0x4464; // float
			constexpr auto CallFunc_MakeVector_ReturnValue7 = 0x4468; // FVector
			constexpr auto CallFunc_Is_Close_Enough_To_Hit_Big_Spacebar_Leap_Target_can_hit_target = 0x4474; // bool
			constexpr auto CallFunc_Is_Close_Enough_To_Hit_Big_Spacebar_Leap_Target_can_hit_target2 = 0x4475; // bool
			constexpr auto CallFunc_StaticAddBuff_ReturnValue2 = 0x4478; // APrimalBuff*
			constexpr auto CallFunc_StaticAddBuff_ReturnValue3 = 0x4480; // APrimalBuff*
			constexpr auto CallFunc_IsValid_ReturnValue38 = 0x4488; // bool
			constexpr auto CallFunc_IsValid_ReturnValue39 = 0x4489; // bool
			constexpr auto CallFunc_StaticAddBuff_ReturnValue4 = 0x4490; // APrimalBuff*
			constexpr auto CallFunc_VLerp_ReturnValue3 = 0x4498; // FVector
			constexpr auto CallFunc_IsValid_ReturnValue40 = 0x44a4; // bool
			constexpr auto CallFunc_Conv_IntToFloat_ReturnValue3 = 0x44a8; // float
			constexpr auto CallFunc_Safe_Float_Divide___output3 = 0x44ac; // float
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue5 = 0x44b0; // float
			constexpr auto CallFunc_FClamp_ReturnValue9 = 0x44b4; // float
			constexpr auto CallFunc_Subtract_FloatFloat_ReturnValue3 = 0x44b8; // float
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue6 = 0x44bc; // float
			constexpr auto CallFunc_Multiply_VectorFloat_ReturnValue5 = 0x44c0; // FVector
			constexpr auto K2Node_CreateDelegate_OutputDelegate2 = 0x44cc; // DelegateProperty
			constexpr auto CallFunc_Add_IntInt_ReturnValue2 = 0x44dc; // int32_t
			constexpr auto K2Node_CreateDelegate_OutputDelegate3 = 0x44e0; // DelegateProperty
			constexpr auto CallFunc_GetOwnerController_ReturnValue10 = 0x44f0; // APlayerController*
			constexpr auto CallFunc_IsValid_ReturnValue41 = 0x44f8; // bool
			constexpr auto K2Node_DynamicCast_AsShooterPlayerController4 = 0x4500; // AShooterPlayerController*
			constexpr auto K2Node_DynamicCast15_CastSuccess = 0x4508; // bool
			constexpr auto CallFunc_IsValid_ReturnValue42 = 0x4509; // bool
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue7 = 0x450c; // float
			constexpr auto CallFunc_IsValid_ReturnValue43 = 0x4510; // bool
			constexpr auto CallFunc_Multiply_FloatFloat_ReturnValue8 = 0x4514; // float
			constexpr auto CallFunc_Add_FloatFloat_ReturnValue10 = 0x4518; // float
			constexpr auto CallFunc_GetWorldCameraShakeScale_ReturnValue7 = 0x451c; // float
			constexpr auto CallFunc_MapRange_ReturnValue8 = 0x4520; // float
			constexpr auto CallFunc_GetActorForwardVector_ReturnValue5 = 0x4524; // FVector
			constexpr auto CallFunc_FClamp_ReturnValue10 = 0x4530; // float
			constexpr auto CallFunc_Conv_VectorToRotator_ReturnValue4 = 0x4534; // FRotator
			constexpr auto CallFunc_K2_GetActorLocation_ReturnValue17 = 0x4540; // FVector
			constexpr auto CallFunc_Add_VectorVector_ReturnValue13 = 0x454c; // FVector
			constexpr auto CallFunc_Divide_VectorFloat_ReturnValue3 = 0x4558; // FVector
			constexpr auto CallFunc_SpawnEmitterAtLocation_ReturnValue7 = 0x4568; // UParticleSystemComponent*
			constexpr auto CallFunc_IsValid_ReturnValue44 = 0x4570; // bool
			constexpr auto CallFunc_BPIsTamed_ReturnValue3 = 0x4571; // bool
			constexpr auto CallFunc_Not_PreBool_ReturnValue9 = 0x4572; // bool
			constexpr auto CallFunc_does_it_have_enough_stamina_result = 0x4573; // bool
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore_RefProperty = 0x4578; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore2_RefProperty = 0x4588; // TArray<AActor*>
			constexpr auto CallFunc_SphereTraceSingle_NEW_ActorsToIgnore3_RefProperty = 0x4598; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore3_RefProperty = 0x45a8; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore4_RefProperty = 0x45b8; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceMulti_NEW_ActorsToIgnore_RefProperty = 0x45c8; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceMulti_NEW_ActorsToIgnore2_RefProperty = 0x45d8; // TArray<AActor*>
			constexpr auto CallFunc_SphereTraceSingle_NEW_ActorsToIgnore4_RefProperty = 0x45e8; // TArray<AActor*>
			constexpr auto CallFunc_SphereTraceSingle_NEW_ActorsToIgnore5_RefProperty = 0x45f8; // TArray<AActor*>
			constexpr auto CallFunc_SphereTraceSingle_NEW_ActorsToIgnore6_RefProperty = 0x4608; // TArray<AActor*>
			constexpr auto CallFunc_LineTraceSingle_NEW_ActorsToIgnore5_RefProperty = 0x4618; // TArray<AActor*>
		}
		// Inheritance: 
		namespace FItemNetInfo
		{
			constexpr auto ItemArchetype = 0x0; // UPrimalItem*
			constexpr auto ItemId = 0x8; // FItemNetID
			constexpr auto ItemQuantity = 0x10; // uint32_t
			constexpr auto CustomItemID = 0x14; // int32_t
			constexpr auto SlotIndex = 0x18; // int32_t
			constexpr auto CreationTime = 0x20; // double
			constexpr auto CustomItemName = 0x28; // FString
			constexpr auto CustomItemDescription = 0x38; // FString
			constexpr auto UploadEarliestValidTime = 0x48; // double
			constexpr auto SteamUserItemID = 0x50; // TArray<uint64_t>
			constexpr auto bIsRepairing = 0x60; // char : 1
			constexpr auto bAllowRemovalFromSteamInventory = 0x60; // char : 1
			constexpr auto bHideFromInventoryDisplay = 0x60; // char : 1
			constexpr auto bAllowRemovalFromInventory = 0x60; // char : 1
			constexpr auto bIsFoodRecipe = 0x60; // char : 1
			constexpr auto bIsEngram = 0x60; // char : 1
			constexpr auto bIsBlueprint = 0x60; // char : 1
			constexpr auto bIsCustomRecipe = 0x60; // char : 1
			constexpr auto bIsEquipped = 0x61; // char : 1
			constexpr auto bIsInitialItem = 0x61; // char : 1
			constexpr auto bIsSlot = 0x61; // char : 1
			constexpr auto bForcePreventGrinding = 0x61; // char : 1
			constexpr auto bIsFromAllClustersInventory = 0x61; // char : 1
			constexpr auto bFromSteamInventory = 0x61; // char : 1
			constexpr auto CraftQueue = 0x64; // uint16_t
			constexpr auto NextCraftCompletionTime = 0x68; // double
			constexpr auto CraftingSkill = 0x70; // float
			constexpr auto CraftedSkillBonus = 0x74; // float
			constexpr auto CrafterCharacterName = 0x78; // FString
			constexpr auto CrafterTribeName = 0x88; // FString
			constexpr auto WeaponClipAmmo = 0x98; // uint32_t
			constexpr auto ItemDurability = 0x9c; // float
			constexpr auto ItemRating = 0xa0; // float
			constexpr auto ExpirationTimeUTC = 0xa4; // uint32_t
			constexpr auto ItemQualityIndex = 0xa8; // char
			constexpr auto ItemCustomClass = 0xb0; // UPrimalItem*
			constexpr auto ItemStatValues0x8 = 0xb8; // uint16_t
			constexpr auto ItemColorID0x6 = 0xc8; // int16_t
			constexpr auto ItemSkinTemplate = 0xd8; // UPrimalItem*
			constexpr auto CustomItemDatas = 0xe0; // TArray<FCustomItemData>
			constexpr auto CustomItemColors = 0xf0; // TArray<FColor>
			constexpr auto CustomResourceRequirements = 0x100; // TArray<FCraftingResourceRequirement>
			constexpr auto NextSpoilingTime = 0x110; // double
			constexpr auto LastSpoilingTime = 0x118; // double
			constexpr auto OwnerPlayerDataID = 0x120; // uint64_t
			constexpr auto LastOwnerPlayer = 0x128; // TWeakObjectPtr<AShooterCharacter>
			constexpr auto LastAutoDurabilityDecreaseTime = 0x130; // double
			constexpr auto ItemStatClampsMultiplier = 0x138; // float
			constexpr auto OriginalItemDropLocation = 0x13c; // FVector
			constexpr auto PreSkinItemColorID0x6 = 0x148; // int16_t
			constexpr auto EggNumberOfLevelUpPointsApplied0xc = 0x154; // char
			constexpr auto EggTamedIneffectivenessModifier = 0x160; // float
			constexpr auto EggColorSetIndices0x6 = 0x164; // char
			constexpr auto EggGenderOverride = 0x16c; // int32_t
			constexpr auto ItemVersion = 0x170; // char
			constexpr auto ClusterSpoilingTimeUTC = 0x178; // double
			constexpr auto EggDinoAncestors = 0x180; // TArray<FDinoAncestorsEntry>
			constexpr auto EggDinoAncestorsMale = 0x190; // TArray<FDinoAncestorsEntry>
			constexpr auto EggRandomMutationsFemale = 0x1a0; // int32_t
			constexpr auto EggRandomMutationsMale = 0x1a4; // int32_t
			constexpr auto ItemProfileVersion = 0x1a8; // char
			constexpr auto bNetInfoFromClient = 0x1a9; // bool
		}
	}
}
